/* tslint:disable */
/* eslint-disable */
/*
Appwrite

Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)

The version of the OpenAPI document: 1.5.0
Contact: team@appwrite.io

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Membership } from '../models';
// @ts-ignore
import { MembershipList } from '../models';
// @ts-ignore
import { Team } from '../models';
// @ts-ignore
import { TeamList } from '../models';
// @ts-ignore
import { TeamsCreateMembershipRequestRequest } from '../models';
// @ts-ignore
import { TeamsCreateNewTeamRequest } from '../models';
// @ts-ignore
import { TeamsUpdateMembershipRolesRequest } from '../models';
// @ts-ignore
import { TeamsUpdateMembershipStatusRequest } from '../models';
// @ts-ignore
import { TeamsUpdateNameByIdRequest } from '../models';
// @ts-ignore
import { TeamsUpdatePrefsByIdRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TeamsApi - axios parameter creator
 * @export
 */
export const TeamsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Invite a new member to join your team. Provide an ID for existing users, or invite unregistered users using an email or phone number. If initiated from a Client SDK, Appwrite will send an email or sms with a link to join the team to the invited user, and an account will be created for them if one doesn\'t exist. If initiated from a Server SDK, the new member will be added automatically to the team.  You only need to provide one of a user ID, email, or phone number. Appwrite will prioritize accepting the user ID > email > phone number if you provide more than one of these parameters.  Use the `url` parameter to redirect the user from the invitation email to your app. After the user is redirected, use the [Update Team Membership Status](https://appwrite.io/docs/references/cloud/client-web/teams#updateMembershipStatus) endpoint to allow the user to accept the invitation to the team.   Please note that to avoid a [Redirect Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md) Appwrite will accept the only redirect URLs under the domains you have added as a platform on the Appwrite Console. 
         * @summary Create team membership
         * @param {string} teamId Team ID.
         * @param {TeamsCreateMembershipRequestRequest} [teamsCreateMembershipRequestRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMembershipRequest: async (teamId: string, teamsCreateMembershipRequestRequest?: TeamsCreateMembershipRequestRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('createMembershipRequest', 'teamId', teamId)
            const localVarPath = `/teams/{teamId}/memberships`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId !== undefined ? teamId : `-teamId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: teamsCreateMembershipRequestRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teams/{teamId}/memberships',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(teamsCreateMembershipRequestRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new team. The user who creates the team will automatically be assigned as the owner of the team. Only the users with the owner role can invite new members, add new owners and delete or update the team.
         * @summary Create team
         * @param {TeamsCreateNewTeamRequest} [teamsCreateNewTeamRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewTeam: async (teamsCreateNewTeamRequest?: TeamsCreateNewTeamRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/teams`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: teamsCreateNewTeamRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teams',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(teamsCreateNewTeamRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows a user to leave a team or for a team owner to delete the membership of any other team member. You can also use this endpoint to delete a user membership even if it is not accepted.
         * @summary Delete team membership
         * @param {string} teamId Team ID.
         * @param {string} membershipId Membership ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMembership: async (teamId: string, membershipId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('deleteMembership', 'teamId', teamId)
            // verify required parameter 'membershipId' is not null or undefined
            assertParamExists('deleteMembership', 'membershipId', membershipId)
            const localVarPath = `/teams/{teamId}/memberships/{membershipId}`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId !== undefined ? teamId : `-teamId-`)))
                .replace(`{${"membershipId"}}`, encodeURIComponent(String(membershipId !== undefined ? membershipId : `-membershipId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teams/{teamId}/memberships/{membershipId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a team by its ID. All team members have read access for this resource.
         * @summary Get team
         * @param {string} teamId Team ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (teamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getById', 'teamId', teamId)
            const localVarPath = `/teams/{teamId}`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId !== undefined ? teamId : `-teamId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teams/{teamId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a team member by the membership unique id. All team members have read access for this resource.
         * @summary Get team membership
         * @param {string} teamId Team ID.
         * @param {string} membershipId Membership ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMembership: async (teamId: string, membershipId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getMembership', 'teamId', teamId)
            // verify required parameter 'membershipId' is not null or undefined
            assertParamExists('getMembership', 'membershipId', membershipId)
            const localVarPath = `/teams/{teamId}/memberships/{membershipId}`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId !== undefined ? teamId : `-teamId-`)))
                .replace(`{${"membershipId"}}`, encodeURIComponent(String(membershipId !== undefined ? membershipId : `-membershipId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teams/{teamId}/memberships/{membershipId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the team\'s shared preferences by its unique ID. If a preference doesn\'t need to be shared by all team members, prefer storing them in [user preferences](https://appwrite.io/docs/references/cloud/client-web/account#getPrefs).
         * @summary Get team preferences
         * @param {string} teamId Team ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrefsById: async (teamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getPrefsById', 'teamId', teamId)
            const localVarPath = `/teams/{teamId}/prefs`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId !== undefined ? teamId : `-teamId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teams/{teamId}/prefs',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of all the teams in which the current user is a member. You can use the parameters to filter your results.
         * @summary List teams
         * @param {Array<string>} [queries] Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: name, total, billingPlan
         * @param {string} [search] Search term to filter your list results. Max length: 256 chars.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserTeams: async (queries?: Array<string>, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/teams`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })
            if (queries) {
                localVarQueryParameter['queries'] = queries;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teams',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to list a team\'s members using the team\'s ID. All team members have read access to this endpoint.
         * @summary List team memberships
         * @param {string} teamId Team ID.
         * @param {Array<string>} [queries] Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: userId, teamId, invited, joined, confirm
         * @param {string} [search] Search term to filter your list results. Max length: 256 chars.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMemberships: async (teamId: string, queries?: Array<string>, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listMemberships', 'teamId', teamId)
            const localVarPath = `/teams/{teamId}/memberships`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId !== undefined ? teamId : `-teamId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })
            if (queries) {
                localVarQueryParameter['queries'] = queries;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teams/{teamId}/memberships',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a team using its ID. Only team members with the owner role can delete the team.
         * @summary Delete team
         * @param {string} teamId Team ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeTeamById: async (teamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('removeTeamById', 'teamId', teamId)
            const localVarPath = `/teams/{teamId}`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId !== undefined ? teamId : `-teamId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teams/{teamId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify the roles of a team member. Only team members with the owner role have access to this endpoint. Learn more about [roles and permissions](https://appwrite.io/docs/permissions). 
         * @summary Update membership
         * @param {string} teamId Team ID.
         * @param {string} membershipId Membership ID.
         * @param {TeamsUpdateMembershipRolesRequest} [teamsUpdateMembershipRolesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMembershipRoles: async (teamId: string, membershipId: string, teamsUpdateMembershipRolesRequest?: TeamsUpdateMembershipRolesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('updateMembershipRoles', 'teamId', teamId)
            // verify required parameter 'membershipId' is not null or undefined
            assertParamExists('updateMembershipRoles', 'membershipId', membershipId)
            const localVarPath = `/teams/{teamId}/memberships/{membershipId}`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId !== undefined ? teamId : `-teamId-`)))
                .replace(`{${"membershipId"}}`, encodeURIComponent(String(membershipId !== undefined ? membershipId : `-membershipId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: teamsUpdateMembershipRolesRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teams/{teamId}/memberships/{membershipId}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(teamsUpdateMembershipRolesRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to allow a user to accept an invitation to join a team after being redirected back to your app from the invitation email received by the user.  If the request is successful, a session for the user is automatically created. 
         * @summary Update team membership status
         * @param {string} teamId Team ID.
         * @param {string} membershipId Membership ID.
         * @param {TeamsUpdateMembershipStatusRequest} [teamsUpdateMembershipStatusRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMembershipStatus: async (teamId: string, membershipId: string, teamsUpdateMembershipStatusRequest?: TeamsUpdateMembershipStatusRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('updateMembershipStatus', 'teamId', teamId)
            // verify required parameter 'membershipId' is not null or undefined
            assertParamExists('updateMembershipStatus', 'membershipId', membershipId)
            const localVarPath = `/teams/{teamId}/memberships/{membershipId}/status`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId !== undefined ? teamId : `-teamId-`)))
                .replace(`{${"membershipId"}}`, encodeURIComponent(String(membershipId !== undefined ? membershipId : `-membershipId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: teamsUpdateMembershipStatusRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teams/{teamId}/memberships/{membershipId}/status',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(teamsUpdateMembershipStatusRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the team\'s name by its unique ID.
         * @summary Update name
         * @param {string} teamId Team ID.
         * @param {TeamsUpdateNameByIdRequest} [teamsUpdateNameByIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNameById: async (teamId: string, teamsUpdateNameByIdRequest?: TeamsUpdateNameByIdRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('updateNameById', 'teamId', teamId)
            const localVarPath = `/teams/{teamId}`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId !== undefined ? teamId : `-teamId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: teamsUpdateNameByIdRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teams/{teamId}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(teamsUpdateNameByIdRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the team\'s preferences by its unique ID. The object you pass is stored as is and replaces any previous value. The maximum allowed prefs size is 64kB and throws an error if exceeded.
         * @summary Update preferences
         * @param {string} teamId Team ID.
         * @param {TeamsUpdatePrefsByIdRequest} [teamsUpdatePrefsByIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePrefsById: async (teamId: string, teamsUpdatePrefsByIdRequest?: TeamsUpdatePrefsByIdRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('updatePrefsById', 'teamId', teamId)
            const localVarPath = `/teams/{teamId}/prefs`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId !== undefined ? teamId : `-teamId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: teamsUpdatePrefsByIdRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teams/{teamId}/prefs',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(teamsUpdatePrefsByIdRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeamsApi - functional programming interface
 * @export
 */
export const TeamsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TeamsApiAxiosParamCreator(configuration)
    return {
        /**
         * Invite a new member to join your team. Provide an ID for existing users, or invite unregistered users using an email or phone number. If initiated from a Client SDK, Appwrite will send an email or sms with a link to join the team to the invited user, and an account will be created for them if one doesn\'t exist. If initiated from a Server SDK, the new member will be added automatically to the team.  You only need to provide one of a user ID, email, or phone number. Appwrite will prioritize accepting the user ID > email > phone number if you provide more than one of these parameters.  Use the `url` parameter to redirect the user from the invitation email to your app. After the user is redirected, use the [Update Team Membership Status](https://appwrite.io/docs/references/cloud/client-web/teams#updateMembershipStatus) endpoint to allow the user to accept the invitation to the team.   Please note that to avoid a [Redirect Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md) Appwrite will accept the only redirect URLs under the domains you have added as a platform on the Appwrite Console. 
         * @summary Create team membership
         * @param {TeamsApiCreateMembershipRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMembershipRequest(requestParameters: TeamsApiCreateMembershipRequestRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Membership>> {
            const teamsCreateMembershipRequestRequest: TeamsCreateMembershipRequestRequest = {
                email: requestParameters.email,
                userId: requestParameters.userId,
                phone: requestParameters.phone,
                roles: requestParameters.roles,
                url: requestParameters.url,
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMembershipRequest(requestParameters.teamId, teamsCreateMembershipRequestRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new team. The user who creates the team will automatically be assigned as the owner of the team. Only the users with the owner role can invite new members, add new owners and delete or update the team.
         * @summary Create team
         * @param {TeamsApiCreateNewTeamRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewTeam(requestParameters: TeamsApiCreateNewTeamRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team>> {
            const teamsCreateNewTeamRequest: TeamsCreateNewTeamRequest = {
                teamId: requestParameters.teamId,
                name: requestParameters.name,
                roles: requestParameters.roles
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewTeam(teamsCreateNewTeamRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows a user to leave a team or for a team owner to delete the membership of any other team member. You can also use this endpoint to delete a user membership even if it is not accepted.
         * @summary Delete team membership
         * @param {TeamsApiDeleteMembershipRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMembership(requestParameters: TeamsApiDeleteMembershipRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMembership(requestParameters.teamId, requestParameters.membershipId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a team by its ID. All team members have read access for this resource.
         * @summary Get team
         * @param {TeamsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: TeamsApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a team member by the membership unique id. All team members have read access for this resource.
         * @summary Get team membership
         * @param {TeamsApiGetMembershipRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMembership(requestParameters: TeamsApiGetMembershipRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Membership>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMembership(requestParameters.teamId, requestParameters.membershipId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the team\'s shared preferences by its unique ID. If a preference doesn\'t need to be shared by all team members, prefer storing them in [user preferences](https://appwrite.io/docs/references/cloud/client-web/account#getPrefs).
         * @summary Get team preferences
         * @param {TeamsApiGetPrefsByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPrefsById(requestParameters: TeamsApiGetPrefsByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: any; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPrefsById(requestParameters.teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of all the teams in which the current user is a member. You can use the parameters to filter your results.
         * @summary List teams
         * @param {TeamsApiGetUserTeamsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserTeams(requestParameters: TeamsApiGetUserTeamsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserTeams(requestParameters.queries, requestParameters.search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to list a team\'s members using the team\'s ID. All team members have read access to this endpoint.
         * @summary List team memberships
         * @param {TeamsApiListMembershipsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMemberships(requestParameters: TeamsApiListMembershipsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MembershipList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMemberships(requestParameters.teamId, requestParameters.queries, requestParameters.search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a team using its ID. Only team members with the owner role can delete the team.
         * @summary Delete team
         * @param {TeamsApiRemoveTeamByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeTeamById(requestParameters: TeamsApiRemoveTeamByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeTeamById(requestParameters.teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Modify the roles of a team member. Only team members with the owner role have access to this endpoint. Learn more about [roles and permissions](https://appwrite.io/docs/permissions). 
         * @summary Update membership
         * @param {TeamsApiUpdateMembershipRolesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMembershipRoles(requestParameters: TeamsApiUpdateMembershipRolesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Membership>> {
            const teamsUpdateMembershipRolesRequest: TeamsUpdateMembershipRolesRequest = {
                roles: requestParameters.roles
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMembershipRoles(requestParameters.teamId, requestParameters.membershipId, teamsUpdateMembershipRolesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to allow a user to accept an invitation to join a team after being redirected back to your app from the invitation email received by the user.  If the request is successful, a session for the user is automatically created. 
         * @summary Update team membership status
         * @param {TeamsApiUpdateMembershipStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMembershipStatus(requestParameters: TeamsApiUpdateMembershipStatusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Membership>> {
            const teamsUpdateMembershipStatusRequest: TeamsUpdateMembershipStatusRequest = {
                userId: requestParameters.userId,
                secret: requestParameters.secret
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMembershipStatus(requestParameters.teamId, requestParameters.membershipId, teamsUpdateMembershipStatusRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update the team\'s name by its unique ID.
         * @summary Update name
         * @param {TeamsApiUpdateNameByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateNameById(requestParameters: TeamsApiUpdateNameByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team>> {
            const teamsUpdateNameByIdRequest: TeamsUpdateNameByIdRequest = {
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateNameById(requestParameters.teamId, teamsUpdateNameByIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update the team\'s preferences by its unique ID. The object you pass is stored as is and replaces any previous value. The maximum allowed prefs size is 64kB and throws an error if exceeded.
         * @summary Update preferences
         * @param {TeamsApiUpdatePrefsByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePrefsById(requestParameters: TeamsApiUpdatePrefsByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: any; }>> {
            const teamsUpdatePrefsByIdRequest: TeamsUpdatePrefsByIdRequest = {
                prefs: requestParameters.prefs
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePrefsById(requestParameters.teamId, teamsUpdatePrefsByIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TeamsApi - factory interface
 * @export
 */
export const TeamsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TeamsApiFp(configuration)
    return {
        /**
         * Invite a new member to join your team. Provide an ID for existing users, or invite unregistered users using an email or phone number. If initiated from a Client SDK, Appwrite will send an email or sms with a link to join the team to the invited user, and an account will be created for them if one doesn\'t exist. If initiated from a Server SDK, the new member will be added automatically to the team.  You only need to provide one of a user ID, email, or phone number. Appwrite will prioritize accepting the user ID > email > phone number if you provide more than one of these parameters.  Use the `url` parameter to redirect the user from the invitation email to your app. After the user is redirected, use the [Update Team Membership Status](https://appwrite.io/docs/references/cloud/client-web/teams#updateMembershipStatus) endpoint to allow the user to accept the invitation to the team.   Please note that to avoid a [Redirect Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md) Appwrite will accept the only redirect URLs under the domains you have added as a platform on the Appwrite Console. 
         * @summary Create team membership
         * @param {TeamsApiCreateMembershipRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMembershipRequest(requestParameters: TeamsApiCreateMembershipRequestRequest, options?: AxiosRequestConfig): AxiosPromise<Membership> {
            return localVarFp.createMembershipRequest(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new team. The user who creates the team will automatically be assigned as the owner of the team. Only the users with the owner role can invite new members, add new owners and delete or update the team.
         * @summary Create team
         * @param {TeamsApiCreateNewTeamRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewTeam(requestParameters: TeamsApiCreateNewTeamRequest, options?: AxiosRequestConfig): AxiosPromise<Team> {
            return localVarFp.createNewTeam(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows a user to leave a team or for a team owner to delete the membership of any other team member. You can also use this endpoint to delete a user membership even if it is not accepted.
         * @summary Delete team membership
         * @param {TeamsApiDeleteMembershipRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMembership(requestParameters: TeamsApiDeleteMembershipRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteMembership(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a team by its ID. All team members have read access for this resource.
         * @summary Get team
         * @param {TeamsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: TeamsApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Team> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a team member by the membership unique id. All team members have read access for this resource.
         * @summary Get team membership
         * @param {TeamsApiGetMembershipRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMembership(requestParameters: TeamsApiGetMembershipRequest, options?: AxiosRequestConfig): AxiosPromise<Membership> {
            return localVarFp.getMembership(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the team\'s shared preferences by its unique ID. If a preference doesn\'t need to be shared by all team members, prefer storing them in [user preferences](https://appwrite.io/docs/references/cloud/client-web/account#getPrefs).
         * @summary Get team preferences
         * @param {TeamsApiGetPrefsByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrefsById(requestParameters: TeamsApiGetPrefsByIdRequest, options?: AxiosRequestConfig): AxiosPromise<{ [key: string]: any; }> {
            return localVarFp.getPrefsById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of all the teams in which the current user is a member. You can use the parameters to filter your results.
         * @summary List teams
         * @param {TeamsApiGetUserTeamsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserTeams(requestParameters: TeamsApiGetUserTeamsRequest, options?: AxiosRequestConfig): AxiosPromise<TeamList> {
            return localVarFp.getUserTeams(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to list a team\'s members using the team\'s ID. All team members have read access to this endpoint.
         * @summary List team memberships
         * @param {TeamsApiListMembershipsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMemberships(requestParameters: TeamsApiListMembershipsRequest, options?: AxiosRequestConfig): AxiosPromise<MembershipList> {
            return localVarFp.listMemberships(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a team using its ID. Only team members with the owner role can delete the team.
         * @summary Delete team
         * @param {TeamsApiRemoveTeamByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeTeamById(requestParameters: TeamsApiRemoveTeamByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeTeamById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify the roles of a team member. Only team members with the owner role have access to this endpoint. Learn more about [roles and permissions](https://appwrite.io/docs/permissions). 
         * @summary Update membership
         * @param {TeamsApiUpdateMembershipRolesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMembershipRoles(requestParameters: TeamsApiUpdateMembershipRolesRequest, options?: AxiosRequestConfig): AxiosPromise<Membership> {
            return localVarFp.updateMembershipRoles(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to allow a user to accept an invitation to join a team after being redirected back to your app from the invitation email received by the user.  If the request is successful, a session for the user is automatically created. 
         * @summary Update team membership status
         * @param {TeamsApiUpdateMembershipStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMembershipStatus(requestParameters: TeamsApiUpdateMembershipStatusRequest, options?: AxiosRequestConfig): AxiosPromise<Membership> {
            return localVarFp.updateMembershipStatus(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the team\'s name by its unique ID.
         * @summary Update name
         * @param {TeamsApiUpdateNameByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNameById(requestParameters: TeamsApiUpdateNameByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Team> {
            return localVarFp.updateNameById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the team\'s preferences by its unique ID. The object you pass is stored as is and replaces any previous value. The maximum allowed prefs size is 64kB and throws an error if exceeded.
         * @summary Update preferences
         * @param {TeamsApiUpdatePrefsByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePrefsById(requestParameters: TeamsApiUpdatePrefsByIdRequest, options?: AxiosRequestConfig): AxiosPromise<{ [key: string]: any; }> {
            return localVarFp.updatePrefsById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createMembershipRequest operation in TeamsApi.
 * @export
 * @interface TeamsApiCreateMembershipRequestRequest
 */
export type TeamsApiCreateMembershipRequestRequest = {
    
    /**
    * Team ID.
    * @type {string}
    * @memberof TeamsApiCreateMembershipRequest
    */
    readonly teamId: string
    
} & TeamsCreateMembershipRequestRequest

/**
 * Request parameters for createNewTeam operation in TeamsApi.
 * @export
 * @interface TeamsApiCreateNewTeamRequest
 */
export type TeamsApiCreateNewTeamRequest = {
    
} & TeamsCreateNewTeamRequest

/**
 * Request parameters for deleteMembership operation in TeamsApi.
 * @export
 * @interface TeamsApiDeleteMembershipRequest
 */
export type TeamsApiDeleteMembershipRequest = {
    
    /**
    * Team ID.
    * @type {string}
    * @memberof TeamsApiDeleteMembership
    */
    readonly teamId: string
    
    /**
    * Membership ID.
    * @type {string}
    * @memberof TeamsApiDeleteMembership
    */
    readonly membershipId: string
    
}

/**
 * Request parameters for getById operation in TeamsApi.
 * @export
 * @interface TeamsApiGetByIdRequest
 */
export type TeamsApiGetByIdRequest = {
    
    /**
    * Team ID.
    * @type {string}
    * @memberof TeamsApiGetById
    */
    readonly teamId: string
    
}

/**
 * Request parameters for getMembership operation in TeamsApi.
 * @export
 * @interface TeamsApiGetMembershipRequest
 */
export type TeamsApiGetMembershipRequest = {
    
    /**
    * Team ID.
    * @type {string}
    * @memberof TeamsApiGetMembership
    */
    readonly teamId: string
    
    /**
    * Membership ID.
    * @type {string}
    * @memberof TeamsApiGetMembership
    */
    readonly membershipId: string
    
}

/**
 * Request parameters for getPrefsById operation in TeamsApi.
 * @export
 * @interface TeamsApiGetPrefsByIdRequest
 */
export type TeamsApiGetPrefsByIdRequest = {
    
    /**
    * Team ID.
    * @type {string}
    * @memberof TeamsApiGetPrefsById
    */
    readonly teamId: string
    
}

/**
 * Request parameters for getUserTeams operation in TeamsApi.
 * @export
 * @interface TeamsApiGetUserTeamsRequest
 */
export type TeamsApiGetUserTeamsRequest = {
    
    /**
    * Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: name, total, billingPlan
    * @type {Array<string>}
    * @memberof TeamsApiGetUserTeams
    */
    readonly queries?: Array<string>
    
    /**
    * Search term to filter your list results. Max length: 256 chars.
    * @type {string}
    * @memberof TeamsApiGetUserTeams
    */
    readonly search?: string
    
}

/**
 * Request parameters for listMemberships operation in TeamsApi.
 * @export
 * @interface TeamsApiListMembershipsRequest
 */
export type TeamsApiListMembershipsRequest = {
    
    /**
    * Team ID.
    * @type {string}
    * @memberof TeamsApiListMemberships
    */
    readonly teamId: string
    
    /**
    * Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: userId, teamId, invited, joined, confirm
    * @type {Array<string>}
    * @memberof TeamsApiListMemberships
    */
    readonly queries?: Array<string>
    
    /**
    * Search term to filter your list results. Max length: 256 chars.
    * @type {string}
    * @memberof TeamsApiListMemberships
    */
    readonly search?: string
    
}

/**
 * Request parameters for removeTeamById operation in TeamsApi.
 * @export
 * @interface TeamsApiRemoveTeamByIdRequest
 */
export type TeamsApiRemoveTeamByIdRequest = {
    
    /**
    * Team ID.
    * @type {string}
    * @memberof TeamsApiRemoveTeamById
    */
    readonly teamId: string
    
}

/**
 * Request parameters for updateMembershipRoles operation in TeamsApi.
 * @export
 * @interface TeamsApiUpdateMembershipRolesRequest
 */
export type TeamsApiUpdateMembershipRolesRequest = {
    
    /**
    * Team ID.
    * @type {string}
    * @memberof TeamsApiUpdateMembershipRoles
    */
    readonly teamId: string
    
    /**
    * Membership ID.
    * @type {string}
    * @memberof TeamsApiUpdateMembershipRoles
    */
    readonly membershipId: string
    
} & TeamsUpdateMembershipRolesRequest

/**
 * Request parameters for updateMembershipStatus operation in TeamsApi.
 * @export
 * @interface TeamsApiUpdateMembershipStatusRequest
 */
export type TeamsApiUpdateMembershipStatusRequest = {
    
    /**
    * Team ID.
    * @type {string}
    * @memberof TeamsApiUpdateMembershipStatus
    */
    readonly teamId: string
    
    /**
    * Membership ID.
    * @type {string}
    * @memberof TeamsApiUpdateMembershipStatus
    */
    readonly membershipId: string
    
} & TeamsUpdateMembershipStatusRequest

/**
 * Request parameters for updateNameById operation in TeamsApi.
 * @export
 * @interface TeamsApiUpdateNameByIdRequest
 */
export type TeamsApiUpdateNameByIdRequest = {
    
    /**
    * Team ID.
    * @type {string}
    * @memberof TeamsApiUpdateNameById
    */
    readonly teamId: string
    
} & TeamsUpdateNameByIdRequest

/**
 * Request parameters for updatePrefsById operation in TeamsApi.
 * @export
 * @interface TeamsApiUpdatePrefsByIdRequest
 */
export type TeamsApiUpdatePrefsByIdRequest = {
    
    /**
    * Team ID.
    * @type {string}
    * @memberof TeamsApiUpdatePrefsById
    */
    readonly teamId: string
    
} & TeamsUpdatePrefsByIdRequest

/**
 * TeamsApiGenerated - object-oriented interface
 * @export
 * @class TeamsApiGenerated
 * @extends {BaseAPI}
 */
export class TeamsApiGenerated extends BaseAPI {
    /**
     * Invite a new member to join your team. Provide an ID for existing users, or invite unregistered users using an email or phone number. If initiated from a Client SDK, Appwrite will send an email or sms with a link to join the team to the invited user, and an account will be created for them if one doesn\'t exist. If initiated from a Server SDK, the new member will be added automatically to the team.  You only need to provide one of a user ID, email, or phone number. Appwrite will prioritize accepting the user ID > email > phone number if you provide more than one of these parameters.  Use the `url` parameter to redirect the user from the invitation email to your app. After the user is redirected, use the [Update Team Membership Status](https://appwrite.io/docs/references/cloud/client-web/teams#updateMembershipStatus) endpoint to allow the user to accept the invitation to the team.   Please note that to avoid a [Redirect Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md) Appwrite will accept the only redirect URLs under the domains you have added as a platform on the Appwrite Console. 
     * @summary Create team membership
     * @param {TeamsApiCreateMembershipRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiGenerated
     */
    public createMembershipRequest(requestParameters: TeamsApiCreateMembershipRequestRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).createMembershipRequest(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new team. The user who creates the team will automatically be assigned as the owner of the team. Only the users with the owner role can invite new members, add new owners and delete or update the team.
     * @summary Create team
     * @param {TeamsApiCreateNewTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiGenerated
     */
    public createNewTeam(requestParameters: TeamsApiCreateNewTeamRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).createNewTeam(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows a user to leave a team or for a team owner to delete the membership of any other team member. You can also use this endpoint to delete a user membership even if it is not accepted.
     * @summary Delete team membership
     * @param {TeamsApiDeleteMembershipRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiGenerated
     */
    public deleteMembership(requestParameters: TeamsApiDeleteMembershipRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).deleteMembership(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a team by its ID. All team members have read access for this resource.
     * @summary Get team
     * @param {TeamsApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiGenerated
     */
    public getById(requestParameters: TeamsApiGetByIdRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a team member by the membership unique id. All team members have read access for this resource.
     * @summary Get team membership
     * @param {TeamsApiGetMembershipRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiGenerated
     */
    public getMembership(requestParameters: TeamsApiGetMembershipRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getMembership(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the team\'s shared preferences by its unique ID. If a preference doesn\'t need to be shared by all team members, prefer storing them in [user preferences](https://appwrite.io/docs/references/cloud/client-web/account#getPrefs).
     * @summary Get team preferences
     * @param {TeamsApiGetPrefsByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiGenerated
     */
    public getPrefsById(requestParameters: TeamsApiGetPrefsByIdRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getPrefsById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of all the teams in which the current user is a member. You can use the parameters to filter your results.
     * @summary List teams
     * @param {TeamsApiGetUserTeamsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiGenerated
     */
    public getUserTeams(requestParameters: TeamsApiGetUserTeamsRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getUserTeams(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to list a team\'s members using the team\'s ID. All team members have read access to this endpoint.
     * @summary List team memberships
     * @param {TeamsApiListMembershipsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiGenerated
     */
    public listMemberships(requestParameters: TeamsApiListMembershipsRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).listMemberships(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a team using its ID. Only team members with the owner role can delete the team.
     * @summary Delete team
     * @param {TeamsApiRemoveTeamByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiGenerated
     */
    public removeTeamById(requestParameters: TeamsApiRemoveTeamByIdRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).removeTeamById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modify the roles of a team member. Only team members with the owner role have access to this endpoint. Learn more about [roles and permissions](https://appwrite.io/docs/permissions). 
     * @summary Update membership
     * @param {TeamsApiUpdateMembershipRolesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiGenerated
     */
    public updateMembershipRoles(requestParameters: TeamsApiUpdateMembershipRolesRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).updateMembershipRoles(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to allow a user to accept an invitation to join a team after being redirected back to your app from the invitation email received by the user.  If the request is successful, a session for the user is automatically created. 
     * @summary Update team membership status
     * @param {TeamsApiUpdateMembershipStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiGenerated
     */
    public updateMembershipStatus(requestParameters: TeamsApiUpdateMembershipStatusRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).updateMembershipStatus(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the team\'s name by its unique ID.
     * @summary Update name
     * @param {TeamsApiUpdateNameByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiGenerated
     */
    public updateNameById(requestParameters: TeamsApiUpdateNameByIdRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).updateNameById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the team\'s preferences by its unique ID. The object you pass is stored as is and replaces any previous value. The maximum allowed prefs size is 64kB and throws an error if exceeded.
     * @summary Update preferences
     * @param {TeamsApiUpdatePrefsByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiGenerated
     */
    public updatePrefsById(requestParameters: TeamsApiUpdatePrefsByIdRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).updatePrefsById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
