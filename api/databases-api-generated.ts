/* tslint:disable */
/* eslint-disable */
/*
Appwrite

Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)

The version of the OpenAPI document: 1.5.0
Contact: team@appwrite.io

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AttributeBoolean } from '../models';
// @ts-ignore
import { AttributeDatetime } from '../models';
// @ts-ignore
import { AttributeEmail } from '../models';
// @ts-ignore
import { AttributeEnum } from '../models';
// @ts-ignore
import { AttributeFloat } from '../models';
// @ts-ignore
import { AttributeInteger } from '../models';
// @ts-ignore
import { AttributeIp } from '../models';
// @ts-ignore
import { AttributeList } from '../models';
// @ts-ignore
import { AttributeRelationship } from '../models';
// @ts-ignore
import { AttributeString } from '../models';
// @ts-ignore
import { AttributeUrl } from '../models';
// @ts-ignore
import { Collection } from '../models';
// @ts-ignore
import { CollectionList } from '../models';
// @ts-ignore
import { Database } from '../models';
// @ts-ignore
import { DatabaseList } from '../models';
// @ts-ignore
import { DatabasesCreateBooleanAttributeRequest } from '../models';
// @ts-ignore
import { DatabasesCreateCollectionRequest } from '../models';
// @ts-ignore
import { DatabasesCreateDatabaseRequest } from '../models';
// @ts-ignore
import { DatabasesCreateDatetimeAttributeRequest } from '../models';
// @ts-ignore
import { DatabasesCreateDocumentRequest } from '../models';
// @ts-ignore
import { DatabasesCreateEmailAttributeRequest } from '../models';
// @ts-ignore
import { DatabasesCreateEnumAttributeRequest } from '../models';
// @ts-ignore
import { DatabasesCreateFloatAttributeRequest } from '../models';
// @ts-ignore
import { DatabasesCreateIndexRequest } from '../models';
// @ts-ignore
import { DatabasesCreateIntegerAttributeRequest } from '../models';
// @ts-ignore
import { DatabasesCreateIpAttributeRequest } from '../models';
// @ts-ignore
import { DatabasesCreateRelationshipAttributeRequest } from '../models';
// @ts-ignore
import { DatabasesCreateStringAttributeRequest } from '../models';
// @ts-ignore
import { DatabasesCreateUrlAttributeRequest } from '../models';
// @ts-ignore
import { DatabasesGetAttributeByIdResponse } from '../models';
// @ts-ignore
import { DatabasesUpdateBooleanAttributeRequest } from '../models';
// @ts-ignore
import { DatabasesUpdateByIdRequest } from '../models';
// @ts-ignore
import { DatabasesUpdateCollectionByIdRequest } from '../models';
// @ts-ignore
import { DatabasesUpdateDatetimeAttributeRequest } from '../models';
// @ts-ignore
import { DatabasesUpdateDocumentByIdRequest } from '../models';
// @ts-ignore
import { DatabasesUpdateEmailAttributeRequest } from '../models';
// @ts-ignore
import { DatabasesUpdateEnumAttributeRequest } from '../models';
// @ts-ignore
import { DatabasesUpdateFloatAttributeRequest } from '../models';
// @ts-ignore
import { DatabasesUpdateIntegerAttributeRequest } from '../models';
// @ts-ignore
import { DatabasesUpdateIpAttributeRequest } from '../models';
// @ts-ignore
import { DatabasesUpdateRelationshipAttributeRequest } from '../models';
// @ts-ignore
import { DatabasesUpdateStringAttributeRequest } from '../models';
// @ts-ignore
import { DatabasesUpdateUrlAttributeRequest } from '../models';
// @ts-ignore
import { Document } from '../models';
// @ts-ignore
import { DocumentList } from '../models';
// @ts-ignore
import { Index } from '../models';
// @ts-ignore
import { IndexList } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * DatabasesApi - axios parameter creator
 * @export
 */
export const DatabasesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a boolean attribute. 
         * @summary Create boolean attribute
         * @param {string} databaseId Database ID.
         * @param {string} collectionId Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
         * @param {DatabasesCreateBooleanAttributeRequest} [databasesCreateBooleanAttributeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBooleanAttribute: async (databaseId: string, collectionId: string, databasesCreateBooleanAttributeRequest?: DatabasesCreateBooleanAttributeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'databaseId' is not null or undefined
            assertParamExists('createBooleanAttribute', 'databaseId', databaseId)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('createBooleanAttribute', 'collectionId', collectionId)
            const localVarPath = `/databases/{databaseId}/collections/{collectionId}/attributes/boolean`
                .replace(`{${"databaseId"}}`, encodeURIComponent(String(databaseId !== undefined ? databaseId : `-databaseId-`)))
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId !== undefined ? collectionId : `-collectionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: databasesCreateBooleanAttributeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/databases/{databaseId}/collections/{collectionId}/attributes/boolean',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(databasesCreateBooleanAttributeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new Collection. Before using this route, you should create a new database resource using either a [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection) API or directly from your database console.
         * @summary Create collection
         * @param {string} databaseId Database ID.
         * @param {DatabasesCreateCollectionRequest} [databasesCreateCollectionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCollection: async (databaseId: string, databasesCreateCollectionRequest?: DatabasesCreateCollectionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'databaseId' is not null or undefined
            assertParamExists('createCollection', 'databaseId', databaseId)
            const localVarPath = `/databases/{databaseId}/collections`
                .replace(`{${"databaseId"}}`, encodeURIComponent(String(databaseId !== undefined ? databaseId : `-databaseId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: databasesCreateCollectionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/databases/{databaseId}/collections',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(databasesCreateCollectionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new Database. 
         * @summary Create database
         * @param {DatabasesCreateDatabaseRequest} [databasesCreateDatabaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDatabase: async (databasesCreateDatabaseRequest?: DatabasesCreateDatabaseRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/databases`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: databasesCreateDatabaseRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/databases',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(databasesCreateDatabaseRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a date time attribute according to the ISO 8601 standard.
         * @summary Create datetime attribute
         * @param {string} databaseId Database ID.
         * @param {string} collectionId Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
         * @param {DatabasesCreateDatetimeAttributeRequest} [databasesCreateDatetimeAttributeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDatetimeAttribute: async (databaseId: string, collectionId: string, databasesCreateDatetimeAttributeRequest?: DatabasesCreateDatetimeAttributeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'databaseId' is not null or undefined
            assertParamExists('createDatetimeAttribute', 'databaseId', databaseId)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('createDatetimeAttribute', 'collectionId', collectionId)
            const localVarPath = `/databases/{databaseId}/collections/{collectionId}/attributes/datetime`
                .replace(`{${"databaseId"}}`, encodeURIComponent(String(databaseId !== undefined ? databaseId : `-databaseId-`)))
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId !== undefined ? collectionId : `-collectionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: databasesCreateDatetimeAttributeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/databases/{databaseId}/collections/{collectionId}/attributes/datetime',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(databasesCreateDatetimeAttributeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new Document. Before using this route, you should create a new collection resource using either a [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection) API or directly from your database console.
         * @summary Create document
         * @param {string} databaseId Database ID.
         * @param {string} collectionId Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection). Make sure to define attributes before creating documents.
         * @param {DatabasesCreateDocumentRequest} [databasesCreateDocumentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDocument: async (databaseId: string, collectionId: string, databasesCreateDocumentRequest?: DatabasesCreateDocumentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'databaseId' is not null or undefined
            assertParamExists('createDocument', 'databaseId', databaseId)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('createDocument', 'collectionId', collectionId)
            const localVarPath = `/databases/{databaseId}/collections/{collectionId}/documents`
                .replace(`{${"databaseId"}}`, encodeURIComponent(String(databaseId !== undefined ? databaseId : `-databaseId-`)))
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId !== undefined ? collectionId : `-collectionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: databasesCreateDocumentRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/databases/{databaseId}/collections/{collectionId}/documents',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(databasesCreateDocumentRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create an email attribute. 
         * @summary Create email attribute
         * @param {string} databaseId Database ID.
         * @param {string} collectionId Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
         * @param {DatabasesCreateEmailAttributeRequest} [databasesCreateEmailAttributeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmailAttribute: async (databaseId: string, collectionId: string, databasesCreateEmailAttributeRequest?: DatabasesCreateEmailAttributeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'databaseId' is not null or undefined
            assertParamExists('createEmailAttribute', 'databaseId', databaseId)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('createEmailAttribute', 'collectionId', collectionId)
            const localVarPath = `/databases/{databaseId}/collections/{collectionId}/attributes/email`
                .replace(`{${"databaseId"}}`, encodeURIComponent(String(databaseId !== undefined ? databaseId : `-databaseId-`)))
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId !== undefined ? collectionId : `-collectionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: databasesCreateEmailAttributeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/databases/{databaseId}/collections/{collectionId}/attributes/email',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(databasesCreateEmailAttributeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create an enumeration attribute. The `elements` param acts as a white-list of accepted values for this attribute.  
         * @summary Create enum attribute
         * @param {string} databaseId Database ID.
         * @param {string} collectionId Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
         * @param {DatabasesCreateEnumAttributeRequest} [databasesCreateEnumAttributeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEnumAttribute: async (databaseId: string, collectionId: string, databasesCreateEnumAttributeRequest?: DatabasesCreateEnumAttributeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'databaseId' is not null or undefined
            assertParamExists('createEnumAttribute', 'databaseId', databaseId)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('createEnumAttribute', 'collectionId', collectionId)
            const localVarPath = `/databases/{databaseId}/collections/{collectionId}/attributes/enum`
                .replace(`{${"databaseId"}}`, encodeURIComponent(String(databaseId !== undefined ? databaseId : `-databaseId-`)))
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId !== undefined ? collectionId : `-collectionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: databasesCreateEnumAttributeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/databases/{databaseId}/collections/{collectionId}/attributes/enum',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(databasesCreateEnumAttributeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a float attribute. Optionally, minimum and maximum values can be provided. 
         * @summary Create float attribute
         * @param {string} databaseId Database ID.
         * @param {string} collectionId Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
         * @param {DatabasesCreateFloatAttributeRequest} [databasesCreateFloatAttributeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFloatAttribute: async (databaseId: string, collectionId: string, databasesCreateFloatAttributeRequest?: DatabasesCreateFloatAttributeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'databaseId' is not null or undefined
            assertParamExists('createFloatAttribute', 'databaseId', databaseId)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('createFloatAttribute', 'collectionId', collectionId)
            const localVarPath = `/databases/{databaseId}/collections/{collectionId}/attributes/float`
                .replace(`{${"databaseId"}}`, encodeURIComponent(String(databaseId !== undefined ? databaseId : `-databaseId-`)))
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId !== undefined ? collectionId : `-collectionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: databasesCreateFloatAttributeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/databases/{databaseId}/collections/{collectionId}/attributes/float',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(databasesCreateFloatAttributeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates an index on the attributes listed. Your index should include all the attributes you will query in a single request. Attributes can be `key`, `fulltext`, and `unique`.
         * @summary Create index
         * @param {string} databaseId Database ID.
         * @param {string} collectionId Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
         * @param {DatabasesCreateIndexRequest} [databasesCreateIndexRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIndex: async (databaseId: string, collectionId: string, databasesCreateIndexRequest?: DatabasesCreateIndexRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'databaseId' is not null or undefined
            assertParamExists('createIndex', 'databaseId', databaseId)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('createIndex', 'collectionId', collectionId)
            const localVarPath = `/databases/{databaseId}/collections/{collectionId}/indexes`
                .replace(`{${"databaseId"}}`, encodeURIComponent(String(databaseId !== undefined ? databaseId : `-databaseId-`)))
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId !== undefined ? collectionId : `-collectionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: databasesCreateIndexRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/databases/{databaseId}/collections/{collectionId}/indexes',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(databasesCreateIndexRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create an integer attribute. Optionally, minimum and maximum values can be provided. 
         * @summary Create integer attribute
         * @param {string} databaseId Database ID.
         * @param {string} collectionId Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
         * @param {DatabasesCreateIntegerAttributeRequest} [databasesCreateIntegerAttributeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIntegerAttribute: async (databaseId: string, collectionId: string, databasesCreateIntegerAttributeRequest?: DatabasesCreateIntegerAttributeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'databaseId' is not null or undefined
            assertParamExists('createIntegerAttribute', 'databaseId', databaseId)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('createIntegerAttribute', 'collectionId', collectionId)
            const localVarPath = `/databases/{databaseId}/collections/{collectionId}/attributes/integer`
                .replace(`{${"databaseId"}}`, encodeURIComponent(String(databaseId !== undefined ? databaseId : `-databaseId-`)))
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId !== undefined ? collectionId : `-collectionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: databasesCreateIntegerAttributeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/databases/{databaseId}/collections/{collectionId}/attributes/integer',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(databasesCreateIntegerAttributeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create IP address attribute. 
         * @summary Create IP address attribute
         * @param {string} databaseId Database ID.
         * @param {string} collectionId Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
         * @param {DatabasesCreateIpAttributeRequest} [databasesCreateIpAttributeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIpAttribute: async (databaseId: string, collectionId: string, databasesCreateIpAttributeRequest?: DatabasesCreateIpAttributeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'databaseId' is not null or undefined
            assertParamExists('createIpAttribute', 'databaseId', databaseId)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('createIpAttribute', 'collectionId', collectionId)
            const localVarPath = `/databases/{databaseId}/collections/{collectionId}/attributes/ip`
                .replace(`{${"databaseId"}}`, encodeURIComponent(String(databaseId !== undefined ? databaseId : `-databaseId-`)))
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId !== undefined ? collectionId : `-collectionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: databasesCreateIpAttributeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/databases/{databaseId}/collections/{collectionId}/attributes/ip',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(databasesCreateIpAttributeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create relationship attribute. [Learn more about relationship attributes](https://appwrite.io/docs/databases-relationships#relationship-attributes). 
         * @summary Create relationship attribute
         * @param {string} databaseId Database ID.
         * @param {string} collectionId Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
         * @param {DatabasesCreateRelationshipAttributeRequest} [databasesCreateRelationshipAttributeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRelationshipAttribute: async (databaseId: string, collectionId: string, databasesCreateRelationshipAttributeRequest?: DatabasesCreateRelationshipAttributeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'databaseId' is not null or undefined
            assertParamExists('createRelationshipAttribute', 'databaseId', databaseId)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('createRelationshipAttribute', 'collectionId', collectionId)
            const localVarPath = `/databases/{databaseId}/collections/{collectionId}/attributes/relationship`
                .replace(`{${"databaseId"}}`, encodeURIComponent(String(databaseId !== undefined ? databaseId : `-databaseId-`)))
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId !== undefined ? collectionId : `-collectionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: databasesCreateRelationshipAttributeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/databases/{databaseId}/collections/{collectionId}/attributes/relationship',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(databasesCreateRelationshipAttributeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a string attribute. 
         * @summary Create string attribute
         * @param {string} databaseId Database ID.
         * @param {string} collectionId Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
         * @param {DatabasesCreateStringAttributeRequest} [databasesCreateStringAttributeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStringAttribute: async (databaseId: string, collectionId: string, databasesCreateStringAttributeRequest?: DatabasesCreateStringAttributeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'databaseId' is not null or undefined
            assertParamExists('createStringAttribute', 'databaseId', databaseId)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('createStringAttribute', 'collectionId', collectionId)
            const localVarPath = `/databases/{databaseId}/collections/{collectionId}/attributes/string`
                .replace(`{${"databaseId"}}`, encodeURIComponent(String(databaseId !== undefined ? databaseId : `-databaseId-`)))
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId !== undefined ? collectionId : `-collectionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: databasesCreateStringAttributeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/databases/{databaseId}/collections/{collectionId}/attributes/string',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(databasesCreateStringAttributeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a URL attribute. 
         * @summary Create URL attribute
         * @param {string} databaseId Database ID.
         * @param {string} collectionId Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
         * @param {DatabasesCreateUrlAttributeRequest} [databasesCreateUrlAttributeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUrlAttribute: async (databaseId: string, collectionId: string, databasesCreateUrlAttributeRequest?: DatabasesCreateUrlAttributeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'databaseId' is not null or undefined
            assertParamExists('createUrlAttribute', 'databaseId', databaseId)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('createUrlAttribute', 'collectionId', collectionId)
            const localVarPath = `/databases/{databaseId}/collections/{collectionId}/attributes/url`
                .replace(`{${"databaseId"}}`, encodeURIComponent(String(databaseId !== undefined ? databaseId : `-databaseId-`)))
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId !== undefined ? collectionId : `-collectionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: databasesCreateUrlAttributeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/databases/{databaseId}/collections/{collectionId}/attributes/url',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(databasesCreateUrlAttributeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an attribute.
         * @summary Delete attribute
         * @param {string} databaseId Database ID.
         * @param {string} collectionId Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
         * @param {string} key Attribute Key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAttributeById: async (databaseId: string, collectionId: string, key: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'databaseId' is not null or undefined
            assertParamExists('deleteAttributeById', 'databaseId', databaseId)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('deleteAttributeById', 'collectionId', collectionId)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('deleteAttributeById', 'key', key)
            const localVarPath = `/databases/{databaseId}/collections/{collectionId}/attributes/{key}`
                .replace(`{${"databaseId"}}`, encodeURIComponent(String(databaseId !== undefined ? databaseId : `-databaseId-`)))
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId !== undefined ? collectionId : `-collectionId-`)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key !== undefined ? key : `-key-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/databases/{databaseId}/collections/{collectionId}/attributes/{key}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a database by its unique ID. Only API keys with with databases.write scope can delete a database.
         * @summary Delete database
         * @param {string} databaseId Database ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById: async (databaseId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'databaseId' is not null or undefined
            assertParamExists('deleteById', 'databaseId', databaseId)
            const localVarPath = `/databases/{databaseId}`
                .replace(`{${"databaseId"}}`, encodeURIComponent(String(databaseId !== undefined ? databaseId : `-databaseId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/databases/{databaseId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a collection by its unique ID. Only users with write permissions have access to delete this resource.
         * @summary Delete collection
         * @param {string} databaseId Database ID.
         * @param {string} collectionId Collection ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCollectionById: async (databaseId: string, collectionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'databaseId' is not null or undefined
            assertParamExists('deleteCollectionById', 'databaseId', databaseId)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('deleteCollectionById', 'collectionId', collectionId)
            const localVarPath = `/databases/{databaseId}/collections/{collectionId}`
                .replace(`{${"databaseId"}}`, encodeURIComponent(String(databaseId !== undefined ? databaseId : `-databaseId-`)))
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId !== undefined ? collectionId : `-collectionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/databases/{databaseId}/collections/{collectionId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a document by its unique ID.
         * @summary Delete document
         * @param {string} databaseId Database ID.
         * @param {string} collectionId Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
         * @param {string} documentId Document ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDocumentById: async (databaseId: string, collectionId: string, documentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'databaseId' is not null or undefined
            assertParamExists('deleteDocumentById', 'databaseId', databaseId)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('deleteDocumentById', 'collectionId', collectionId)
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('deleteDocumentById', 'documentId', documentId)
            const localVarPath = `/databases/{databaseId}/collections/{collectionId}/documents/{documentId}`
                .replace(`{${"databaseId"}}`, encodeURIComponent(String(databaseId !== undefined ? databaseId : `-databaseId-`)))
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId !== undefined ? collectionId : `-collectionId-`)))
                .replace(`{${"documentId"}}`, encodeURIComponent(String(documentId !== undefined ? documentId : `-documentId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/databases/{databaseId}/collections/{collectionId}/documents/{documentId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an index.
         * @summary Delete index
         * @param {string} databaseId Database ID.
         * @param {string} collectionId Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
         * @param {string} key Index Key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIndex: async (databaseId: string, collectionId: string, key: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'databaseId' is not null or undefined
            assertParamExists('deleteIndex', 'databaseId', databaseId)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('deleteIndex', 'collectionId', collectionId)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('deleteIndex', 'key', key)
            const localVarPath = `/databases/{databaseId}/collections/{collectionId}/indexes/{key}`
                .replace(`{${"databaseId"}}`, encodeURIComponent(String(databaseId !== undefined ? databaseId : `-databaseId-`)))
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId !== undefined ? collectionId : `-collectionId-`)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key !== undefined ? key : `-key-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/databases/{databaseId}/collections/{collectionId}/indexes/{key}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get attribute by ID.
         * @summary Get attribute
         * @param {string} databaseId Database ID.
         * @param {string} collectionId Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
         * @param {string} key Attribute Key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributeById: async (databaseId: string, collectionId: string, key: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'databaseId' is not null or undefined
            assertParamExists('getAttributeById', 'databaseId', databaseId)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('getAttributeById', 'collectionId', collectionId)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('getAttributeById', 'key', key)
            const localVarPath = `/databases/{databaseId}/collections/{collectionId}/attributes/{key}`
                .replace(`{${"databaseId"}}`, encodeURIComponent(String(databaseId !== undefined ? databaseId : `-databaseId-`)))
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId !== undefined ? collectionId : `-collectionId-`)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key !== undefined ? key : `-key-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/databases/{databaseId}/collections/{collectionId}/attributes/{key}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a database by its unique ID. This endpoint response returns a JSON object with the database metadata.
         * @summary Get database
         * @param {string} databaseId Database ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (databaseId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'databaseId' is not null or undefined
            assertParamExists('getById', 'databaseId', databaseId)
            const localVarPath = `/databases/{databaseId}`
                .replace(`{${"databaseId"}}`, encodeURIComponent(String(databaseId !== undefined ? databaseId : `-databaseId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/databases/{databaseId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a collection by its unique ID. This endpoint response returns a JSON object with the collection metadata.
         * @summary Get collection
         * @param {string} databaseId Database ID.
         * @param {string} collectionId Collection ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionById: async (databaseId: string, collectionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'databaseId' is not null or undefined
            assertParamExists('getCollectionById', 'databaseId', databaseId)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('getCollectionById', 'collectionId', collectionId)
            const localVarPath = `/databases/{databaseId}/collections/{collectionId}`
                .replace(`{${"databaseId"}}`, encodeURIComponent(String(databaseId !== undefined ? databaseId : `-databaseId-`)))
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId !== undefined ? collectionId : `-collectionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/databases/{databaseId}/collections/{collectionId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a document by its unique ID. This endpoint response returns a JSON object with the document data.
         * @summary Get document
         * @param {string} databaseId Database ID.
         * @param {string} collectionId Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
         * @param {string} documentId Document ID.
         * @param {Array<string>} [queries] Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentById: async (databaseId: string, collectionId: string, documentId: string, queries?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'databaseId' is not null or undefined
            assertParamExists('getDocumentById', 'databaseId', databaseId)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('getDocumentById', 'collectionId', collectionId)
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('getDocumentById', 'documentId', documentId)
            const localVarPath = `/databases/{databaseId}/collections/{collectionId}/documents/{documentId}`
                .replace(`{${"databaseId"}}`, encodeURIComponent(String(databaseId !== undefined ? databaseId : `-databaseId-`)))
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId !== undefined ? collectionId : `-collectionId-`)))
                .replace(`{${"documentId"}}`, encodeURIComponent(String(documentId !== undefined ? documentId : `-documentId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })
            if (queries) {
                localVarQueryParameter['queries'] = queries;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/databases/{databaseId}/collections/{collectionId}/documents/{documentId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get index by ID.
         * @summary Get index
         * @param {string} databaseId Database ID.
         * @param {string} collectionId Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
         * @param {string} key Index Key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIndexById: async (databaseId: string, collectionId: string, key: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'databaseId' is not null or undefined
            assertParamExists('getIndexById', 'databaseId', databaseId)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('getIndexById', 'collectionId', collectionId)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('getIndexById', 'key', key)
            const localVarPath = `/databases/{databaseId}/collections/{collectionId}/indexes/{key}`
                .replace(`{${"databaseId"}}`, encodeURIComponent(String(databaseId !== undefined ? databaseId : `-databaseId-`)))
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId !== undefined ? collectionId : `-collectionId-`)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key !== undefined ? key : `-key-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/databases/{databaseId}/collections/{collectionId}/indexes/{key}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of all databases from the current Appwrite project. You can use the search parameter to filter your results.
         * @summary List databases
         * @param {Array<string>} [queries] Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: name
         * @param {string} [search] Search term to filter your list results. Max length: 256 chars.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll: async (queries?: Array<string>, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/databases`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            if (queries) {
                localVarQueryParameter['queries'] = queries;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/databases',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List attributes in the collection.
         * @summary List attributes
         * @param {string} databaseId Database ID.
         * @param {string} collectionId Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
         * @param {Array<string>} [queries] Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: key, type, size, required, array, status, error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCollectionAttributes: async (databaseId: string, collectionId: string, queries?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'databaseId' is not null or undefined
            assertParamExists('listCollectionAttributes', 'databaseId', databaseId)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('listCollectionAttributes', 'collectionId', collectionId)
            const localVarPath = `/databases/{databaseId}/collections/{collectionId}/attributes`
                .replace(`{${"databaseId"}}`, encodeURIComponent(String(databaseId !== undefined ? databaseId : `-databaseId-`)))
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId !== undefined ? collectionId : `-collectionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            if (queries) {
                localVarQueryParameter['queries'] = queries;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/databases/{databaseId}/collections/{collectionId}/attributes',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of all the user\'s documents in a given collection. You can use the query params to filter your results.
         * @summary List documents
         * @param {string} databaseId Database ID.
         * @param {string} collectionId Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
         * @param {Array<string>} [queries] Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCollectionDocuments: async (databaseId: string, collectionId: string, queries?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'databaseId' is not null or undefined
            assertParamExists('listCollectionDocuments', 'databaseId', databaseId)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('listCollectionDocuments', 'collectionId', collectionId)
            const localVarPath = `/databases/{databaseId}/collections/{collectionId}/documents`
                .replace(`{${"databaseId"}}`, encodeURIComponent(String(databaseId !== undefined ? databaseId : `-databaseId-`)))
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId !== undefined ? collectionId : `-collectionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })
            if (queries) {
                localVarQueryParameter['queries'] = queries;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/databases/{databaseId}/collections/{collectionId}/documents',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of all collections that belong to the provided databaseId. You can use the search parameter to filter your results.
         * @summary List collections
         * @param {string} databaseId Database ID.
         * @param {Array<string>} [queries] Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: name, enabled, documentSecurity
         * @param {string} [search] Search term to filter your list results. Max length: 256 chars.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCollections: async (databaseId: string, queries?: Array<string>, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'databaseId' is not null or undefined
            assertParamExists('listCollections', 'databaseId', databaseId)
            const localVarPath = `/databases/{databaseId}/collections`
                .replace(`{${"databaseId"}}`, encodeURIComponent(String(databaseId !== undefined ? databaseId : `-databaseId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            if (queries) {
                localVarQueryParameter['queries'] = queries;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/databases/{databaseId}/collections',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List indexes in the collection.
         * @summary List indexes
         * @param {string} databaseId Database ID.
         * @param {string} collectionId Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
         * @param {Array<string>} [queries] Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: key, type, status, attributes, error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listIndexes: async (databaseId: string, collectionId: string, queries?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'databaseId' is not null or undefined
            assertParamExists('listIndexes', 'databaseId', databaseId)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('listIndexes', 'collectionId', collectionId)
            const localVarPath = `/databases/{databaseId}/collections/{collectionId}/indexes`
                .replace(`{${"databaseId"}}`, encodeURIComponent(String(databaseId !== undefined ? databaseId : `-databaseId-`)))
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId !== undefined ? collectionId : `-collectionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            if (queries) {
                localVarQueryParameter['queries'] = queries;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/databases/{databaseId}/collections/{collectionId}/indexes',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a boolean attribute. Changing the `default` value will not update already existing documents.
         * @summary Update boolean attribute
         * @param {string} databaseId Database ID.
         * @param {string} collectionId Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
         * @param {string} key Attribute Key.
         * @param {DatabasesUpdateBooleanAttributeRequest} [databasesUpdateBooleanAttributeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBooleanAttribute: async (databaseId: string, collectionId: string, key: string, databasesUpdateBooleanAttributeRequest?: DatabasesUpdateBooleanAttributeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'databaseId' is not null or undefined
            assertParamExists('updateBooleanAttribute', 'databaseId', databaseId)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('updateBooleanAttribute', 'collectionId', collectionId)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('updateBooleanAttribute', 'key', key)
            const localVarPath = `/databases/{databaseId}/collections/{collectionId}/attributes/boolean/{key}`
                .replace(`{${"databaseId"}}`, encodeURIComponent(String(databaseId !== undefined ? databaseId : `-databaseId-`)))
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId !== undefined ? collectionId : `-collectionId-`)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key !== undefined ? key : `-key-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: databasesUpdateBooleanAttributeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/databases/{databaseId}/collections/{collectionId}/attributes/boolean/{key}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(databasesUpdateBooleanAttributeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a database by its unique ID.
         * @summary Update database
         * @param {string} databaseId Database ID.
         * @param {DatabasesUpdateByIdRequest} [databasesUpdateByIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateById: async (databaseId: string, databasesUpdateByIdRequest?: DatabasesUpdateByIdRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'databaseId' is not null or undefined
            assertParamExists('updateById', 'databaseId', databaseId)
            const localVarPath = `/databases/{databaseId}`
                .replace(`{${"databaseId"}}`, encodeURIComponent(String(databaseId !== undefined ? databaseId : `-databaseId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: databasesUpdateByIdRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/databases/{databaseId}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(databasesUpdateByIdRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a collection by its unique ID.
         * @summary Update collection
         * @param {string} databaseId Database ID.
         * @param {string} collectionId Collection ID.
         * @param {DatabasesUpdateCollectionByIdRequest} [databasesUpdateCollectionByIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCollectionById: async (databaseId: string, collectionId: string, databasesUpdateCollectionByIdRequest?: DatabasesUpdateCollectionByIdRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'databaseId' is not null or undefined
            assertParamExists('updateCollectionById', 'databaseId', databaseId)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('updateCollectionById', 'collectionId', collectionId)
            const localVarPath = `/databases/{databaseId}/collections/{collectionId}`
                .replace(`{${"databaseId"}}`, encodeURIComponent(String(databaseId !== undefined ? databaseId : `-databaseId-`)))
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId !== undefined ? collectionId : `-collectionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: databasesUpdateCollectionByIdRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/databases/{databaseId}/collections/{collectionId}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(databasesUpdateCollectionByIdRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a date time attribute. Changing the `default` value will not update already existing documents.
         * @summary Update dateTime attribute
         * @param {string} databaseId Database ID.
         * @param {string} collectionId Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
         * @param {string} key Attribute Key.
         * @param {DatabasesUpdateDatetimeAttributeRequest} [databasesUpdateDatetimeAttributeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDatetimeAttribute: async (databaseId: string, collectionId: string, key: string, databasesUpdateDatetimeAttributeRequest?: DatabasesUpdateDatetimeAttributeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'databaseId' is not null or undefined
            assertParamExists('updateDatetimeAttribute', 'databaseId', databaseId)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('updateDatetimeAttribute', 'collectionId', collectionId)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('updateDatetimeAttribute', 'key', key)
            const localVarPath = `/databases/{databaseId}/collections/{collectionId}/attributes/datetime/{key}`
                .replace(`{${"databaseId"}}`, encodeURIComponent(String(databaseId !== undefined ? databaseId : `-databaseId-`)))
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId !== undefined ? collectionId : `-collectionId-`)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key !== undefined ? key : `-key-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: databasesUpdateDatetimeAttributeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/databases/{databaseId}/collections/{collectionId}/attributes/datetime/{key}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(databasesUpdateDatetimeAttributeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a document by its unique ID. Using the patch method you can pass only specific fields that will get updated.
         * @summary Update document
         * @param {string} databaseId Database ID.
         * @param {string} collectionId Collection ID.
         * @param {string} documentId Document ID.
         * @param {DatabasesUpdateDocumentByIdRequest} [databasesUpdateDocumentByIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDocumentById: async (databaseId: string, collectionId: string, documentId: string, databasesUpdateDocumentByIdRequest?: DatabasesUpdateDocumentByIdRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'databaseId' is not null or undefined
            assertParamExists('updateDocumentById', 'databaseId', databaseId)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('updateDocumentById', 'collectionId', collectionId)
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('updateDocumentById', 'documentId', documentId)
            const localVarPath = `/databases/{databaseId}/collections/{collectionId}/documents/{documentId}`
                .replace(`{${"databaseId"}}`, encodeURIComponent(String(databaseId !== undefined ? databaseId : `-databaseId-`)))
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId !== undefined ? collectionId : `-collectionId-`)))
                .replace(`{${"documentId"}}`, encodeURIComponent(String(documentId !== undefined ? documentId : `-documentId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: databasesUpdateDocumentByIdRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/databases/{databaseId}/collections/{collectionId}/documents/{documentId}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(databasesUpdateDocumentByIdRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an email attribute. Changing the `default` value will not update already existing documents. 
         * @summary Update email attribute
         * @param {string} databaseId Database ID.
         * @param {string} collectionId Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
         * @param {string} key Attribute Key.
         * @param {DatabasesUpdateEmailAttributeRequest} [databasesUpdateEmailAttributeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailAttribute: async (databaseId: string, collectionId: string, key: string, databasesUpdateEmailAttributeRequest?: DatabasesUpdateEmailAttributeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'databaseId' is not null or undefined
            assertParamExists('updateEmailAttribute', 'databaseId', databaseId)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('updateEmailAttribute', 'collectionId', collectionId)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('updateEmailAttribute', 'key', key)
            const localVarPath = `/databases/{databaseId}/collections/{collectionId}/attributes/email/{key}`
                .replace(`{${"databaseId"}}`, encodeURIComponent(String(databaseId !== undefined ? databaseId : `-databaseId-`)))
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId !== undefined ? collectionId : `-collectionId-`)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key !== undefined ? key : `-key-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: databasesUpdateEmailAttributeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/databases/{databaseId}/collections/{collectionId}/attributes/email/{key}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(databasesUpdateEmailAttributeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an enum attribute. Changing the `default` value will not update already existing documents. 
         * @summary Update enum attribute
         * @param {string} databaseId Database ID.
         * @param {string} collectionId Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
         * @param {string} key Attribute Key.
         * @param {DatabasesUpdateEnumAttributeRequest} [databasesUpdateEnumAttributeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEnumAttribute: async (databaseId: string, collectionId: string, key: string, databasesUpdateEnumAttributeRequest?: DatabasesUpdateEnumAttributeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'databaseId' is not null or undefined
            assertParamExists('updateEnumAttribute', 'databaseId', databaseId)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('updateEnumAttribute', 'collectionId', collectionId)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('updateEnumAttribute', 'key', key)
            const localVarPath = `/databases/{databaseId}/collections/{collectionId}/attributes/enum/{key}`
                .replace(`{${"databaseId"}}`, encodeURIComponent(String(databaseId !== undefined ? databaseId : `-databaseId-`)))
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId !== undefined ? collectionId : `-collectionId-`)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key !== undefined ? key : `-key-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: databasesUpdateEnumAttributeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/databases/{databaseId}/collections/{collectionId}/attributes/enum/{key}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(databasesUpdateEnumAttributeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a float attribute. Changing the `default` value will not update already existing documents. 
         * @summary Update float attribute
         * @param {string} databaseId Database ID.
         * @param {string} collectionId Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
         * @param {string} key Attribute Key.
         * @param {DatabasesUpdateFloatAttributeRequest} [databasesUpdateFloatAttributeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFloatAttribute: async (databaseId: string, collectionId: string, key: string, databasesUpdateFloatAttributeRequest?: DatabasesUpdateFloatAttributeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'databaseId' is not null or undefined
            assertParamExists('updateFloatAttribute', 'databaseId', databaseId)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('updateFloatAttribute', 'collectionId', collectionId)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('updateFloatAttribute', 'key', key)
            const localVarPath = `/databases/{databaseId}/collections/{collectionId}/attributes/float/{key}`
                .replace(`{${"databaseId"}}`, encodeURIComponent(String(databaseId !== undefined ? databaseId : `-databaseId-`)))
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId !== undefined ? collectionId : `-collectionId-`)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key !== undefined ? key : `-key-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: databasesUpdateFloatAttributeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/databases/{databaseId}/collections/{collectionId}/attributes/float/{key}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(databasesUpdateFloatAttributeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an integer attribute. Changing the `default` value will not update already existing documents. 
         * @summary Update integer attribute
         * @param {string} databaseId Database ID.
         * @param {string} collectionId Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
         * @param {string} key Attribute Key.
         * @param {DatabasesUpdateIntegerAttributeRequest} [databasesUpdateIntegerAttributeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIntegerAttribute: async (databaseId: string, collectionId: string, key: string, databasesUpdateIntegerAttributeRequest?: DatabasesUpdateIntegerAttributeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'databaseId' is not null or undefined
            assertParamExists('updateIntegerAttribute', 'databaseId', databaseId)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('updateIntegerAttribute', 'collectionId', collectionId)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('updateIntegerAttribute', 'key', key)
            const localVarPath = `/databases/{databaseId}/collections/{collectionId}/attributes/integer/{key}`
                .replace(`{${"databaseId"}}`, encodeURIComponent(String(databaseId !== undefined ? databaseId : `-databaseId-`)))
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId !== undefined ? collectionId : `-collectionId-`)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key !== undefined ? key : `-key-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: databasesUpdateIntegerAttributeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/databases/{databaseId}/collections/{collectionId}/attributes/integer/{key}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(databasesUpdateIntegerAttributeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an ip attribute. Changing the `default` value will not update already existing documents. 
         * @summary Update IP address attribute
         * @param {string} databaseId Database ID.
         * @param {string} collectionId Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
         * @param {string} key Attribute Key.
         * @param {DatabasesUpdateIpAttributeRequest} [databasesUpdateIpAttributeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIpAttribute: async (databaseId: string, collectionId: string, key: string, databasesUpdateIpAttributeRequest?: DatabasesUpdateIpAttributeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'databaseId' is not null or undefined
            assertParamExists('updateIpAttribute', 'databaseId', databaseId)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('updateIpAttribute', 'collectionId', collectionId)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('updateIpAttribute', 'key', key)
            const localVarPath = `/databases/{databaseId}/collections/{collectionId}/attributes/ip/{key}`
                .replace(`{${"databaseId"}}`, encodeURIComponent(String(databaseId !== undefined ? databaseId : `-databaseId-`)))
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId !== undefined ? collectionId : `-collectionId-`)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key !== undefined ? key : `-key-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: databasesUpdateIpAttributeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/databases/{databaseId}/collections/{collectionId}/attributes/ip/{key}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(databasesUpdateIpAttributeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update relationship attribute. [Learn more about relationship attributes](https://appwrite.io/docs/databases-relationships#relationship-attributes). 
         * @summary Update relationship attribute
         * @param {string} databaseId Database ID.
         * @param {string} collectionId Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
         * @param {string} key Attribute Key.
         * @param {DatabasesUpdateRelationshipAttributeRequest} [databasesUpdateRelationshipAttributeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRelationshipAttribute: async (databaseId: string, collectionId: string, key: string, databasesUpdateRelationshipAttributeRequest?: DatabasesUpdateRelationshipAttributeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'databaseId' is not null or undefined
            assertParamExists('updateRelationshipAttribute', 'databaseId', databaseId)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('updateRelationshipAttribute', 'collectionId', collectionId)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('updateRelationshipAttribute', 'key', key)
            const localVarPath = `/databases/{databaseId}/collections/{collectionId}/attributes/{key}/relationship`
                .replace(`{${"databaseId"}}`, encodeURIComponent(String(databaseId !== undefined ? databaseId : `-databaseId-`)))
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId !== undefined ? collectionId : `-collectionId-`)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key !== undefined ? key : `-key-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: databasesUpdateRelationshipAttributeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/databases/{databaseId}/collections/{collectionId}/attributes/{key}/relationship',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(databasesUpdateRelationshipAttributeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a string attribute. Changing the `default` value will not update already existing documents. 
         * @summary Update string attribute
         * @param {string} databaseId Database ID.
         * @param {string} collectionId Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
         * @param {string} key Attribute Key.
         * @param {DatabasesUpdateStringAttributeRequest} [databasesUpdateStringAttributeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStringAttribute: async (databaseId: string, collectionId: string, key: string, databasesUpdateStringAttributeRequest?: DatabasesUpdateStringAttributeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'databaseId' is not null or undefined
            assertParamExists('updateStringAttribute', 'databaseId', databaseId)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('updateStringAttribute', 'collectionId', collectionId)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('updateStringAttribute', 'key', key)
            const localVarPath = `/databases/{databaseId}/collections/{collectionId}/attributes/string/{key}`
                .replace(`{${"databaseId"}}`, encodeURIComponent(String(databaseId !== undefined ? databaseId : `-databaseId-`)))
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId !== undefined ? collectionId : `-collectionId-`)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key !== undefined ? key : `-key-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: databasesUpdateStringAttributeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/databases/{databaseId}/collections/{collectionId}/attributes/string/{key}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(databasesUpdateStringAttributeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an url attribute. Changing the `default` value will not update already existing documents. 
         * @summary Update URL attribute
         * @param {string} databaseId Database ID.
         * @param {string} collectionId Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
         * @param {string} key Attribute Key.
         * @param {DatabasesUpdateUrlAttributeRequest} [databasesUpdateUrlAttributeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUrlAttribute: async (databaseId: string, collectionId: string, key: string, databasesUpdateUrlAttributeRequest?: DatabasesUpdateUrlAttributeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'databaseId' is not null or undefined
            assertParamExists('updateUrlAttribute', 'databaseId', databaseId)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('updateUrlAttribute', 'collectionId', collectionId)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('updateUrlAttribute', 'key', key)
            const localVarPath = `/databases/{databaseId}/collections/{collectionId}/attributes/url/{key}`
                .replace(`{${"databaseId"}}`, encodeURIComponent(String(databaseId !== undefined ? databaseId : `-databaseId-`)))
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId !== undefined ? collectionId : `-collectionId-`)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key !== undefined ? key : `-key-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: databasesUpdateUrlAttributeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/databases/{databaseId}/collections/{collectionId}/attributes/url/{key}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(databasesUpdateUrlAttributeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DatabasesApi - functional programming interface
 * @export
 */
export const DatabasesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DatabasesApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a boolean attribute. 
         * @summary Create boolean attribute
         * @param {DatabasesApiCreateBooleanAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBooleanAttribute(requestParameters: DatabasesApiCreateBooleanAttributeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeBoolean>> {
            const databasesCreateBooleanAttributeRequest: DatabasesCreateBooleanAttributeRequest = {
                key: requestParameters.key,
                required: requestParameters.required,
                default: requestParameters.default,
                array: requestParameters.array
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBooleanAttribute(requestParameters.databaseId, requestParameters.collectionId, databasesCreateBooleanAttributeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new Collection. Before using this route, you should create a new database resource using either a [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection) API or directly from your database console.
         * @summary Create collection
         * @param {DatabasesApiCreateCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCollection(requestParameters: DatabasesApiCreateCollectionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Collection>> {
            const databasesCreateCollectionRequest: DatabasesCreateCollectionRequest = {
                collectionId: requestParameters.collectionId,
                name: requestParameters.name,
                permissions: requestParameters.permissions,
                documentSecurity: requestParameters.documentSecurity,
                enabled: requestParameters.enabled
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCollection(requestParameters.databaseId, databasesCreateCollectionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new Database. 
         * @summary Create database
         * @param {DatabasesApiCreateDatabaseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDatabase(requestParameters: DatabasesApiCreateDatabaseRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Database>> {
            const databasesCreateDatabaseRequest: DatabasesCreateDatabaseRequest = {
                databaseId: requestParameters.databaseId,
                name: requestParameters.name,
                enabled: requestParameters.enabled
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDatabase(databasesCreateDatabaseRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a date time attribute according to the ISO 8601 standard.
         * @summary Create datetime attribute
         * @param {DatabasesApiCreateDatetimeAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDatetimeAttribute(requestParameters: DatabasesApiCreateDatetimeAttributeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeDatetime>> {
            const databasesCreateDatetimeAttributeRequest: DatabasesCreateDatetimeAttributeRequest = {
                key: requestParameters.key,
                required: requestParameters.required,
                default: requestParameters.default,
                array: requestParameters.array
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDatetimeAttribute(requestParameters.databaseId, requestParameters.collectionId, databasesCreateDatetimeAttributeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new Document. Before using this route, you should create a new collection resource using either a [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection) API or directly from your database console.
         * @summary Create document
         * @param {DatabasesApiCreateDocumentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDocument(requestParameters: DatabasesApiCreateDocumentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Document>> {
            const databasesCreateDocumentRequest: DatabasesCreateDocumentRequest = {
                documentId: requestParameters.documentId,
                data: requestParameters.data,
                permissions: requestParameters.permissions
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDocument(requestParameters.databaseId, requestParameters.collectionId, databasesCreateDocumentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create an email attribute. 
         * @summary Create email attribute
         * @param {DatabasesApiCreateEmailAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEmailAttribute(requestParameters: DatabasesApiCreateEmailAttributeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeEmail>> {
            const databasesCreateEmailAttributeRequest: DatabasesCreateEmailAttributeRequest = {
                key: requestParameters.key,
                required: requestParameters.required,
                default: requestParameters.default,
                array: requestParameters.array
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEmailAttribute(requestParameters.databaseId, requestParameters.collectionId, databasesCreateEmailAttributeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create an enumeration attribute. The `elements` param acts as a white-list of accepted values for this attribute.  
         * @summary Create enum attribute
         * @param {DatabasesApiCreateEnumAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEnumAttribute(requestParameters: DatabasesApiCreateEnumAttributeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeEnum>> {
            const databasesCreateEnumAttributeRequest: DatabasesCreateEnumAttributeRequest = {
                key: requestParameters.key,
                elements: requestParameters.elements,
                required: requestParameters.required,
                default: requestParameters.default,
                array: requestParameters.array
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEnumAttribute(requestParameters.databaseId, requestParameters.collectionId, databasesCreateEnumAttributeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a float attribute. Optionally, minimum and maximum values can be provided. 
         * @summary Create float attribute
         * @param {DatabasesApiCreateFloatAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFloatAttribute(requestParameters: DatabasesApiCreateFloatAttributeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeFloat>> {
            const databasesCreateFloatAttributeRequest: DatabasesCreateFloatAttributeRequest = {
                key: requestParameters.key,
                required: requestParameters.required,
                min: requestParameters.min,
                max: requestParameters.max,
                default: requestParameters.default,
                array: requestParameters.array
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createFloatAttribute(requestParameters.databaseId, requestParameters.collectionId, databasesCreateFloatAttributeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates an index on the attributes listed. Your index should include all the attributes you will query in a single request. Attributes can be `key`, `fulltext`, and `unique`.
         * @summary Create index
         * @param {DatabasesApiCreateIndexRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createIndex(requestParameters: DatabasesApiCreateIndexRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Index>> {
            const databasesCreateIndexRequest: DatabasesCreateIndexRequest = {
                key: requestParameters.key,
                type: requestParameters.type,
                attributes: requestParameters.attributes,
                orders: requestParameters.orders
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createIndex(requestParameters.databaseId, requestParameters.collectionId, databasesCreateIndexRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create an integer attribute. Optionally, minimum and maximum values can be provided. 
         * @summary Create integer attribute
         * @param {DatabasesApiCreateIntegerAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createIntegerAttribute(requestParameters: DatabasesApiCreateIntegerAttributeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeInteger>> {
            const databasesCreateIntegerAttributeRequest: DatabasesCreateIntegerAttributeRequest = {
                key: requestParameters.key,
                required: requestParameters.required,
                min: requestParameters.min,
                max: requestParameters.max,
                default: requestParameters.default,
                array: requestParameters.array
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createIntegerAttribute(requestParameters.databaseId, requestParameters.collectionId, databasesCreateIntegerAttributeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create IP address attribute. 
         * @summary Create IP address attribute
         * @param {DatabasesApiCreateIpAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createIpAttribute(requestParameters: DatabasesApiCreateIpAttributeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeIp>> {
            const databasesCreateIpAttributeRequest: DatabasesCreateIpAttributeRequest = {
                key: requestParameters.key,
                required: requestParameters.required,
                default: requestParameters.default,
                array: requestParameters.array
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createIpAttribute(requestParameters.databaseId, requestParameters.collectionId, databasesCreateIpAttributeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create relationship attribute. [Learn more about relationship attributes](https://appwrite.io/docs/databases-relationships#relationship-attributes). 
         * @summary Create relationship attribute
         * @param {DatabasesApiCreateRelationshipAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRelationshipAttribute(requestParameters: DatabasesApiCreateRelationshipAttributeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeRelationship>> {
            const databasesCreateRelationshipAttributeRequest: DatabasesCreateRelationshipAttributeRequest = {
                relatedCollectionId: requestParameters.relatedCollectionId,
                type: requestParameters.type,
                twoWay: requestParameters.twoWay,
                key: requestParameters.key,
                twoWayKey: requestParameters.twoWayKey,
                onDelete: requestParameters.onDelete
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRelationshipAttribute(requestParameters.databaseId, requestParameters.collectionId, databasesCreateRelationshipAttributeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a string attribute. 
         * @summary Create string attribute
         * @param {DatabasesApiCreateStringAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createStringAttribute(requestParameters: DatabasesApiCreateStringAttributeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeString>> {
            const databasesCreateStringAttributeRequest: DatabasesCreateStringAttributeRequest = {
                key: requestParameters.key,
                size: requestParameters.size,
                required: requestParameters.required,
                default: requestParameters.default,
                array: requestParameters.array,
                encrypt: requestParameters.encrypt
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createStringAttribute(requestParameters.databaseId, requestParameters.collectionId, databasesCreateStringAttributeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a URL attribute. 
         * @summary Create URL attribute
         * @param {DatabasesApiCreateUrlAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUrlAttribute(requestParameters: DatabasesApiCreateUrlAttributeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeUrl>> {
            const databasesCreateUrlAttributeRequest: DatabasesCreateUrlAttributeRequest = {
                key: requestParameters.key,
                required: requestParameters.required,
                default: requestParameters.default,
                array: requestParameters.array
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUrlAttribute(requestParameters.databaseId, requestParameters.collectionId, databasesCreateUrlAttributeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes an attribute.
         * @summary Delete attribute
         * @param {DatabasesApiDeleteAttributeByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAttributeById(requestParameters: DatabasesApiDeleteAttributeByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAttributeById(requestParameters.databaseId, requestParameters.collectionId, requestParameters.key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a database by its unique ID. Only API keys with with databases.write scope can delete a database.
         * @summary Delete database
         * @param {DatabasesApiDeleteByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteById(requestParameters: DatabasesApiDeleteByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteById(requestParameters.databaseId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a collection by its unique ID. Only users with write permissions have access to delete this resource.
         * @summary Delete collection
         * @param {DatabasesApiDeleteCollectionByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCollectionById(requestParameters: DatabasesApiDeleteCollectionByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCollectionById(requestParameters.databaseId, requestParameters.collectionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a document by its unique ID.
         * @summary Delete document
         * @param {DatabasesApiDeleteDocumentByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDocumentById(requestParameters: DatabasesApiDeleteDocumentByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDocumentById(requestParameters.databaseId, requestParameters.collectionId, requestParameters.documentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete an index.
         * @summary Delete index
         * @param {DatabasesApiDeleteIndexRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteIndex(requestParameters: DatabasesApiDeleteIndexRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteIndex(requestParameters.databaseId, requestParameters.collectionId, requestParameters.key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get attribute by ID.
         * @summary Get attribute
         * @param {DatabasesApiGetAttributeByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAttributeById(requestParameters: DatabasesApiGetAttributeByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatabasesGetAttributeByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAttributeById(requestParameters.databaseId, requestParameters.collectionId, requestParameters.key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a database by its unique ID. This endpoint response returns a JSON object with the database metadata.
         * @summary Get database
         * @param {DatabasesApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: DatabasesApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Database>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.databaseId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a collection by its unique ID. This endpoint response returns a JSON object with the collection metadata.
         * @summary Get collection
         * @param {DatabasesApiGetCollectionByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCollectionById(requestParameters: DatabasesApiGetCollectionByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Collection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCollectionById(requestParameters.databaseId, requestParameters.collectionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a document by its unique ID. This endpoint response returns a JSON object with the document data.
         * @summary Get document
         * @param {DatabasesApiGetDocumentByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDocumentById(requestParameters: DatabasesApiGetDocumentByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Document>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDocumentById(requestParameters.databaseId, requestParameters.collectionId, requestParameters.documentId, requestParameters.queries, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get index by ID.
         * @summary Get index
         * @param {DatabasesApiGetIndexByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIndexById(requestParameters: DatabasesApiGetIndexByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Index>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIndexById(requestParameters.databaseId, requestParameters.collectionId, requestParameters.key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of all databases from the current Appwrite project. You can use the search parameter to filter your results.
         * @summary List databases
         * @param {DatabasesApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAll(requestParameters: DatabasesApiListAllRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatabaseList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAll(requestParameters.queries, requestParameters.search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List attributes in the collection.
         * @summary List attributes
         * @param {DatabasesApiListCollectionAttributesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCollectionAttributes(requestParameters: DatabasesApiListCollectionAttributesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCollectionAttributes(requestParameters.databaseId, requestParameters.collectionId, requestParameters.queries, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of all the user\'s documents in a given collection. You can use the query params to filter your results.
         * @summary List documents
         * @param {DatabasesApiListCollectionDocumentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCollectionDocuments(requestParameters: DatabasesApiListCollectionDocumentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCollectionDocuments(requestParameters.databaseId, requestParameters.collectionId, requestParameters.queries, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of all collections that belong to the provided databaseId. You can use the search parameter to filter your results.
         * @summary List collections
         * @param {DatabasesApiListCollectionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCollections(requestParameters: DatabasesApiListCollectionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCollections(requestParameters.databaseId, requestParameters.queries, requestParameters.search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List indexes in the collection.
         * @summary List indexes
         * @param {DatabasesApiListIndexesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listIndexes(requestParameters: DatabasesApiListIndexesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IndexList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listIndexes(requestParameters.databaseId, requestParameters.collectionId, requestParameters.queries, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a boolean attribute. Changing the `default` value will not update already existing documents.
         * @summary Update boolean attribute
         * @param {DatabasesApiUpdateBooleanAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBooleanAttribute(requestParameters: DatabasesApiUpdateBooleanAttributeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeBoolean>> {
            const databasesUpdateBooleanAttributeRequest: DatabasesUpdateBooleanAttributeRequest = {
                required: requestParameters.required,
                default: requestParameters.default
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBooleanAttribute(requestParameters.databaseId, requestParameters.collectionId, requestParameters.key, databasesUpdateBooleanAttributeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a database by its unique ID.
         * @summary Update database
         * @param {DatabasesApiUpdateByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateById(requestParameters: DatabasesApiUpdateByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Database>> {
            const databasesUpdateByIdRequest: DatabasesUpdateByIdRequest = {
                name: requestParameters.name,
                enabled: requestParameters.enabled
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateById(requestParameters.databaseId, databasesUpdateByIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a collection by its unique ID.
         * @summary Update collection
         * @param {DatabasesApiUpdateCollectionByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCollectionById(requestParameters: DatabasesApiUpdateCollectionByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Collection>> {
            const databasesUpdateCollectionByIdRequest: DatabasesUpdateCollectionByIdRequest = {
                name: requestParameters.name,
                permissions: requestParameters.permissions,
                documentSecurity: requestParameters.documentSecurity,
                enabled: requestParameters.enabled
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCollectionById(requestParameters.databaseId, requestParameters.collectionId, databasesUpdateCollectionByIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a date time attribute. Changing the `default` value will not update already existing documents.
         * @summary Update dateTime attribute
         * @param {DatabasesApiUpdateDatetimeAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDatetimeAttribute(requestParameters: DatabasesApiUpdateDatetimeAttributeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeDatetime>> {
            const databasesUpdateDatetimeAttributeRequest: DatabasesUpdateDatetimeAttributeRequest = {
                required: requestParameters.required,
                default: requestParameters.default
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDatetimeAttribute(requestParameters.databaseId, requestParameters.collectionId, requestParameters.key, databasesUpdateDatetimeAttributeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a document by its unique ID. Using the patch method you can pass only specific fields that will get updated.
         * @summary Update document
         * @param {DatabasesApiUpdateDocumentByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDocumentById(requestParameters: DatabasesApiUpdateDocumentByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Document>> {
            const databasesUpdateDocumentByIdRequest: DatabasesUpdateDocumentByIdRequest = {
                data: requestParameters.data,
                permissions: requestParameters.permissions
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDocumentById(requestParameters.databaseId, requestParameters.collectionId, requestParameters.documentId, databasesUpdateDocumentByIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an email attribute. Changing the `default` value will not update already existing documents. 
         * @summary Update email attribute
         * @param {DatabasesApiUpdateEmailAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEmailAttribute(requestParameters: DatabasesApiUpdateEmailAttributeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeEmail>> {
            const databasesUpdateEmailAttributeRequest: DatabasesUpdateEmailAttributeRequest = {
                required: requestParameters.required,
                default: requestParameters.default
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEmailAttribute(requestParameters.databaseId, requestParameters.collectionId, requestParameters.key, databasesUpdateEmailAttributeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an enum attribute. Changing the `default` value will not update already existing documents. 
         * @summary Update enum attribute
         * @param {DatabasesApiUpdateEnumAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEnumAttribute(requestParameters: DatabasesApiUpdateEnumAttributeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeEnum>> {
            const databasesUpdateEnumAttributeRequest: DatabasesUpdateEnumAttributeRequest = {
                elements: requestParameters.elements,
                required: requestParameters.required,
                default: requestParameters.default
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEnumAttribute(requestParameters.databaseId, requestParameters.collectionId, requestParameters.key, databasesUpdateEnumAttributeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a float attribute. Changing the `default` value will not update already existing documents. 
         * @summary Update float attribute
         * @param {DatabasesApiUpdateFloatAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateFloatAttribute(requestParameters: DatabasesApiUpdateFloatAttributeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeFloat>> {
            const databasesUpdateFloatAttributeRequest: DatabasesUpdateFloatAttributeRequest = {
                required: requestParameters.required,
                min: requestParameters.min,
                max: requestParameters.max,
                default: requestParameters.default
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateFloatAttribute(requestParameters.databaseId, requestParameters.collectionId, requestParameters.key, databasesUpdateFloatAttributeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an integer attribute. Changing the `default` value will not update already existing documents. 
         * @summary Update integer attribute
         * @param {DatabasesApiUpdateIntegerAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateIntegerAttribute(requestParameters: DatabasesApiUpdateIntegerAttributeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeInteger>> {
            const databasesUpdateIntegerAttributeRequest: DatabasesUpdateIntegerAttributeRequest = {
                required: requestParameters.required,
                min: requestParameters.min,
                max: requestParameters.max,
                default: requestParameters.default
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateIntegerAttribute(requestParameters.databaseId, requestParameters.collectionId, requestParameters.key, databasesUpdateIntegerAttributeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an ip attribute. Changing the `default` value will not update already existing documents. 
         * @summary Update IP address attribute
         * @param {DatabasesApiUpdateIpAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateIpAttribute(requestParameters: DatabasesApiUpdateIpAttributeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeIp>> {
            const databasesUpdateIpAttributeRequest: DatabasesUpdateIpAttributeRequest = {
                required: requestParameters.required,
                default: requestParameters.default
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateIpAttribute(requestParameters.databaseId, requestParameters.collectionId, requestParameters.key, databasesUpdateIpAttributeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update relationship attribute. [Learn more about relationship attributes](https://appwrite.io/docs/databases-relationships#relationship-attributes). 
         * @summary Update relationship attribute
         * @param {DatabasesApiUpdateRelationshipAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRelationshipAttribute(requestParameters: DatabasesApiUpdateRelationshipAttributeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeRelationship>> {
            const databasesUpdateRelationshipAttributeRequest: DatabasesUpdateRelationshipAttributeRequest = {
                onDelete: requestParameters.onDelete
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRelationshipAttribute(requestParameters.databaseId, requestParameters.collectionId, requestParameters.key, databasesUpdateRelationshipAttributeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a string attribute. Changing the `default` value will not update already existing documents. 
         * @summary Update string attribute
         * @param {DatabasesApiUpdateStringAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateStringAttribute(requestParameters: DatabasesApiUpdateStringAttributeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeString>> {
            const databasesUpdateStringAttributeRequest: DatabasesUpdateStringAttributeRequest = {
                required: requestParameters.required,
                default: requestParameters.default
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateStringAttribute(requestParameters.databaseId, requestParameters.collectionId, requestParameters.key, databasesUpdateStringAttributeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an url attribute. Changing the `default` value will not update already existing documents. 
         * @summary Update URL attribute
         * @param {DatabasesApiUpdateUrlAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUrlAttribute(requestParameters: DatabasesApiUpdateUrlAttributeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeUrl>> {
            const databasesUpdateUrlAttributeRequest: DatabasesUpdateUrlAttributeRequest = {
                required: requestParameters.required,
                default: requestParameters.default
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUrlAttribute(requestParameters.databaseId, requestParameters.collectionId, requestParameters.key, databasesUpdateUrlAttributeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DatabasesApi - factory interface
 * @export
 */
export const DatabasesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DatabasesApiFp(configuration)
    return {
        /**
         * Create a boolean attribute. 
         * @summary Create boolean attribute
         * @param {DatabasesApiCreateBooleanAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBooleanAttribute(requestParameters: DatabasesApiCreateBooleanAttributeRequest, options?: AxiosRequestConfig): AxiosPromise<AttributeBoolean> {
            return localVarFp.createBooleanAttribute(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new Collection. Before using this route, you should create a new database resource using either a [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection) API or directly from your database console.
         * @summary Create collection
         * @param {DatabasesApiCreateCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCollection(requestParameters: DatabasesApiCreateCollectionRequest, options?: AxiosRequestConfig): AxiosPromise<Collection> {
            return localVarFp.createCollection(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new Database. 
         * @summary Create database
         * @param {DatabasesApiCreateDatabaseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDatabase(requestParameters: DatabasesApiCreateDatabaseRequest, options?: AxiosRequestConfig): AxiosPromise<Database> {
            return localVarFp.createDatabase(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a date time attribute according to the ISO 8601 standard.
         * @summary Create datetime attribute
         * @param {DatabasesApiCreateDatetimeAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDatetimeAttribute(requestParameters: DatabasesApiCreateDatetimeAttributeRequest, options?: AxiosRequestConfig): AxiosPromise<AttributeDatetime> {
            return localVarFp.createDatetimeAttribute(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new Document. Before using this route, you should create a new collection resource using either a [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection) API or directly from your database console.
         * @summary Create document
         * @param {DatabasesApiCreateDocumentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDocument(requestParameters: DatabasesApiCreateDocumentRequest, options?: AxiosRequestConfig): AxiosPromise<Document> {
            return localVarFp.createDocument(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an email attribute. 
         * @summary Create email attribute
         * @param {DatabasesApiCreateEmailAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmailAttribute(requestParameters: DatabasesApiCreateEmailAttributeRequest, options?: AxiosRequestConfig): AxiosPromise<AttributeEmail> {
            return localVarFp.createEmailAttribute(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an enumeration attribute. The `elements` param acts as a white-list of accepted values for this attribute.  
         * @summary Create enum attribute
         * @param {DatabasesApiCreateEnumAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEnumAttribute(requestParameters: DatabasesApiCreateEnumAttributeRequest, options?: AxiosRequestConfig): AxiosPromise<AttributeEnum> {
            return localVarFp.createEnumAttribute(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a float attribute. Optionally, minimum and maximum values can be provided. 
         * @summary Create float attribute
         * @param {DatabasesApiCreateFloatAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFloatAttribute(requestParameters: DatabasesApiCreateFloatAttributeRequest, options?: AxiosRequestConfig): AxiosPromise<AttributeFloat> {
            return localVarFp.createFloatAttribute(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates an index on the attributes listed. Your index should include all the attributes you will query in a single request. Attributes can be `key`, `fulltext`, and `unique`.
         * @summary Create index
         * @param {DatabasesApiCreateIndexRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIndex(requestParameters: DatabasesApiCreateIndexRequest, options?: AxiosRequestConfig): AxiosPromise<Index> {
            return localVarFp.createIndex(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an integer attribute. Optionally, minimum and maximum values can be provided. 
         * @summary Create integer attribute
         * @param {DatabasesApiCreateIntegerAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIntegerAttribute(requestParameters: DatabasesApiCreateIntegerAttributeRequest, options?: AxiosRequestConfig): AxiosPromise<AttributeInteger> {
            return localVarFp.createIntegerAttribute(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create IP address attribute. 
         * @summary Create IP address attribute
         * @param {DatabasesApiCreateIpAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIpAttribute(requestParameters: DatabasesApiCreateIpAttributeRequest, options?: AxiosRequestConfig): AxiosPromise<AttributeIp> {
            return localVarFp.createIpAttribute(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create relationship attribute. [Learn more about relationship attributes](https://appwrite.io/docs/databases-relationships#relationship-attributes). 
         * @summary Create relationship attribute
         * @param {DatabasesApiCreateRelationshipAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRelationshipAttribute(requestParameters: DatabasesApiCreateRelationshipAttributeRequest, options?: AxiosRequestConfig): AxiosPromise<AttributeRelationship> {
            return localVarFp.createRelationshipAttribute(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a string attribute. 
         * @summary Create string attribute
         * @param {DatabasesApiCreateStringAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStringAttribute(requestParameters: DatabasesApiCreateStringAttributeRequest, options?: AxiosRequestConfig): AxiosPromise<AttributeString> {
            return localVarFp.createStringAttribute(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a URL attribute. 
         * @summary Create URL attribute
         * @param {DatabasesApiCreateUrlAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUrlAttribute(requestParameters: DatabasesApiCreateUrlAttributeRequest, options?: AxiosRequestConfig): AxiosPromise<AttributeUrl> {
            return localVarFp.createUrlAttribute(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an attribute.
         * @summary Delete attribute
         * @param {DatabasesApiDeleteAttributeByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAttributeById(requestParameters: DatabasesApiDeleteAttributeByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteAttributeById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a database by its unique ID. Only API keys with with databases.write scope can delete a database.
         * @summary Delete database
         * @param {DatabasesApiDeleteByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById(requestParameters: DatabasesApiDeleteByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a collection by its unique ID. Only users with write permissions have access to delete this resource.
         * @summary Delete collection
         * @param {DatabasesApiDeleteCollectionByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCollectionById(requestParameters: DatabasesApiDeleteCollectionByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteCollectionById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a document by its unique ID.
         * @summary Delete document
         * @param {DatabasesApiDeleteDocumentByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDocumentById(requestParameters: DatabasesApiDeleteDocumentByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteDocumentById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an index.
         * @summary Delete index
         * @param {DatabasesApiDeleteIndexRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIndex(requestParameters: DatabasesApiDeleteIndexRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteIndex(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get attribute by ID.
         * @summary Get attribute
         * @param {DatabasesApiGetAttributeByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributeById(requestParameters: DatabasesApiGetAttributeByIdRequest, options?: AxiosRequestConfig): AxiosPromise<DatabasesGetAttributeByIdResponse> {
            return localVarFp.getAttributeById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a database by its unique ID. This endpoint response returns a JSON object with the database metadata.
         * @summary Get database
         * @param {DatabasesApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: DatabasesApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Database> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a collection by its unique ID. This endpoint response returns a JSON object with the collection metadata.
         * @summary Get collection
         * @param {DatabasesApiGetCollectionByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionById(requestParameters: DatabasesApiGetCollectionByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Collection> {
            return localVarFp.getCollectionById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a document by its unique ID. This endpoint response returns a JSON object with the document data.
         * @summary Get document
         * @param {DatabasesApiGetDocumentByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentById(requestParameters: DatabasesApiGetDocumentByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Document> {
            return localVarFp.getDocumentById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get index by ID.
         * @summary Get index
         * @param {DatabasesApiGetIndexByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIndexById(requestParameters: DatabasesApiGetIndexByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Index> {
            return localVarFp.getIndexById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of all databases from the current Appwrite project. You can use the search parameter to filter your results.
         * @summary List databases
         * @param {DatabasesApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll(requestParameters: DatabasesApiListAllRequest, options?: AxiosRequestConfig): AxiosPromise<DatabaseList> {
            return localVarFp.listAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List attributes in the collection.
         * @summary List attributes
         * @param {DatabasesApiListCollectionAttributesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCollectionAttributes(requestParameters: DatabasesApiListCollectionAttributesRequest, options?: AxiosRequestConfig): AxiosPromise<AttributeList> {
            return localVarFp.listCollectionAttributes(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of all the user\'s documents in a given collection. You can use the query params to filter your results.
         * @summary List documents
         * @param {DatabasesApiListCollectionDocumentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCollectionDocuments(requestParameters: DatabasesApiListCollectionDocumentsRequest, options?: AxiosRequestConfig): AxiosPromise<DocumentList> {
            return localVarFp.listCollectionDocuments(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of all collections that belong to the provided databaseId. You can use the search parameter to filter your results.
         * @summary List collections
         * @param {DatabasesApiListCollectionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCollections(requestParameters: DatabasesApiListCollectionsRequest, options?: AxiosRequestConfig): AxiosPromise<CollectionList> {
            return localVarFp.listCollections(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List indexes in the collection.
         * @summary List indexes
         * @param {DatabasesApiListIndexesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listIndexes(requestParameters: DatabasesApiListIndexesRequest, options?: AxiosRequestConfig): AxiosPromise<IndexList> {
            return localVarFp.listIndexes(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a boolean attribute. Changing the `default` value will not update already existing documents.
         * @summary Update boolean attribute
         * @param {DatabasesApiUpdateBooleanAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBooleanAttribute(requestParameters: DatabasesApiUpdateBooleanAttributeRequest, options?: AxiosRequestConfig): AxiosPromise<AttributeBoolean> {
            return localVarFp.updateBooleanAttribute(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a database by its unique ID.
         * @summary Update database
         * @param {DatabasesApiUpdateByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateById(requestParameters: DatabasesApiUpdateByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Database> {
            return localVarFp.updateById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a collection by its unique ID.
         * @summary Update collection
         * @param {DatabasesApiUpdateCollectionByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCollectionById(requestParameters: DatabasesApiUpdateCollectionByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Collection> {
            return localVarFp.updateCollectionById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a date time attribute. Changing the `default` value will not update already existing documents.
         * @summary Update dateTime attribute
         * @param {DatabasesApiUpdateDatetimeAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDatetimeAttribute(requestParameters: DatabasesApiUpdateDatetimeAttributeRequest, options?: AxiosRequestConfig): AxiosPromise<AttributeDatetime> {
            return localVarFp.updateDatetimeAttribute(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a document by its unique ID. Using the patch method you can pass only specific fields that will get updated.
         * @summary Update document
         * @param {DatabasesApiUpdateDocumentByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDocumentById(requestParameters: DatabasesApiUpdateDocumentByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Document> {
            return localVarFp.updateDocumentById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an email attribute. Changing the `default` value will not update already existing documents. 
         * @summary Update email attribute
         * @param {DatabasesApiUpdateEmailAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailAttribute(requestParameters: DatabasesApiUpdateEmailAttributeRequest, options?: AxiosRequestConfig): AxiosPromise<AttributeEmail> {
            return localVarFp.updateEmailAttribute(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an enum attribute. Changing the `default` value will not update already existing documents. 
         * @summary Update enum attribute
         * @param {DatabasesApiUpdateEnumAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEnumAttribute(requestParameters: DatabasesApiUpdateEnumAttributeRequest, options?: AxiosRequestConfig): AxiosPromise<AttributeEnum> {
            return localVarFp.updateEnumAttribute(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a float attribute. Changing the `default` value will not update already existing documents. 
         * @summary Update float attribute
         * @param {DatabasesApiUpdateFloatAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFloatAttribute(requestParameters: DatabasesApiUpdateFloatAttributeRequest, options?: AxiosRequestConfig): AxiosPromise<AttributeFloat> {
            return localVarFp.updateFloatAttribute(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an integer attribute. Changing the `default` value will not update already existing documents. 
         * @summary Update integer attribute
         * @param {DatabasesApiUpdateIntegerAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIntegerAttribute(requestParameters: DatabasesApiUpdateIntegerAttributeRequest, options?: AxiosRequestConfig): AxiosPromise<AttributeInteger> {
            return localVarFp.updateIntegerAttribute(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an ip attribute. Changing the `default` value will not update already existing documents. 
         * @summary Update IP address attribute
         * @param {DatabasesApiUpdateIpAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIpAttribute(requestParameters: DatabasesApiUpdateIpAttributeRequest, options?: AxiosRequestConfig): AxiosPromise<AttributeIp> {
            return localVarFp.updateIpAttribute(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update relationship attribute. [Learn more about relationship attributes](https://appwrite.io/docs/databases-relationships#relationship-attributes). 
         * @summary Update relationship attribute
         * @param {DatabasesApiUpdateRelationshipAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRelationshipAttribute(requestParameters: DatabasesApiUpdateRelationshipAttributeRequest, options?: AxiosRequestConfig): AxiosPromise<AttributeRelationship> {
            return localVarFp.updateRelationshipAttribute(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a string attribute. Changing the `default` value will not update already existing documents. 
         * @summary Update string attribute
         * @param {DatabasesApiUpdateStringAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStringAttribute(requestParameters: DatabasesApiUpdateStringAttributeRequest, options?: AxiosRequestConfig): AxiosPromise<AttributeString> {
            return localVarFp.updateStringAttribute(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an url attribute. Changing the `default` value will not update already existing documents. 
         * @summary Update URL attribute
         * @param {DatabasesApiUpdateUrlAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUrlAttribute(requestParameters: DatabasesApiUpdateUrlAttributeRequest, options?: AxiosRequestConfig): AxiosPromise<AttributeUrl> {
            return localVarFp.updateUrlAttribute(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createBooleanAttribute operation in DatabasesApi.
 * @export
 * @interface DatabasesApiCreateBooleanAttributeRequest
 */
export type DatabasesApiCreateBooleanAttributeRequest = {
    
    /**
    * Database ID.
    * @type {string}
    * @memberof DatabasesApiCreateBooleanAttribute
    */
    readonly databaseId: string
    
    /**
    * Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
    * @type {string}
    * @memberof DatabasesApiCreateBooleanAttribute
    */
    readonly collectionId: string
    
} & DatabasesCreateBooleanAttributeRequest

/**
 * Request parameters for createCollection operation in DatabasesApi.
 * @export
 * @interface DatabasesApiCreateCollectionRequest
 */
export type DatabasesApiCreateCollectionRequest = {
    
    /**
    * Database ID.
    * @type {string}
    * @memberof DatabasesApiCreateCollection
    */
    readonly databaseId: string
    
} & DatabasesCreateCollectionRequest

/**
 * Request parameters for createDatabase operation in DatabasesApi.
 * @export
 * @interface DatabasesApiCreateDatabaseRequest
 */
export type DatabasesApiCreateDatabaseRequest = {
    
} & DatabasesCreateDatabaseRequest

/**
 * Request parameters for createDatetimeAttribute operation in DatabasesApi.
 * @export
 * @interface DatabasesApiCreateDatetimeAttributeRequest
 */
export type DatabasesApiCreateDatetimeAttributeRequest = {
    
    /**
    * Database ID.
    * @type {string}
    * @memberof DatabasesApiCreateDatetimeAttribute
    */
    readonly databaseId: string
    
    /**
    * Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
    * @type {string}
    * @memberof DatabasesApiCreateDatetimeAttribute
    */
    readonly collectionId: string
    
} & DatabasesCreateDatetimeAttributeRequest

/**
 * Request parameters for createDocument operation in DatabasesApi.
 * @export
 * @interface DatabasesApiCreateDocumentRequest
 */
export type DatabasesApiCreateDocumentRequest = {
    
    /**
    * Database ID.
    * @type {string}
    * @memberof DatabasesApiCreateDocument
    */
    readonly databaseId: string
    
    /**
    * Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection). Make sure to define attributes before creating documents.
    * @type {string}
    * @memberof DatabasesApiCreateDocument
    */
    readonly collectionId: string
    
} & DatabasesCreateDocumentRequest

/**
 * Request parameters for createEmailAttribute operation in DatabasesApi.
 * @export
 * @interface DatabasesApiCreateEmailAttributeRequest
 */
export type DatabasesApiCreateEmailAttributeRequest = {
    
    /**
    * Database ID.
    * @type {string}
    * @memberof DatabasesApiCreateEmailAttribute
    */
    readonly databaseId: string
    
    /**
    * Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
    * @type {string}
    * @memberof DatabasesApiCreateEmailAttribute
    */
    readonly collectionId: string
    
} & DatabasesCreateEmailAttributeRequest

/**
 * Request parameters for createEnumAttribute operation in DatabasesApi.
 * @export
 * @interface DatabasesApiCreateEnumAttributeRequest
 */
export type DatabasesApiCreateEnumAttributeRequest = {
    
    /**
    * Database ID.
    * @type {string}
    * @memberof DatabasesApiCreateEnumAttribute
    */
    readonly databaseId: string
    
    /**
    * Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
    * @type {string}
    * @memberof DatabasesApiCreateEnumAttribute
    */
    readonly collectionId: string
    
} & DatabasesCreateEnumAttributeRequest

/**
 * Request parameters for createFloatAttribute operation in DatabasesApi.
 * @export
 * @interface DatabasesApiCreateFloatAttributeRequest
 */
export type DatabasesApiCreateFloatAttributeRequest = {
    
    /**
    * Database ID.
    * @type {string}
    * @memberof DatabasesApiCreateFloatAttribute
    */
    readonly databaseId: string
    
    /**
    * Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
    * @type {string}
    * @memberof DatabasesApiCreateFloatAttribute
    */
    readonly collectionId: string
    
} & DatabasesCreateFloatAttributeRequest

/**
 * Request parameters for createIndex operation in DatabasesApi.
 * @export
 * @interface DatabasesApiCreateIndexRequest
 */
export type DatabasesApiCreateIndexRequest = {
    
    /**
    * Database ID.
    * @type {string}
    * @memberof DatabasesApiCreateIndex
    */
    readonly databaseId: string
    
    /**
    * Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
    * @type {string}
    * @memberof DatabasesApiCreateIndex
    */
    readonly collectionId: string
    
} & DatabasesCreateIndexRequest

/**
 * Request parameters for createIntegerAttribute operation in DatabasesApi.
 * @export
 * @interface DatabasesApiCreateIntegerAttributeRequest
 */
export type DatabasesApiCreateIntegerAttributeRequest = {
    
    /**
    * Database ID.
    * @type {string}
    * @memberof DatabasesApiCreateIntegerAttribute
    */
    readonly databaseId: string
    
    /**
    * Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
    * @type {string}
    * @memberof DatabasesApiCreateIntegerAttribute
    */
    readonly collectionId: string
    
} & DatabasesCreateIntegerAttributeRequest

/**
 * Request parameters for createIpAttribute operation in DatabasesApi.
 * @export
 * @interface DatabasesApiCreateIpAttributeRequest
 */
export type DatabasesApiCreateIpAttributeRequest = {
    
    /**
    * Database ID.
    * @type {string}
    * @memberof DatabasesApiCreateIpAttribute
    */
    readonly databaseId: string
    
    /**
    * Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
    * @type {string}
    * @memberof DatabasesApiCreateIpAttribute
    */
    readonly collectionId: string
    
} & DatabasesCreateIpAttributeRequest

/**
 * Request parameters for createRelationshipAttribute operation in DatabasesApi.
 * @export
 * @interface DatabasesApiCreateRelationshipAttributeRequest
 */
export type DatabasesApiCreateRelationshipAttributeRequest = {
    
    /**
    * Database ID.
    * @type {string}
    * @memberof DatabasesApiCreateRelationshipAttribute
    */
    readonly databaseId: string
    
    /**
    * Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
    * @type {string}
    * @memberof DatabasesApiCreateRelationshipAttribute
    */
    readonly collectionId: string
    
} & DatabasesCreateRelationshipAttributeRequest

/**
 * Request parameters for createStringAttribute operation in DatabasesApi.
 * @export
 * @interface DatabasesApiCreateStringAttributeRequest
 */
export type DatabasesApiCreateStringAttributeRequest = {
    
    /**
    * Database ID.
    * @type {string}
    * @memberof DatabasesApiCreateStringAttribute
    */
    readonly databaseId: string
    
    /**
    * Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
    * @type {string}
    * @memberof DatabasesApiCreateStringAttribute
    */
    readonly collectionId: string
    
} & DatabasesCreateStringAttributeRequest

/**
 * Request parameters for createUrlAttribute operation in DatabasesApi.
 * @export
 * @interface DatabasesApiCreateUrlAttributeRequest
 */
export type DatabasesApiCreateUrlAttributeRequest = {
    
    /**
    * Database ID.
    * @type {string}
    * @memberof DatabasesApiCreateUrlAttribute
    */
    readonly databaseId: string
    
    /**
    * Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
    * @type {string}
    * @memberof DatabasesApiCreateUrlAttribute
    */
    readonly collectionId: string
    
} & DatabasesCreateUrlAttributeRequest

/**
 * Request parameters for deleteAttributeById operation in DatabasesApi.
 * @export
 * @interface DatabasesApiDeleteAttributeByIdRequest
 */
export type DatabasesApiDeleteAttributeByIdRequest = {
    
    /**
    * Database ID.
    * @type {string}
    * @memberof DatabasesApiDeleteAttributeById
    */
    readonly databaseId: string
    
    /**
    * Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
    * @type {string}
    * @memberof DatabasesApiDeleteAttributeById
    */
    readonly collectionId: string
    
    /**
    * Attribute Key.
    * @type {string}
    * @memberof DatabasesApiDeleteAttributeById
    */
    readonly key: string
    
}

/**
 * Request parameters for deleteById operation in DatabasesApi.
 * @export
 * @interface DatabasesApiDeleteByIdRequest
 */
export type DatabasesApiDeleteByIdRequest = {
    
    /**
    * Database ID.
    * @type {string}
    * @memberof DatabasesApiDeleteById
    */
    readonly databaseId: string
    
}

/**
 * Request parameters for deleteCollectionById operation in DatabasesApi.
 * @export
 * @interface DatabasesApiDeleteCollectionByIdRequest
 */
export type DatabasesApiDeleteCollectionByIdRequest = {
    
    /**
    * Database ID.
    * @type {string}
    * @memberof DatabasesApiDeleteCollectionById
    */
    readonly databaseId: string
    
    /**
    * Collection ID.
    * @type {string}
    * @memberof DatabasesApiDeleteCollectionById
    */
    readonly collectionId: string
    
}

/**
 * Request parameters for deleteDocumentById operation in DatabasesApi.
 * @export
 * @interface DatabasesApiDeleteDocumentByIdRequest
 */
export type DatabasesApiDeleteDocumentByIdRequest = {
    
    /**
    * Database ID.
    * @type {string}
    * @memberof DatabasesApiDeleteDocumentById
    */
    readonly databaseId: string
    
    /**
    * Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
    * @type {string}
    * @memberof DatabasesApiDeleteDocumentById
    */
    readonly collectionId: string
    
    /**
    * Document ID.
    * @type {string}
    * @memberof DatabasesApiDeleteDocumentById
    */
    readonly documentId: string
    
}

/**
 * Request parameters for deleteIndex operation in DatabasesApi.
 * @export
 * @interface DatabasesApiDeleteIndexRequest
 */
export type DatabasesApiDeleteIndexRequest = {
    
    /**
    * Database ID.
    * @type {string}
    * @memberof DatabasesApiDeleteIndex
    */
    readonly databaseId: string
    
    /**
    * Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
    * @type {string}
    * @memberof DatabasesApiDeleteIndex
    */
    readonly collectionId: string
    
    /**
    * Index Key.
    * @type {string}
    * @memberof DatabasesApiDeleteIndex
    */
    readonly key: string
    
}

/**
 * Request parameters for getAttributeById operation in DatabasesApi.
 * @export
 * @interface DatabasesApiGetAttributeByIdRequest
 */
export type DatabasesApiGetAttributeByIdRequest = {
    
    /**
    * Database ID.
    * @type {string}
    * @memberof DatabasesApiGetAttributeById
    */
    readonly databaseId: string
    
    /**
    * Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
    * @type {string}
    * @memberof DatabasesApiGetAttributeById
    */
    readonly collectionId: string
    
    /**
    * Attribute Key.
    * @type {string}
    * @memberof DatabasesApiGetAttributeById
    */
    readonly key: string
    
}

/**
 * Request parameters for getById operation in DatabasesApi.
 * @export
 * @interface DatabasesApiGetByIdRequest
 */
export type DatabasesApiGetByIdRequest = {
    
    /**
    * Database ID.
    * @type {string}
    * @memberof DatabasesApiGetById
    */
    readonly databaseId: string
    
}

/**
 * Request parameters for getCollectionById operation in DatabasesApi.
 * @export
 * @interface DatabasesApiGetCollectionByIdRequest
 */
export type DatabasesApiGetCollectionByIdRequest = {
    
    /**
    * Database ID.
    * @type {string}
    * @memberof DatabasesApiGetCollectionById
    */
    readonly databaseId: string
    
    /**
    * Collection ID.
    * @type {string}
    * @memberof DatabasesApiGetCollectionById
    */
    readonly collectionId: string
    
}

/**
 * Request parameters for getDocumentById operation in DatabasesApi.
 * @export
 * @interface DatabasesApiGetDocumentByIdRequest
 */
export type DatabasesApiGetDocumentByIdRequest = {
    
    /**
    * Database ID.
    * @type {string}
    * @memberof DatabasesApiGetDocumentById
    */
    readonly databaseId: string
    
    /**
    * Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
    * @type {string}
    * @memberof DatabasesApiGetDocumentById
    */
    readonly collectionId: string
    
    /**
    * Document ID.
    * @type {string}
    * @memberof DatabasesApiGetDocumentById
    */
    readonly documentId: string
    
    /**
    * Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long.
    * @type {Array<string>}
    * @memberof DatabasesApiGetDocumentById
    */
    readonly queries?: Array<string>
    
}

/**
 * Request parameters for getIndexById operation in DatabasesApi.
 * @export
 * @interface DatabasesApiGetIndexByIdRequest
 */
export type DatabasesApiGetIndexByIdRequest = {
    
    /**
    * Database ID.
    * @type {string}
    * @memberof DatabasesApiGetIndexById
    */
    readonly databaseId: string
    
    /**
    * Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
    * @type {string}
    * @memberof DatabasesApiGetIndexById
    */
    readonly collectionId: string
    
    /**
    * Index Key.
    * @type {string}
    * @memberof DatabasesApiGetIndexById
    */
    readonly key: string
    
}

/**
 * Request parameters for listAll operation in DatabasesApi.
 * @export
 * @interface DatabasesApiListAllRequest
 */
export type DatabasesApiListAllRequest = {
    
    /**
    * Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: name
    * @type {Array<string>}
    * @memberof DatabasesApiListAll
    */
    readonly queries?: Array<string>
    
    /**
    * Search term to filter your list results. Max length: 256 chars.
    * @type {string}
    * @memberof DatabasesApiListAll
    */
    readonly search?: string
    
}

/**
 * Request parameters for listCollectionAttributes operation in DatabasesApi.
 * @export
 * @interface DatabasesApiListCollectionAttributesRequest
 */
export type DatabasesApiListCollectionAttributesRequest = {
    
    /**
    * Database ID.
    * @type {string}
    * @memberof DatabasesApiListCollectionAttributes
    */
    readonly databaseId: string
    
    /**
    * Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
    * @type {string}
    * @memberof DatabasesApiListCollectionAttributes
    */
    readonly collectionId: string
    
    /**
    * Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: key, type, size, required, array, status, error
    * @type {Array<string>}
    * @memberof DatabasesApiListCollectionAttributes
    */
    readonly queries?: Array<string>
    
}

/**
 * Request parameters for listCollectionDocuments operation in DatabasesApi.
 * @export
 * @interface DatabasesApiListCollectionDocumentsRequest
 */
export type DatabasesApiListCollectionDocumentsRequest = {
    
    /**
    * Database ID.
    * @type {string}
    * @memberof DatabasesApiListCollectionDocuments
    */
    readonly databaseId: string
    
    /**
    * Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
    * @type {string}
    * @memberof DatabasesApiListCollectionDocuments
    */
    readonly collectionId: string
    
    /**
    * Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long.
    * @type {Array<string>}
    * @memberof DatabasesApiListCollectionDocuments
    */
    readonly queries?: Array<string>
    
}

/**
 * Request parameters for listCollections operation in DatabasesApi.
 * @export
 * @interface DatabasesApiListCollectionsRequest
 */
export type DatabasesApiListCollectionsRequest = {
    
    /**
    * Database ID.
    * @type {string}
    * @memberof DatabasesApiListCollections
    */
    readonly databaseId: string
    
    /**
    * Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: name, enabled, documentSecurity
    * @type {Array<string>}
    * @memberof DatabasesApiListCollections
    */
    readonly queries?: Array<string>
    
    /**
    * Search term to filter your list results. Max length: 256 chars.
    * @type {string}
    * @memberof DatabasesApiListCollections
    */
    readonly search?: string
    
}

/**
 * Request parameters for listIndexes operation in DatabasesApi.
 * @export
 * @interface DatabasesApiListIndexesRequest
 */
export type DatabasesApiListIndexesRequest = {
    
    /**
    * Database ID.
    * @type {string}
    * @memberof DatabasesApiListIndexes
    */
    readonly databaseId: string
    
    /**
    * Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
    * @type {string}
    * @memberof DatabasesApiListIndexes
    */
    readonly collectionId: string
    
    /**
    * Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: key, type, status, attributes, error
    * @type {Array<string>}
    * @memberof DatabasesApiListIndexes
    */
    readonly queries?: Array<string>
    
}

/**
 * Request parameters for updateBooleanAttribute operation in DatabasesApi.
 * @export
 * @interface DatabasesApiUpdateBooleanAttributeRequest
 */
export type DatabasesApiUpdateBooleanAttributeRequest = {
    
    /**
    * Database ID.
    * @type {string}
    * @memberof DatabasesApiUpdateBooleanAttribute
    */
    readonly databaseId: string
    
    /**
    * Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
    * @type {string}
    * @memberof DatabasesApiUpdateBooleanAttribute
    */
    readonly collectionId: string
    
    /**
    * Attribute Key.
    * @type {string}
    * @memberof DatabasesApiUpdateBooleanAttribute
    */
    readonly key: string
    
} & DatabasesUpdateBooleanAttributeRequest

/**
 * Request parameters for updateById operation in DatabasesApi.
 * @export
 * @interface DatabasesApiUpdateByIdRequest
 */
export type DatabasesApiUpdateByIdRequest = {
    
    /**
    * Database ID.
    * @type {string}
    * @memberof DatabasesApiUpdateById
    */
    readonly databaseId: string
    
} & DatabasesUpdateByIdRequest

/**
 * Request parameters for updateCollectionById operation in DatabasesApi.
 * @export
 * @interface DatabasesApiUpdateCollectionByIdRequest
 */
export type DatabasesApiUpdateCollectionByIdRequest = {
    
    /**
    * Database ID.
    * @type {string}
    * @memberof DatabasesApiUpdateCollectionById
    */
    readonly databaseId: string
    
    /**
    * Collection ID.
    * @type {string}
    * @memberof DatabasesApiUpdateCollectionById
    */
    readonly collectionId: string
    
} & DatabasesUpdateCollectionByIdRequest

/**
 * Request parameters for updateDatetimeAttribute operation in DatabasesApi.
 * @export
 * @interface DatabasesApiUpdateDatetimeAttributeRequest
 */
export type DatabasesApiUpdateDatetimeAttributeRequest = {
    
    /**
    * Database ID.
    * @type {string}
    * @memberof DatabasesApiUpdateDatetimeAttribute
    */
    readonly databaseId: string
    
    /**
    * Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
    * @type {string}
    * @memberof DatabasesApiUpdateDatetimeAttribute
    */
    readonly collectionId: string
    
    /**
    * Attribute Key.
    * @type {string}
    * @memberof DatabasesApiUpdateDatetimeAttribute
    */
    readonly key: string
    
} & DatabasesUpdateDatetimeAttributeRequest

/**
 * Request parameters for updateDocumentById operation in DatabasesApi.
 * @export
 * @interface DatabasesApiUpdateDocumentByIdRequest
 */
export type DatabasesApiUpdateDocumentByIdRequest = {
    
    /**
    * Database ID.
    * @type {string}
    * @memberof DatabasesApiUpdateDocumentById
    */
    readonly databaseId: string
    
    /**
    * Collection ID.
    * @type {string}
    * @memberof DatabasesApiUpdateDocumentById
    */
    readonly collectionId: string
    
    /**
    * Document ID.
    * @type {string}
    * @memberof DatabasesApiUpdateDocumentById
    */
    readonly documentId: string
    
} & DatabasesUpdateDocumentByIdRequest

/**
 * Request parameters for updateEmailAttribute operation in DatabasesApi.
 * @export
 * @interface DatabasesApiUpdateEmailAttributeRequest
 */
export type DatabasesApiUpdateEmailAttributeRequest = {
    
    /**
    * Database ID.
    * @type {string}
    * @memberof DatabasesApiUpdateEmailAttribute
    */
    readonly databaseId: string
    
    /**
    * Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
    * @type {string}
    * @memberof DatabasesApiUpdateEmailAttribute
    */
    readonly collectionId: string
    
    /**
    * Attribute Key.
    * @type {string}
    * @memberof DatabasesApiUpdateEmailAttribute
    */
    readonly key: string
    
} & DatabasesUpdateEmailAttributeRequest

/**
 * Request parameters for updateEnumAttribute operation in DatabasesApi.
 * @export
 * @interface DatabasesApiUpdateEnumAttributeRequest
 */
export type DatabasesApiUpdateEnumAttributeRequest = {
    
    /**
    * Database ID.
    * @type {string}
    * @memberof DatabasesApiUpdateEnumAttribute
    */
    readonly databaseId: string
    
    /**
    * Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
    * @type {string}
    * @memberof DatabasesApiUpdateEnumAttribute
    */
    readonly collectionId: string
    
    /**
    * Attribute Key.
    * @type {string}
    * @memberof DatabasesApiUpdateEnumAttribute
    */
    readonly key: string
    
} & DatabasesUpdateEnumAttributeRequest

/**
 * Request parameters for updateFloatAttribute operation in DatabasesApi.
 * @export
 * @interface DatabasesApiUpdateFloatAttributeRequest
 */
export type DatabasesApiUpdateFloatAttributeRequest = {
    
    /**
    * Database ID.
    * @type {string}
    * @memberof DatabasesApiUpdateFloatAttribute
    */
    readonly databaseId: string
    
    /**
    * Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
    * @type {string}
    * @memberof DatabasesApiUpdateFloatAttribute
    */
    readonly collectionId: string
    
    /**
    * Attribute Key.
    * @type {string}
    * @memberof DatabasesApiUpdateFloatAttribute
    */
    readonly key: string
    
} & DatabasesUpdateFloatAttributeRequest

/**
 * Request parameters for updateIntegerAttribute operation in DatabasesApi.
 * @export
 * @interface DatabasesApiUpdateIntegerAttributeRequest
 */
export type DatabasesApiUpdateIntegerAttributeRequest = {
    
    /**
    * Database ID.
    * @type {string}
    * @memberof DatabasesApiUpdateIntegerAttribute
    */
    readonly databaseId: string
    
    /**
    * Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
    * @type {string}
    * @memberof DatabasesApiUpdateIntegerAttribute
    */
    readonly collectionId: string
    
    /**
    * Attribute Key.
    * @type {string}
    * @memberof DatabasesApiUpdateIntegerAttribute
    */
    readonly key: string
    
} & DatabasesUpdateIntegerAttributeRequest

/**
 * Request parameters for updateIpAttribute operation in DatabasesApi.
 * @export
 * @interface DatabasesApiUpdateIpAttributeRequest
 */
export type DatabasesApiUpdateIpAttributeRequest = {
    
    /**
    * Database ID.
    * @type {string}
    * @memberof DatabasesApiUpdateIpAttribute
    */
    readonly databaseId: string
    
    /**
    * Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
    * @type {string}
    * @memberof DatabasesApiUpdateIpAttribute
    */
    readonly collectionId: string
    
    /**
    * Attribute Key.
    * @type {string}
    * @memberof DatabasesApiUpdateIpAttribute
    */
    readonly key: string
    
} & DatabasesUpdateIpAttributeRequest

/**
 * Request parameters for updateRelationshipAttribute operation in DatabasesApi.
 * @export
 * @interface DatabasesApiUpdateRelationshipAttributeRequest
 */
export type DatabasesApiUpdateRelationshipAttributeRequest = {
    
    /**
    * Database ID.
    * @type {string}
    * @memberof DatabasesApiUpdateRelationshipAttribute
    */
    readonly databaseId: string
    
    /**
    * Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
    * @type {string}
    * @memberof DatabasesApiUpdateRelationshipAttribute
    */
    readonly collectionId: string
    
    /**
    * Attribute Key.
    * @type {string}
    * @memberof DatabasesApiUpdateRelationshipAttribute
    */
    readonly key: string
    
} & DatabasesUpdateRelationshipAttributeRequest

/**
 * Request parameters for updateStringAttribute operation in DatabasesApi.
 * @export
 * @interface DatabasesApiUpdateStringAttributeRequest
 */
export type DatabasesApiUpdateStringAttributeRequest = {
    
    /**
    * Database ID.
    * @type {string}
    * @memberof DatabasesApiUpdateStringAttribute
    */
    readonly databaseId: string
    
    /**
    * Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
    * @type {string}
    * @memberof DatabasesApiUpdateStringAttribute
    */
    readonly collectionId: string
    
    /**
    * Attribute Key.
    * @type {string}
    * @memberof DatabasesApiUpdateStringAttribute
    */
    readonly key: string
    
} & DatabasesUpdateStringAttributeRequest

/**
 * Request parameters for updateUrlAttribute operation in DatabasesApi.
 * @export
 * @interface DatabasesApiUpdateUrlAttributeRequest
 */
export type DatabasesApiUpdateUrlAttributeRequest = {
    
    /**
    * Database ID.
    * @type {string}
    * @memberof DatabasesApiUpdateUrlAttribute
    */
    readonly databaseId: string
    
    /**
    * Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
    * @type {string}
    * @memberof DatabasesApiUpdateUrlAttribute
    */
    readonly collectionId: string
    
    /**
    * Attribute Key.
    * @type {string}
    * @memberof DatabasesApiUpdateUrlAttribute
    */
    readonly key: string
    
} & DatabasesUpdateUrlAttributeRequest

/**
 * DatabasesApiGenerated - object-oriented interface
 * @export
 * @class DatabasesApiGenerated
 * @extends {BaseAPI}
 */
export class DatabasesApiGenerated extends BaseAPI {
    /**
     * Create a boolean attribute. 
     * @summary Create boolean attribute
     * @param {DatabasesApiCreateBooleanAttributeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabasesApiGenerated
     */
    public createBooleanAttribute(requestParameters: DatabasesApiCreateBooleanAttributeRequest, options?: AxiosRequestConfig) {
        return DatabasesApiFp(this.configuration).createBooleanAttribute(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new Collection. Before using this route, you should create a new database resource using either a [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection) API or directly from your database console.
     * @summary Create collection
     * @param {DatabasesApiCreateCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabasesApiGenerated
     */
    public createCollection(requestParameters: DatabasesApiCreateCollectionRequest, options?: AxiosRequestConfig) {
        return DatabasesApiFp(this.configuration).createCollection(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new Database. 
     * @summary Create database
     * @param {DatabasesApiCreateDatabaseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabasesApiGenerated
     */
    public createDatabase(requestParameters: DatabasesApiCreateDatabaseRequest, options?: AxiosRequestConfig) {
        return DatabasesApiFp(this.configuration).createDatabase(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a date time attribute according to the ISO 8601 standard.
     * @summary Create datetime attribute
     * @param {DatabasesApiCreateDatetimeAttributeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabasesApiGenerated
     */
    public createDatetimeAttribute(requestParameters: DatabasesApiCreateDatetimeAttributeRequest, options?: AxiosRequestConfig) {
        return DatabasesApiFp(this.configuration).createDatetimeAttribute(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new Document. Before using this route, you should create a new collection resource using either a [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection) API or directly from your database console.
     * @summary Create document
     * @param {DatabasesApiCreateDocumentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabasesApiGenerated
     */
    public createDocument(requestParameters: DatabasesApiCreateDocumentRequest, options?: AxiosRequestConfig) {
        return DatabasesApiFp(this.configuration).createDocument(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create an email attribute. 
     * @summary Create email attribute
     * @param {DatabasesApiCreateEmailAttributeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabasesApiGenerated
     */
    public createEmailAttribute(requestParameters: DatabasesApiCreateEmailAttributeRequest, options?: AxiosRequestConfig) {
        return DatabasesApiFp(this.configuration).createEmailAttribute(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create an enumeration attribute. The `elements` param acts as a white-list of accepted values for this attribute.  
     * @summary Create enum attribute
     * @param {DatabasesApiCreateEnumAttributeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabasesApiGenerated
     */
    public createEnumAttribute(requestParameters: DatabasesApiCreateEnumAttributeRequest, options?: AxiosRequestConfig) {
        return DatabasesApiFp(this.configuration).createEnumAttribute(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a float attribute. Optionally, minimum and maximum values can be provided. 
     * @summary Create float attribute
     * @param {DatabasesApiCreateFloatAttributeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabasesApiGenerated
     */
    public createFloatAttribute(requestParameters: DatabasesApiCreateFloatAttributeRequest, options?: AxiosRequestConfig) {
        return DatabasesApiFp(this.configuration).createFloatAttribute(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates an index on the attributes listed. Your index should include all the attributes you will query in a single request. Attributes can be `key`, `fulltext`, and `unique`.
     * @summary Create index
     * @param {DatabasesApiCreateIndexRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabasesApiGenerated
     */
    public createIndex(requestParameters: DatabasesApiCreateIndexRequest, options?: AxiosRequestConfig) {
        return DatabasesApiFp(this.configuration).createIndex(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create an integer attribute. Optionally, minimum and maximum values can be provided. 
     * @summary Create integer attribute
     * @param {DatabasesApiCreateIntegerAttributeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabasesApiGenerated
     */
    public createIntegerAttribute(requestParameters: DatabasesApiCreateIntegerAttributeRequest, options?: AxiosRequestConfig) {
        return DatabasesApiFp(this.configuration).createIntegerAttribute(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create IP address attribute. 
     * @summary Create IP address attribute
     * @param {DatabasesApiCreateIpAttributeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabasesApiGenerated
     */
    public createIpAttribute(requestParameters: DatabasesApiCreateIpAttributeRequest, options?: AxiosRequestConfig) {
        return DatabasesApiFp(this.configuration).createIpAttribute(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create relationship attribute. [Learn more about relationship attributes](https://appwrite.io/docs/databases-relationships#relationship-attributes). 
     * @summary Create relationship attribute
     * @param {DatabasesApiCreateRelationshipAttributeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabasesApiGenerated
     */
    public createRelationshipAttribute(requestParameters: DatabasesApiCreateRelationshipAttributeRequest, options?: AxiosRequestConfig) {
        return DatabasesApiFp(this.configuration).createRelationshipAttribute(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a string attribute. 
     * @summary Create string attribute
     * @param {DatabasesApiCreateStringAttributeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabasesApiGenerated
     */
    public createStringAttribute(requestParameters: DatabasesApiCreateStringAttributeRequest, options?: AxiosRequestConfig) {
        return DatabasesApiFp(this.configuration).createStringAttribute(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a URL attribute. 
     * @summary Create URL attribute
     * @param {DatabasesApiCreateUrlAttributeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabasesApiGenerated
     */
    public createUrlAttribute(requestParameters: DatabasesApiCreateUrlAttributeRequest, options?: AxiosRequestConfig) {
        return DatabasesApiFp(this.configuration).createUrlAttribute(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes an attribute.
     * @summary Delete attribute
     * @param {DatabasesApiDeleteAttributeByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabasesApiGenerated
     */
    public deleteAttributeById(requestParameters: DatabasesApiDeleteAttributeByIdRequest, options?: AxiosRequestConfig) {
        return DatabasesApiFp(this.configuration).deleteAttributeById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a database by its unique ID. Only API keys with with databases.write scope can delete a database.
     * @summary Delete database
     * @param {DatabasesApiDeleteByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabasesApiGenerated
     */
    public deleteById(requestParameters: DatabasesApiDeleteByIdRequest, options?: AxiosRequestConfig) {
        return DatabasesApiFp(this.configuration).deleteById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a collection by its unique ID. Only users with write permissions have access to delete this resource.
     * @summary Delete collection
     * @param {DatabasesApiDeleteCollectionByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabasesApiGenerated
     */
    public deleteCollectionById(requestParameters: DatabasesApiDeleteCollectionByIdRequest, options?: AxiosRequestConfig) {
        return DatabasesApiFp(this.configuration).deleteCollectionById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a document by its unique ID.
     * @summary Delete document
     * @param {DatabasesApiDeleteDocumentByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabasesApiGenerated
     */
    public deleteDocumentById(requestParameters: DatabasesApiDeleteDocumentByIdRequest, options?: AxiosRequestConfig) {
        return DatabasesApiFp(this.configuration).deleteDocumentById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an index.
     * @summary Delete index
     * @param {DatabasesApiDeleteIndexRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabasesApiGenerated
     */
    public deleteIndex(requestParameters: DatabasesApiDeleteIndexRequest, options?: AxiosRequestConfig) {
        return DatabasesApiFp(this.configuration).deleteIndex(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get attribute by ID.
     * @summary Get attribute
     * @param {DatabasesApiGetAttributeByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabasesApiGenerated
     */
    public getAttributeById(requestParameters: DatabasesApiGetAttributeByIdRequest, options?: AxiosRequestConfig) {
        return DatabasesApiFp(this.configuration).getAttributeById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a database by its unique ID. This endpoint response returns a JSON object with the database metadata.
     * @summary Get database
     * @param {DatabasesApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabasesApiGenerated
     */
    public getById(requestParameters: DatabasesApiGetByIdRequest, options?: AxiosRequestConfig) {
        return DatabasesApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a collection by its unique ID. This endpoint response returns a JSON object with the collection metadata.
     * @summary Get collection
     * @param {DatabasesApiGetCollectionByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabasesApiGenerated
     */
    public getCollectionById(requestParameters: DatabasesApiGetCollectionByIdRequest, options?: AxiosRequestConfig) {
        return DatabasesApiFp(this.configuration).getCollectionById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a document by its unique ID. This endpoint response returns a JSON object with the document data.
     * @summary Get document
     * @param {DatabasesApiGetDocumentByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabasesApiGenerated
     */
    public getDocumentById(requestParameters: DatabasesApiGetDocumentByIdRequest, options?: AxiosRequestConfig) {
        return DatabasesApiFp(this.configuration).getDocumentById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get index by ID.
     * @summary Get index
     * @param {DatabasesApiGetIndexByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabasesApiGenerated
     */
    public getIndexById(requestParameters: DatabasesApiGetIndexByIdRequest, options?: AxiosRequestConfig) {
        return DatabasesApiFp(this.configuration).getIndexById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of all databases from the current Appwrite project. You can use the search parameter to filter your results.
     * @summary List databases
     * @param {DatabasesApiListAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabasesApiGenerated
     */
    public listAll(requestParameters: DatabasesApiListAllRequest, options?: AxiosRequestConfig) {
        return DatabasesApiFp(this.configuration).listAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List attributes in the collection.
     * @summary List attributes
     * @param {DatabasesApiListCollectionAttributesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabasesApiGenerated
     */
    public listCollectionAttributes(requestParameters: DatabasesApiListCollectionAttributesRequest, options?: AxiosRequestConfig) {
        return DatabasesApiFp(this.configuration).listCollectionAttributes(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of all the user\'s documents in a given collection. You can use the query params to filter your results.
     * @summary List documents
     * @param {DatabasesApiListCollectionDocumentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabasesApiGenerated
     */
    public listCollectionDocuments(requestParameters: DatabasesApiListCollectionDocumentsRequest, options?: AxiosRequestConfig) {
        return DatabasesApiFp(this.configuration).listCollectionDocuments(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of all collections that belong to the provided databaseId. You can use the search parameter to filter your results.
     * @summary List collections
     * @param {DatabasesApiListCollectionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabasesApiGenerated
     */
    public listCollections(requestParameters: DatabasesApiListCollectionsRequest, options?: AxiosRequestConfig) {
        return DatabasesApiFp(this.configuration).listCollections(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List indexes in the collection.
     * @summary List indexes
     * @param {DatabasesApiListIndexesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabasesApiGenerated
     */
    public listIndexes(requestParameters: DatabasesApiListIndexesRequest, options?: AxiosRequestConfig) {
        return DatabasesApiFp(this.configuration).listIndexes(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a boolean attribute. Changing the `default` value will not update already existing documents.
     * @summary Update boolean attribute
     * @param {DatabasesApiUpdateBooleanAttributeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabasesApiGenerated
     */
    public updateBooleanAttribute(requestParameters: DatabasesApiUpdateBooleanAttributeRequest, options?: AxiosRequestConfig) {
        return DatabasesApiFp(this.configuration).updateBooleanAttribute(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a database by its unique ID.
     * @summary Update database
     * @param {DatabasesApiUpdateByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabasesApiGenerated
     */
    public updateById(requestParameters: DatabasesApiUpdateByIdRequest, options?: AxiosRequestConfig) {
        return DatabasesApiFp(this.configuration).updateById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a collection by its unique ID.
     * @summary Update collection
     * @param {DatabasesApiUpdateCollectionByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabasesApiGenerated
     */
    public updateCollectionById(requestParameters: DatabasesApiUpdateCollectionByIdRequest, options?: AxiosRequestConfig) {
        return DatabasesApiFp(this.configuration).updateCollectionById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a date time attribute. Changing the `default` value will not update already existing documents.
     * @summary Update dateTime attribute
     * @param {DatabasesApiUpdateDatetimeAttributeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabasesApiGenerated
     */
    public updateDatetimeAttribute(requestParameters: DatabasesApiUpdateDatetimeAttributeRequest, options?: AxiosRequestConfig) {
        return DatabasesApiFp(this.configuration).updateDatetimeAttribute(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a document by its unique ID. Using the patch method you can pass only specific fields that will get updated.
     * @summary Update document
     * @param {DatabasesApiUpdateDocumentByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabasesApiGenerated
     */
    public updateDocumentById(requestParameters: DatabasesApiUpdateDocumentByIdRequest, options?: AxiosRequestConfig) {
        return DatabasesApiFp(this.configuration).updateDocumentById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an email attribute. Changing the `default` value will not update already existing documents. 
     * @summary Update email attribute
     * @param {DatabasesApiUpdateEmailAttributeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabasesApiGenerated
     */
    public updateEmailAttribute(requestParameters: DatabasesApiUpdateEmailAttributeRequest, options?: AxiosRequestConfig) {
        return DatabasesApiFp(this.configuration).updateEmailAttribute(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an enum attribute. Changing the `default` value will not update already existing documents. 
     * @summary Update enum attribute
     * @param {DatabasesApiUpdateEnumAttributeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabasesApiGenerated
     */
    public updateEnumAttribute(requestParameters: DatabasesApiUpdateEnumAttributeRequest, options?: AxiosRequestConfig) {
        return DatabasesApiFp(this.configuration).updateEnumAttribute(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a float attribute. Changing the `default` value will not update already existing documents. 
     * @summary Update float attribute
     * @param {DatabasesApiUpdateFloatAttributeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabasesApiGenerated
     */
    public updateFloatAttribute(requestParameters: DatabasesApiUpdateFloatAttributeRequest, options?: AxiosRequestConfig) {
        return DatabasesApiFp(this.configuration).updateFloatAttribute(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an integer attribute. Changing the `default` value will not update already existing documents. 
     * @summary Update integer attribute
     * @param {DatabasesApiUpdateIntegerAttributeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabasesApiGenerated
     */
    public updateIntegerAttribute(requestParameters: DatabasesApiUpdateIntegerAttributeRequest, options?: AxiosRequestConfig) {
        return DatabasesApiFp(this.configuration).updateIntegerAttribute(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an ip attribute. Changing the `default` value will not update already existing documents. 
     * @summary Update IP address attribute
     * @param {DatabasesApiUpdateIpAttributeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabasesApiGenerated
     */
    public updateIpAttribute(requestParameters: DatabasesApiUpdateIpAttributeRequest, options?: AxiosRequestConfig) {
        return DatabasesApiFp(this.configuration).updateIpAttribute(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update relationship attribute. [Learn more about relationship attributes](https://appwrite.io/docs/databases-relationships#relationship-attributes). 
     * @summary Update relationship attribute
     * @param {DatabasesApiUpdateRelationshipAttributeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabasesApiGenerated
     */
    public updateRelationshipAttribute(requestParameters: DatabasesApiUpdateRelationshipAttributeRequest, options?: AxiosRequestConfig) {
        return DatabasesApiFp(this.configuration).updateRelationshipAttribute(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a string attribute. Changing the `default` value will not update already existing documents. 
     * @summary Update string attribute
     * @param {DatabasesApiUpdateStringAttributeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabasesApiGenerated
     */
    public updateStringAttribute(requestParameters: DatabasesApiUpdateStringAttributeRequest, options?: AxiosRequestConfig) {
        return DatabasesApiFp(this.configuration).updateStringAttribute(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an url attribute. Changing the `default` value will not update already existing documents. 
     * @summary Update URL attribute
     * @param {DatabasesApiUpdateUrlAttributeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabasesApiGenerated
     */
    public updateUrlAttribute(requestParameters: DatabasesApiUpdateUrlAttributeRequest, options?: AxiosRequestConfig) {
        return DatabasesApiFp(this.configuration).updateUrlAttribute(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
