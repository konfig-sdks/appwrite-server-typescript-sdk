/* tslint:disable */
/* eslint-disable */
/*
Appwrite

Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)

The version of the OpenAPI document: 1.5.0
Contact: team@appwrite.io

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Deployment } from '../models';
// @ts-ignore
import { DeploymentList } from '../models';
// @ts-ignore
import { Execution } from '../models';
// @ts-ignore
import { ExecutionList } from '../models';
// @ts-ignore
import { Function } from '../models';
// @ts-ignore
import { FunctionList } from '../models';
// @ts-ignore
import { FunctionsCreateDeploymentFunctionCodeRequest } from '../models';
// @ts-ignore
import { FunctionsCreateNewFunctionRequest } from '../models';
// @ts-ignore
import { FunctionsCreateVariableRequest } from '../models';
// @ts-ignore
import { FunctionsTriggerExecutionRequest } from '../models';
// @ts-ignore
import { FunctionsUpdateByIdRequest } from '../models';
// @ts-ignore
import { FunctionsUpdateVariableByIdRequest } from '../models';
// @ts-ignore
import { RuntimeList } from '../models';
// @ts-ignore
import { Variable } from '../models';
// @ts-ignore
import { VariableList } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * FunctionsApi - axios parameter creator
 * @export
 */
export const FunctionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new build for an Appwrite Function deployment. This endpoint can be used to retry a failed build.
         * @summary Create build
         * @param {string} functionId Function ID.
         * @param {string} deploymentId Deployment ID.
         * @param {string} buildId Build unique ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBuild: async (functionId: string, deploymentId: string, buildId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'functionId' is not null or undefined
            assertParamExists('createBuild', 'functionId', functionId)
            // verify required parameter 'deploymentId' is not null or undefined
            assertParamExists('createBuild', 'deploymentId', deploymentId)
            // verify required parameter 'buildId' is not null or undefined
            assertParamExists('createBuild', 'buildId', buildId)
            const localVarPath = `/functions/{functionId}/deployments/{deploymentId}/builds/{buildId}`
                .replace(`{${"functionId"}}`, encodeURIComponent(String(functionId !== undefined ? functionId : `-functionId-`)))
                .replace(`{${"deploymentId"}}`, encodeURIComponent(String(deploymentId !== undefined ? deploymentId : `-deploymentId-`)))
                .replace(`{${"buildId"}}`, encodeURIComponent(String(buildId !== undefined ? buildId : `-buildId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/functions/{functionId}/deployments/{deploymentId}/builds/{buildId}',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new function code deployment. Use this endpoint to upload a new version of your code function. To execute your newly uploaded code, you\'ll need to update the function\'s deployment to use your new deployment UID.  This endpoint accepts a tar.gz file compressed with your code. Make sure to include any dependencies your code has within the compressed file. You can learn more about code packaging in the [Appwrite Cloud Functions tutorial](https://appwrite.io/docs/functions).  Use the \"command\" param to set the entrypoint used to execute your code.
         * @summary Create deployment
         * @param {string} functionId Function ID.
         * @param {string} code Gzip file with your code package. When used with the Appwrite CLI, pass the path to your code directory, and the CLI will automatically package your code. Use a path that is within the current directory.
         * @param {boolean} activate Automatically activate the deployment when it is finished building.
         * @param {string} [entrypoint] Entrypoint File.
         * @param {string} [commands] Build Commands.
         * @param {FunctionsCreateDeploymentFunctionCodeRequest} [functionsCreateDeploymentFunctionCodeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDeploymentFunctionCode: async (functionId: string, code: string, activate: boolean, entrypoint?: string, commands?: string, functionsCreateDeploymentFunctionCodeRequest?: FunctionsCreateDeploymentFunctionCodeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'functionId' is not null or undefined
            assertParamExists('createDeploymentFunctionCode', 'functionId', functionId)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('createDeploymentFunctionCode', 'code', code)
            // verify required parameter 'activate' is not null or undefined
            assertParamExists('createDeploymentFunctionCode', 'activate', activate)
            const localVarPath = `/functions/{functionId}/deployments`
                .replace(`{${"functionId"}}`, encodeURIComponent(String(functionId !== undefined ? functionId : `-functionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            const addFormParam = async (name: string, data: any, isBinary: boolean, isPrimitiveType: boolean) => {
                if (isBinary) {
                    if (data instanceof Uint8Array) {
                        // Handle Buffer data
                        const filetype = await fromBuffer(data)
                        const filename = filetype === undefined ? name : `${name}.${filetype.ext}`
                        localVarFormParams.append(name, data as any, filename);
                    } else if ("name" in data) {
                        // File instances in browsers and Node.js have the
                        // "name" property "Duck typing" files to handle browser
                        // File class or Node.js File class
                        // Web: https://developer.mozilla.org/en-US/docs/Web/API/File
                        // Node.js: https://nodejs.org/api/buffer.html#new-bufferfilesources-filename-options
                        if (isBrowser()) {
                            // FormData in browser can accept File/Blob directly
                            localVarFormParams.append(name, data, data.name);
                        } else {
                            // FormData in Node.js can only accept raw Buffer so convert before passing
                            const bytes = await data.arrayBuffer()
                            const buffer = Buffer.from(bytes)
                            localVarFormParams.append(name, buffer, data.name);
                        }
                    }
                } else {
                    if (isPrimitiveType) {
                        /**
                         * FormData can only accept string or Blob so we need to convert
                         * non-string primitives to string. We also need to convert
                         */
                        if (typeof data === "object") {
                          localVarFormParams.append(name, JSON.stringify(data));
                        } else {
                          localVarFormParams.append(name, data);
                        }
                    } else {
                        if (isBrowser()) {
                            localVarFormParams.append(name, new Blob([JSON.stringify(data)], { type: "application/json" }))
                        } else {
                            localVarFormParams.append(name, JSON.stringify(data), { type: "application/json", filename: "data.json" });
                        }
                    }
                }
            }
            if (!isBrowser()) Object.assign(localVarHeaderParameter, localVarFormParams.getHeaders());

            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

            if (entrypoint !== undefined) {
                await addFormParam('entrypoint', entrypoint, false, true)
            }
    
            if (commands !== undefined) {
                await addFormParam('commands', commands, false, true)
            }
    
            if (code !== undefined) {
                await addFormParam('code', code, false, true)
            }
    
            if (activate !== undefined) {
                await addFormParam('activate', activate, false, true)
            }
    
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;
            requestBeforeHook({
                requestBody: functionsCreateDeploymentFunctionCodeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/functions/{functionId}/deployments',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new function. You can pass a list of [permissions](https://appwrite.io/docs/permissions) to allow different project users or team with access to execute the function using the client API.
         * @summary Create function
         * @param {FunctionsCreateNewFunctionRequest} [functionsCreateNewFunctionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewFunction: async (functionsCreateNewFunctionRequest?: FunctionsCreateNewFunctionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/functions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: functionsCreateNewFunctionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/functions',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(functionsCreateNewFunctionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new function environment variable. These variables can be accessed in the function at runtime as environment variables.
         * @summary Create variable
         * @param {string} functionId Function unique ID.
         * @param {FunctionsCreateVariableRequest} [functionsCreateVariableRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVariable: async (functionId: string, functionsCreateVariableRequest?: FunctionsCreateVariableRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'functionId' is not null or undefined
            assertParamExists('createVariable', 'functionId', functionId)
            const localVarPath = `/functions/{functionId}/variables`
                .replace(`{${"functionId"}}`, encodeURIComponent(String(functionId !== undefined ? functionId : `-functionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: functionsCreateVariableRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/functions/{functionId}/variables',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(functionsCreateVariableRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a function by its unique ID.
         * @summary Delete function
         * @param {string} functionId Function ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById: async (functionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'functionId' is not null or undefined
            assertParamExists('deleteById', 'functionId', functionId)
            const localVarPath = `/functions/{functionId}`
                .replace(`{${"functionId"}}`, encodeURIComponent(String(functionId !== undefined ? functionId : `-functionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/functions/{functionId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a code deployment by its unique ID.
         * @summary Delete deployment
         * @param {string} functionId Function ID.
         * @param {string} deploymentId Deployment ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDeployment: async (functionId: string, deploymentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'functionId' is not null or undefined
            assertParamExists('deleteDeployment', 'functionId', functionId)
            // verify required parameter 'deploymentId' is not null or undefined
            assertParamExists('deleteDeployment', 'deploymentId', deploymentId)
            const localVarPath = `/functions/{functionId}/deployments/{deploymentId}`
                .replace(`{${"functionId"}}`, encodeURIComponent(String(functionId !== undefined ? functionId : `-functionId-`)))
                .replace(`{${"deploymentId"}}`, encodeURIComponent(String(deploymentId !== undefined ? deploymentId : `-deploymentId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/functions/{functionId}/deployments/{deploymentId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a variable by its unique ID.
         * @summary Delete variable
         * @param {string} functionId Function unique ID.
         * @param {string} variableId Variable unique ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVariableById: async (functionId: string, variableId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'functionId' is not null or undefined
            assertParamExists('deleteVariableById', 'functionId', functionId)
            // verify required parameter 'variableId' is not null or undefined
            assertParamExists('deleteVariableById', 'variableId', variableId)
            const localVarPath = `/functions/{functionId}/variables/{variableId}`
                .replace(`{${"functionId"}}`, encodeURIComponent(String(functionId !== undefined ? functionId : `-functionId-`)))
                .replace(`{${"variableId"}}`, encodeURIComponent(String(variableId !== undefined ? variableId : `-variableId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/functions/{functionId}/variables/{variableId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a function by its unique ID.
         * @summary Get function
         * @param {string} functionId Function ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (functionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'functionId' is not null or undefined
            assertParamExists('getById', 'functionId', functionId)
            const localVarPath = `/functions/{functionId}`
                .replace(`{${"functionId"}}`, encodeURIComponent(String(functionId !== undefined ? functionId : `-functionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/functions/{functionId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a code deployment by its unique ID.
         * @summary Get deployment
         * @param {string} functionId Function ID.
         * @param {string} deploymentId Deployment ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeploymentById: async (functionId: string, deploymentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'functionId' is not null or undefined
            assertParamExists('getDeploymentById', 'functionId', functionId)
            // verify required parameter 'deploymentId' is not null or undefined
            assertParamExists('getDeploymentById', 'deploymentId', deploymentId)
            const localVarPath = `/functions/{functionId}/deployments/{deploymentId}`
                .replace(`{${"functionId"}}`, encodeURIComponent(String(functionId !== undefined ? functionId : `-functionId-`)))
                .replace(`{${"deploymentId"}}`, encodeURIComponent(String(deploymentId !== undefined ? deploymentId : `-deploymentId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/functions/{functionId}/deployments/{deploymentId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a Deployment\'s contents by its unique ID. This endpoint supports range requests for partial or streaming file download.
         * @summary Download Deployment
         * @param {string} functionId Function ID.
         * @param {string} deploymentId Deployment ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeploymentContents: async (functionId: string, deploymentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'functionId' is not null or undefined
            assertParamExists('getDeploymentContents', 'functionId', functionId)
            // verify required parameter 'deploymentId' is not null or undefined
            assertParamExists('getDeploymentContents', 'deploymentId', deploymentId)
            const localVarPath = `/functions/{functionId}/deployments/{deploymentId}/download`
                .replace(`{${"functionId"}}`, encodeURIComponent(String(functionId !== undefined ? functionId : `-functionId-`)))
                .replace(`{${"deploymentId"}}`, encodeURIComponent(String(deploymentId !== undefined ? deploymentId : `-deploymentId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/functions/{functionId}/deployments/{deploymentId}/download',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a function execution log by its unique ID.
         * @summary Get execution
         * @param {string} functionId Function ID.
         * @param {string} executionId Execution ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExecutionLog: async (functionId: string, executionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'functionId' is not null or undefined
            assertParamExists('getExecutionLog', 'functionId', functionId)
            // verify required parameter 'executionId' is not null or undefined
            assertParamExists('getExecutionLog', 'executionId', executionId)
            const localVarPath = `/functions/{functionId}/executions/{executionId}`
                .replace(`{${"functionId"}}`, encodeURIComponent(String(functionId !== undefined ? functionId : `-functionId-`)))
                .replace(`{${"executionId"}}`, encodeURIComponent(String(executionId !== undefined ? executionId : `-executionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/functions/{functionId}/executions/{executionId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a variable by its unique ID.
         * @summary Get variable
         * @param {string} functionId Function unique ID.
         * @param {string} variableId Variable unique ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariableById: async (functionId: string, variableId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'functionId' is not null or undefined
            assertParamExists('getVariableById', 'functionId', functionId)
            // verify required parameter 'variableId' is not null or undefined
            assertParamExists('getVariableById', 'variableId', variableId)
            const localVarPath = `/functions/{functionId}/variables/{variableId}`
                .replace(`{${"functionId"}}`, encodeURIComponent(String(functionId !== undefined ? functionId : `-functionId-`)))
                .replace(`{${"variableId"}}`, encodeURIComponent(String(variableId !== undefined ? variableId : `-variableId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/functions/{functionId}/variables/{variableId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of all the project\'s functions. You can use the query params to filter your results.
         * @summary List functions
         * @param {Array<string>} [queries] Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: name, enabled, runtime, deployment, schedule, scheduleNext, schedulePrevious, timeout, entrypoint, commands, installationId
         * @param {string} [search] Search term to filter your list results. Max length: 256 chars.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllFunctions: async (queries?: Array<string>, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/functions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            if (queries) {
                localVarQueryParameter['queries'] = queries;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/functions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of all the project\'s code deployments. You can use the query params to filter your results.
         * @summary List deployments
         * @param {string} functionId Function ID.
         * @param {Array<string>} [queries] Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: size, buildId, activate, entrypoint, commands
         * @param {string} [search] Search term to filter your list results. Max length: 256 chars.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDeployments: async (functionId: string, queries?: Array<string>, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'functionId' is not null or undefined
            assertParamExists('listDeployments', 'functionId', functionId)
            const localVarPath = `/functions/{functionId}/deployments`
                .replace(`{${"functionId"}}`, encodeURIComponent(String(functionId !== undefined ? functionId : `-functionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            if (queries) {
                localVarQueryParameter['queries'] = queries;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/functions/{functionId}/deployments',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of all the current user function execution logs. You can use the query params to filter your results.
         * @summary List executions
         * @param {string} functionId Function ID.
         * @param {Array<string>} [queries] Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: trigger, status, responseStatusCode, duration
         * @param {string} [search] Search term to filter your list results. Max length: 256 chars.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listExecutions: async (functionId: string, queries?: Array<string>, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'functionId' is not null or undefined
            assertParamExists('listExecutions', 'functionId', functionId)
            const localVarPath = `/functions/{functionId}/executions`
                .replace(`{${"functionId"}}`, encodeURIComponent(String(functionId !== undefined ? functionId : `-functionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })
            if (queries) {
                localVarQueryParameter['queries'] = queries;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/functions/{functionId}/executions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of all runtimes that are currently active on your instance.
         * @summary List runtimes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRuntimes: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/functions/runtimes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/functions/runtimes',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of all variables of a specific function.
         * @summary List variables
         * @param {string} functionId Function unique ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVariables: async (functionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'functionId' is not null or undefined
            assertParamExists('listVariables', 'functionId', functionId)
            const localVarPath = `/functions/{functionId}/variables`
                .replace(`{${"functionId"}}`, encodeURIComponent(String(functionId !== undefined ? functionId : `-functionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/functions/{functionId}/variables',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Trigger a function execution. The returned object will return you the current execution status. You can ping the `Get Execution` endpoint to get updates on the current execution status. Once this endpoint is called, your function execution process will start asynchronously.
         * @summary Create execution
         * @param {string} functionId Function ID.
         * @param {FunctionsTriggerExecutionRequest} [functionsTriggerExecutionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        triggerExecution: async (functionId: string, functionsTriggerExecutionRequest?: FunctionsTriggerExecutionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'functionId' is not null or undefined
            assertParamExists('triggerExecution', 'functionId', functionId)
            const localVarPath = `/functions/{functionId}/executions`
                .replace(`{${"functionId"}}`, encodeURIComponent(String(functionId !== undefined ? functionId : `-functionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: functionsTriggerExecutionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/functions/{functionId}/executions',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(functionsTriggerExecutionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update function by its unique ID.
         * @summary Update function
         * @param {string} functionId Function ID.
         * @param {FunctionsUpdateByIdRequest} [functionsUpdateByIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateById: async (functionId: string, functionsUpdateByIdRequest?: FunctionsUpdateByIdRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'functionId' is not null or undefined
            assertParamExists('updateById', 'functionId', functionId)
            const localVarPath = `/functions/{functionId}`
                .replace(`{${"functionId"}}`, encodeURIComponent(String(functionId !== undefined ? functionId : `-functionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: functionsUpdateByIdRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/functions/{functionId}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(functionsUpdateByIdRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the function code deployment ID using the unique function ID. Use this endpoint to switch the code deployment that should be executed by the execution endpoint.
         * @summary Update function deployment
         * @param {string} functionId Function ID.
         * @param {string} deploymentId Deployment ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDeploymentFunctionCode: async (functionId: string, deploymentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'functionId' is not null or undefined
            assertParamExists('updateDeploymentFunctionCode', 'functionId', functionId)
            // verify required parameter 'deploymentId' is not null or undefined
            assertParamExists('updateDeploymentFunctionCode', 'deploymentId', deploymentId)
            const localVarPath = `/functions/{functionId}/deployments/{deploymentId}`
                .replace(`{${"functionId"}}`, encodeURIComponent(String(functionId !== undefined ? functionId : `-functionId-`)))
                .replace(`{${"deploymentId"}}`, encodeURIComponent(String(deploymentId !== undefined ? deploymentId : `-deploymentId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/functions/{functionId}/deployments/{deploymentId}',
                httpMethod: 'PATCH'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update variable by its unique ID.
         * @summary Update variable
         * @param {string} functionId Function unique ID.
         * @param {string} variableId Variable unique ID.
         * @param {FunctionsUpdateVariableByIdRequest} [functionsUpdateVariableByIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVariableById: async (functionId: string, variableId: string, functionsUpdateVariableByIdRequest?: FunctionsUpdateVariableByIdRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'functionId' is not null or undefined
            assertParamExists('updateVariableById', 'functionId', functionId)
            // verify required parameter 'variableId' is not null or undefined
            assertParamExists('updateVariableById', 'variableId', variableId)
            const localVarPath = `/functions/{functionId}/variables/{variableId}`
                .replace(`{${"functionId"}}`, encodeURIComponent(String(functionId !== undefined ? functionId : `-functionId-`)))
                .replace(`{${"variableId"}}`, encodeURIComponent(String(variableId !== undefined ? variableId : `-variableId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: functionsUpdateVariableByIdRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/functions/{functionId}/variables/{variableId}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(functionsUpdateVariableByIdRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FunctionsApi - functional programming interface
 * @export
 */
export const FunctionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FunctionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new build for an Appwrite Function deployment. This endpoint can be used to retry a failed build.
         * @summary Create build
         * @param {FunctionsApiCreateBuildRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBuild(requestParameters: FunctionsApiCreateBuildRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBuild(requestParameters.functionId, requestParameters.deploymentId, requestParameters.buildId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new function code deployment. Use this endpoint to upload a new version of your code function. To execute your newly uploaded code, you\'ll need to update the function\'s deployment to use your new deployment UID.  This endpoint accepts a tar.gz file compressed with your code. Make sure to include any dependencies your code has within the compressed file. You can learn more about code packaging in the [Appwrite Cloud Functions tutorial](https://appwrite.io/docs/functions).  Use the \"command\" param to set the entrypoint used to execute your code.
         * @summary Create deployment
         * @param {FunctionsApiCreateDeploymentFunctionCodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDeploymentFunctionCode(requestParameters: FunctionsApiCreateDeploymentFunctionCodeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Deployment>> {
            const functionsCreateDeploymentFunctionCodeRequest: FunctionsCreateDeploymentFunctionCodeRequest = {
                entrypoint: requestParameters.entrypoint,
                commands: requestParameters.commands,
                code: requestParameters.code,
                activate: requestParameters.activate
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDeploymentFunctionCode(requestParameters.functionId, requestParameters.code, requestParameters.activate, requestParameters.entrypoint, requestParameters.commands, functionsCreateDeploymentFunctionCodeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new function. You can pass a list of [permissions](https://appwrite.io/docs/permissions) to allow different project users or team with access to execute the function using the client API.
         * @summary Create function
         * @param {FunctionsApiCreateNewFunctionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewFunction(requestParameters: FunctionsApiCreateNewFunctionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Function>> {
            const functionsCreateNewFunctionRequest: FunctionsCreateNewFunctionRequest = {
                functionId: requestParameters.functionId,
                name: requestParameters.name,
                runtime: requestParameters.runtime,
                execute: requestParameters.execute,
                events: requestParameters.events,
                schedule: requestParameters.schedule,
                timeout: requestParameters.timeout,
                enabled: requestParameters.enabled,
                logging: requestParameters.logging,
                entrypoint: requestParameters.entrypoint,
                commands: requestParameters.commands,
                installationId: requestParameters.installationId,
                providerRepositoryId: requestParameters.providerRepositoryId,
                providerBranch: requestParameters.providerBranch,
                providerSilentMode: requestParameters.providerSilentMode,
                providerRootDirectory: requestParameters.providerRootDirectory,
                templateRepository: requestParameters.templateRepository,
                templateOwner: requestParameters.templateOwner,
                templateRootDirectory: requestParameters.templateRootDirectory,
                templateBranch: requestParameters.templateBranch
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewFunction(functionsCreateNewFunctionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new function environment variable. These variables can be accessed in the function at runtime as environment variables.
         * @summary Create variable
         * @param {FunctionsApiCreateVariableRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createVariable(requestParameters: FunctionsApiCreateVariableRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Variable>> {
            const functionsCreateVariableRequest: FunctionsCreateVariableRequest = {
                key: requestParameters.key,
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createVariable(requestParameters.functionId, functionsCreateVariableRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a function by its unique ID.
         * @summary Delete function
         * @param {FunctionsApiDeleteByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteById(requestParameters: FunctionsApiDeleteByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteById(requestParameters.functionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a code deployment by its unique ID.
         * @summary Delete deployment
         * @param {FunctionsApiDeleteDeploymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDeployment(requestParameters: FunctionsApiDeleteDeploymentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDeployment(requestParameters.functionId, requestParameters.deploymentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a variable by its unique ID.
         * @summary Delete variable
         * @param {FunctionsApiDeleteVariableByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteVariableById(requestParameters: FunctionsApiDeleteVariableByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteVariableById(requestParameters.functionId, requestParameters.variableId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a function by its unique ID.
         * @summary Get function
         * @param {FunctionsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: FunctionsApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Function>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.functionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a code deployment by its unique ID.
         * @summary Get deployment
         * @param {FunctionsApiGetDeploymentByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeploymentById(requestParameters: FunctionsApiGetDeploymentByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Deployment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDeploymentById(requestParameters.functionId, requestParameters.deploymentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a Deployment\'s contents by its unique ID. This endpoint supports range requests for partial or streaming file download.
         * @summary Download Deployment
         * @param {FunctionsApiGetDeploymentContentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeploymentContents(requestParameters: FunctionsApiGetDeploymentContentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDeploymentContents(requestParameters.functionId, requestParameters.deploymentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a function execution log by its unique ID.
         * @summary Get execution
         * @param {FunctionsApiGetExecutionLogRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExecutionLog(requestParameters: FunctionsApiGetExecutionLogRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Execution>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExecutionLog(requestParameters.functionId, requestParameters.executionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a variable by its unique ID.
         * @summary Get variable
         * @param {FunctionsApiGetVariableByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVariableById(requestParameters: FunctionsApiGetVariableByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Variable>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVariableById(requestParameters.functionId, requestParameters.variableId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of all the project\'s functions. You can use the query params to filter your results.
         * @summary List functions
         * @param {FunctionsApiListAllFunctionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllFunctions(requestParameters: FunctionsApiListAllFunctionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FunctionList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllFunctions(requestParameters.queries, requestParameters.search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of all the project\'s code deployments. You can use the query params to filter your results.
         * @summary List deployments
         * @param {FunctionsApiListDeploymentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDeployments(requestParameters: FunctionsApiListDeploymentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeploymentList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDeployments(requestParameters.functionId, requestParameters.queries, requestParameters.search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of all the current user function execution logs. You can use the query params to filter your results.
         * @summary List executions
         * @param {FunctionsApiListExecutionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listExecutions(requestParameters: FunctionsApiListExecutionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExecutionList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listExecutions(requestParameters.functionId, requestParameters.queries, requestParameters.search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of all runtimes that are currently active on your instance.
         * @summary List runtimes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRuntimes(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RuntimeList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listRuntimes(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of all variables of a specific function.
         * @summary List variables
         * @param {FunctionsApiListVariablesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listVariables(requestParameters: FunctionsApiListVariablesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariableList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listVariables(requestParameters.functionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Trigger a function execution. The returned object will return you the current execution status. You can ping the `Get Execution` endpoint to get updates on the current execution status. Once this endpoint is called, your function execution process will start asynchronously.
         * @summary Create execution
         * @param {FunctionsApiTriggerExecutionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async triggerExecution(requestParameters: FunctionsApiTriggerExecutionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Execution>> {
            const functionsTriggerExecutionRequest: FunctionsTriggerExecutionRequest = {
                body: requestParameters.body,
                async: requestParameters.async,
                path: requestParameters.path,
                method: requestParameters.method,
                headers: requestParameters.headers
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.triggerExecution(requestParameters.functionId, functionsTriggerExecutionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update function by its unique ID.
         * @summary Update function
         * @param {FunctionsApiUpdateByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateById(requestParameters: FunctionsApiUpdateByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Function>> {
            const functionsUpdateByIdRequest: FunctionsUpdateByIdRequest = {
                name: requestParameters.name,
                runtime: requestParameters.runtime,
                execute: requestParameters.execute,
                events: requestParameters.events,
                schedule: requestParameters.schedule,
                timeout: requestParameters.timeout,
                enabled: requestParameters.enabled,
                logging: requestParameters.logging,
                entrypoint: requestParameters.entrypoint,
                commands: requestParameters.commands,
                installationId: requestParameters.installationId,
                providerRepositoryId: requestParameters.providerRepositoryId,
                providerBranch: requestParameters.providerBranch,
                providerSilentMode: requestParameters.providerSilentMode,
                providerRootDirectory: requestParameters.providerRootDirectory
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateById(requestParameters.functionId, functionsUpdateByIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update the function code deployment ID using the unique function ID. Use this endpoint to switch the code deployment that should be executed by the execution endpoint.
         * @summary Update function deployment
         * @param {FunctionsApiUpdateDeploymentFunctionCodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDeploymentFunctionCode(requestParameters: FunctionsApiUpdateDeploymentFunctionCodeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Function>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDeploymentFunctionCode(requestParameters.functionId, requestParameters.deploymentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update variable by its unique ID.
         * @summary Update variable
         * @param {FunctionsApiUpdateVariableByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateVariableById(requestParameters: FunctionsApiUpdateVariableByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Variable>> {
            const functionsUpdateVariableByIdRequest: FunctionsUpdateVariableByIdRequest = {
                key: requestParameters.key,
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateVariableById(requestParameters.functionId, requestParameters.variableId, functionsUpdateVariableByIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FunctionsApi - factory interface
 * @export
 */
export const FunctionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FunctionsApiFp(configuration)
    return {
        /**
         * Create a new build for an Appwrite Function deployment. This endpoint can be used to retry a failed build.
         * @summary Create build
         * @param {FunctionsApiCreateBuildRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBuild(requestParameters: FunctionsApiCreateBuildRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createBuild(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new function code deployment. Use this endpoint to upload a new version of your code function. To execute your newly uploaded code, you\'ll need to update the function\'s deployment to use your new deployment UID.  This endpoint accepts a tar.gz file compressed with your code. Make sure to include any dependencies your code has within the compressed file. You can learn more about code packaging in the [Appwrite Cloud Functions tutorial](https://appwrite.io/docs/functions).  Use the \"command\" param to set the entrypoint used to execute your code.
         * @summary Create deployment
         * @param {FunctionsApiCreateDeploymentFunctionCodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDeploymentFunctionCode(requestParameters: FunctionsApiCreateDeploymentFunctionCodeRequest, options?: AxiosRequestConfig): AxiosPromise<Deployment> {
            return localVarFp.createDeploymentFunctionCode(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new function. You can pass a list of [permissions](https://appwrite.io/docs/permissions) to allow different project users or team with access to execute the function using the client API.
         * @summary Create function
         * @param {FunctionsApiCreateNewFunctionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewFunction(requestParameters: FunctionsApiCreateNewFunctionRequest, options?: AxiosRequestConfig): AxiosPromise<Function> {
            return localVarFp.createNewFunction(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new function environment variable. These variables can be accessed in the function at runtime as environment variables.
         * @summary Create variable
         * @param {FunctionsApiCreateVariableRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVariable(requestParameters: FunctionsApiCreateVariableRequest, options?: AxiosRequestConfig): AxiosPromise<Variable> {
            return localVarFp.createVariable(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a function by its unique ID.
         * @summary Delete function
         * @param {FunctionsApiDeleteByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById(requestParameters: FunctionsApiDeleteByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a code deployment by its unique ID.
         * @summary Delete deployment
         * @param {FunctionsApiDeleteDeploymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDeployment(requestParameters: FunctionsApiDeleteDeploymentRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteDeployment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a variable by its unique ID.
         * @summary Delete variable
         * @param {FunctionsApiDeleteVariableByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVariableById(requestParameters: FunctionsApiDeleteVariableByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteVariableById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a function by its unique ID.
         * @summary Get function
         * @param {FunctionsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: FunctionsApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Function> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a code deployment by its unique ID.
         * @summary Get deployment
         * @param {FunctionsApiGetDeploymentByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeploymentById(requestParameters: FunctionsApiGetDeploymentByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Deployment> {
            return localVarFp.getDeploymentById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a Deployment\'s contents by its unique ID. This endpoint supports range requests for partial or streaming file download.
         * @summary Download Deployment
         * @param {FunctionsApiGetDeploymentContentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeploymentContents(requestParameters: FunctionsApiGetDeploymentContentsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getDeploymentContents(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a function execution log by its unique ID.
         * @summary Get execution
         * @param {FunctionsApiGetExecutionLogRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExecutionLog(requestParameters: FunctionsApiGetExecutionLogRequest, options?: AxiosRequestConfig): AxiosPromise<Execution> {
            return localVarFp.getExecutionLog(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a variable by its unique ID.
         * @summary Get variable
         * @param {FunctionsApiGetVariableByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariableById(requestParameters: FunctionsApiGetVariableByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Variable> {
            return localVarFp.getVariableById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of all the project\'s functions. You can use the query params to filter your results.
         * @summary List functions
         * @param {FunctionsApiListAllFunctionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllFunctions(requestParameters: FunctionsApiListAllFunctionsRequest, options?: AxiosRequestConfig): AxiosPromise<FunctionList> {
            return localVarFp.listAllFunctions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of all the project\'s code deployments. You can use the query params to filter your results.
         * @summary List deployments
         * @param {FunctionsApiListDeploymentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDeployments(requestParameters: FunctionsApiListDeploymentsRequest, options?: AxiosRequestConfig): AxiosPromise<DeploymentList> {
            return localVarFp.listDeployments(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of all the current user function execution logs. You can use the query params to filter your results.
         * @summary List executions
         * @param {FunctionsApiListExecutionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listExecutions(requestParameters: FunctionsApiListExecutionsRequest, options?: AxiosRequestConfig): AxiosPromise<ExecutionList> {
            return localVarFp.listExecutions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of all runtimes that are currently active on your instance.
         * @summary List runtimes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRuntimes(options?: AxiosRequestConfig): AxiosPromise<RuntimeList> {
            return localVarFp.listRuntimes(options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of all variables of a specific function.
         * @summary List variables
         * @param {FunctionsApiListVariablesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVariables(requestParameters: FunctionsApiListVariablesRequest, options?: AxiosRequestConfig): AxiosPromise<VariableList> {
            return localVarFp.listVariables(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Trigger a function execution. The returned object will return you the current execution status. You can ping the `Get Execution` endpoint to get updates on the current execution status. Once this endpoint is called, your function execution process will start asynchronously.
         * @summary Create execution
         * @param {FunctionsApiTriggerExecutionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        triggerExecution(requestParameters: FunctionsApiTriggerExecutionRequest, options?: AxiosRequestConfig): AxiosPromise<Execution> {
            return localVarFp.triggerExecution(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update function by its unique ID.
         * @summary Update function
         * @param {FunctionsApiUpdateByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateById(requestParameters: FunctionsApiUpdateByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Function> {
            return localVarFp.updateById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the function code deployment ID using the unique function ID. Use this endpoint to switch the code deployment that should be executed by the execution endpoint.
         * @summary Update function deployment
         * @param {FunctionsApiUpdateDeploymentFunctionCodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDeploymentFunctionCode(requestParameters: FunctionsApiUpdateDeploymentFunctionCodeRequest, options?: AxiosRequestConfig): AxiosPromise<Function> {
            return localVarFp.updateDeploymentFunctionCode(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update variable by its unique ID.
         * @summary Update variable
         * @param {FunctionsApiUpdateVariableByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVariableById(requestParameters: FunctionsApiUpdateVariableByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Variable> {
            return localVarFp.updateVariableById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createBuild operation in FunctionsApi.
 * @export
 * @interface FunctionsApiCreateBuildRequest
 */
export type FunctionsApiCreateBuildRequest = {
    
    /**
    * Function ID.
    * @type {string}
    * @memberof FunctionsApiCreateBuild
    */
    readonly functionId: string
    
    /**
    * Deployment ID.
    * @type {string}
    * @memberof FunctionsApiCreateBuild
    */
    readonly deploymentId: string
    
    /**
    * Build unique ID.
    * @type {string}
    * @memberof FunctionsApiCreateBuild
    */
    readonly buildId: string
    
}

/**
 * Request parameters for createDeploymentFunctionCode operation in FunctionsApi.
 * @export
 * @interface FunctionsApiCreateDeploymentFunctionCodeRequest
 */
export type FunctionsApiCreateDeploymentFunctionCodeRequest = {
    
    /**
    * Function ID.
    * @type {string}
    * @memberof FunctionsApiCreateDeploymentFunctionCode
    */
    readonly functionId: string
    
    /**
    * Gzip file with your code package. When used with the Appwrite CLI, pass the path to your code directory, and the CLI will automatically package your code. Use a path that is within the current directory.
    * @type {string}
    * @memberof FunctionsApiCreateDeploymentFunctionCode
    */
    readonly code: string
    
    /**
    * Automatically activate the deployment when it is finished building.
    * @type {boolean}
    * @memberof FunctionsApiCreateDeploymentFunctionCode
    */
    readonly activate: boolean
    
    /**
    * Entrypoint File.
    * @type {string}
    * @memberof FunctionsApiCreateDeploymentFunctionCode
    */
    readonly entrypoint?: string
    
    /**
    * Build Commands.
    * @type {string}
    * @memberof FunctionsApiCreateDeploymentFunctionCode
    */
    readonly commands?: string
    
} & FunctionsCreateDeploymentFunctionCodeRequest

/**
 * Request parameters for createNewFunction operation in FunctionsApi.
 * @export
 * @interface FunctionsApiCreateNewFunctionRequest
 */
export type FunctionsApiCreateNewFunctionRequest = {
    
} & FunctionsCreateNewFunctionRequest

/**
 * Request parameters for createVariable operation in FunctionsApi.
 * @export
 * @interface FunctionsApiCreateVariableRequest
 */
export type FunctionsApiCreateVariableRequest = {
    
    /**
    * Function unique ID.
    * @type {string}
    * @memberof FunctionsApiCreateVariable
    */
    readonly functionId: string
    
} & FunctionsCreateVariableRequest

/**
 * Request parameters for deleteById operation in FunctionsApi.
 * @export
 * @interface FunctionsApiDeleteByIdRequest
 */
export type FunctionsApiDeleteByIdRequest = {
    
    /**
    * Function ID.
    * @type {string}
    * @memberof FunctionsApiDeleteById
    */
    readonly functionId: string
    
}

/**
 * Request parameters for deleteDeployment operation in FunctionsApi.
 * @export
 * @interface FunctionsApiDeleteDeploymentRequest
 */
export type FunctionsApiDeleteDeploymentRequest = {
    
    /**
    * Function ID.
    * @type {string}
    * @memberof FunctionsApiDeleteDeployment
    */
    readonly functionId: string
    
    /**
    * Deployment ID.
    * @type {string}
    * @memberof FunctionsApiDeleteDeployment
    */
    readonly deploymentId: string
    
}

/**
 * Request parameters for deleteVariableById operation in FunctionsApi.
 * @export
 * @interface FunctionsApiDeleteVariableByIdRequest
 */
export type FunctionsApiDeleteVariableByIdRequest = {
    
    /**
    * Function unique ID.
    * @type {string}
    * @memberof FunctionsApiDeleteVariableById
    */
    readonly functionId: string
    
    /**
    * Variable unique ID.
    * @type {string}
    * @memberof FunctionsApiDeleteVariableById
    */
    readonly variableId: string
    
}

/**
 * Request parameters for getById operation in FunctionsApi.
 * @export
 * @interface FunctionsApiGetByIdRequest
 */
export type FunctionsApiGetByIdRequest = {
    
    /**
    * Function ID.
    * @type {string}
    * @memberof FunctionsApiGetById
    */
    readonly functionId: string
    
}

/**
 * Request parameters for getDeploymentById operation in FunctionsApi.
 * @export
 * @interface FunctionsApiGetDeploymentByIdRequest
 */
export type FunctionsApiGetDeploymentByIdRequest = {
    
    /**
    * Function ID.
    * @type {string}
    * @memberof FunctionsApiGetDeploymentById
    */
    readonly functionId: string
    
    /**
    * Deployment ID.
    * @type {string}
    * @memberof FunctionsApiGetDeploymentById
    */
    readonly deploymentId: string
    
}

/**
 * Request parameters for getDeploymentContents operation in FunctionsApi.
 * @export
 * @interface FunctionsApiGetDeploymentContentsRequest
 */
export type FunctionsApiGetDeploymentContentsRequest = {
    
    /**
    * Function ID.
    * @type {string}
    * @memberof FunctionsApiGetDeploymentContents
    */
    readonly functionId: string
    
    /**
    * Deployment ID.
    * @type {string}
    * @memberof FunctionsApiGetDeploymentContents
    */
    readonly deploymentId: string
    
}

/**
 * Request parameters for getExecutionLog operation in FunctionsApi.
 * @export
 * @interface FunctionsApiGetExecutionLogRequest
 */
export type FunctionsApiGetExecutionLogRequest = {
    
    /**
    * Function ID.
    * @type {string}
    * @memberof FunctionsApiGetExecutionLog
    */
    readonly functionId: string
    
    /**
    * Execution ID.
    * @type {string}
    * @memberof FunctionsApiGetExecutionLog
    */
    readonly executionId: string
    
}

/**
 * Request parameters for getVariableById operation in FunctionsApi.
 * @export
 * @interface FunctionsApiGetVariableByIdRequest
 */
export type FunctionsApiGetVariableByIdRequest = {
    
    /**
    * Function unique ID.
    * @type {string}
    * @memberof FunctionsApiGetVariableById
    */
    readonly functionId: string
    
    /**
    * Variable unique ID.
    * @type {string}
    * @memberof FunctionsApiGetVariableById
    */
    readonly variableId: string
    
}

/**
 * Request parameters for listAllFunctions operation in FunctionsApi.
 * @export
 * @interface FunctionsApiListAllFunctionsRequest
 */
export type FunctionsApiListAllFunctionsRequest = {
    
    /**
    * Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: name, enabled, runtime, deployment, schedule, scheduleNext, schedulePrevious, timeout, entrypoint, commands, installationId
    * @type {Array<string>}
    * @memberof FunctionsApiListAllFunctions
    */
    readonly queries?: Array<string>
    
    /**
    * Search term to filter your list results. Max length: 256 chars.
    * @type {string}
    * @memberof FunctionsApiListAllFunctions
    */
    readonly search?: string
    
}

/**
 * Request parameters for listDeployments operation in FunctionsApi.
 * @export
 * @interface FunctionsApiListDeploymentsRequest
 */
export type FunctionsApiListDeploymentsRequest = {
    
    /**
    * Function ID.
    * @type {string}
    * @memberof FunctionsApiListDeployments
    */
    readonly functionId: string
    
    /**
    * Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: size, buildId, activate, entrypoint, commands
    * @type {Array<string>}
    * @memberof FunctionsApiListDeployments
    */
    readonly queries?: Array<string>
    
    /**
    * Search term to filter your list results. Max length: 256 chars.
    * @type {string}
    * @memberof FunctionsApiListDeployments
    */
    readonly search?: string
    
}

/**
 * Request parameters for listExecutions operation in FunctionsApi.
 * @export
 * @interface FunctionsApiListExecutionsRequest
 */
export type FunctionsApiListExecutionsRequest = {
    
    /**
    * Function ID.
    * @type {string}
    * @memberof FunctionsApiListExecutions
    */
    readonly functionId: string
    
    /**
    * Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: trigger, status, responseStatusCode, duration
    * @type {Array<string>}
    * @memberof FunctionsApiListExecutions
    */
    readonly queries?: Array<string>
    
    /**
    * Search term to filter your list results. Max length: 256 chars.
    * @type {string}
    * @memberof FunctionsApiListExecutions
    */
    readonly search?: string
    
}

/**
 * Request parameters for listVariables operation in FunctionsApi.
 * @export
 * @interface FunctionsApiListVariablesRequest
 */
export type FunctionsApiListVariablesRequest = {
    
    /**
    * Function unique ID.
    * @type {string}
    * @memberof FunctionsApiListVariables
    */
    readonly functionId: string
    
}

/**
 * Request parameters for triggerExecution operation in FunctionsApi.
 * @export
 * @interface FunctionsApiTriggerExecutionRequest
 */
export type FunctionsApiTriggerExecutionRequest = {
    
    /**
    * Function ID.
    * @type {string}
    * @memberof FunctionsApiTriggerExecution
    */
    readonly functionId: string
    
} & FunctionsTriggerExecutionRequest

/**
 * Request parameters for updateById operation in FunctionsApi.
 * @export
 * @interface FunctionsApiUpdateByIdRequest
 */
export type FunctionsApiUpdateByIdRequest = {
    
    /**
    * Function ID.
    * @type {string}
    * @memberof FunctionsApiUpdateById
    */
    readonly functionId: string
    
} & FunctionsUpdateByIdRequest

/**
 * Request parameters for updateDeploymentFunctionCode operation in FunctionsApi.
 * @export
 * @interface FunctionsApiUpdateDeploymentFunctionCodeRequest
 */
export type FunctionsApiUpdateDeploymentFunctionCodeRequest = {
    
    /**
    * Function ID.
    * @type {string}
    * @memberof FunctionsApiUpdateDeploymentFunctionCode
    */
    readonly functionId: string
    
    /**
    * Deployment ID.
    * @type {string}
    * @memberof FunctionsApiUpdateDeploymentFunctionCode
    */
    readonly deploymentId: string
    
}

/**
 * Request parameters for updateVariableById operation in FunctionsApi.
 * @export
 * @interface FunctionsApiUpdateVariableByIdRequest
 */
export type FunctionsApiUpdateVariableByIdRequest = {
    
    /**
    * Function unique ID.
    * @type {string}
    * @memberof FunctionsApiUpdateVariableById
    */
    readonly functionId: string
    
    /**
    * Variable unique ID.
    * @type {string}
    * @memberof FunctionsApiUpdateVariableById
    */
    readonly variableId: string
    
} & FunctionsUpdateVariableByIdRequest

/**
 * FunctionsApiGenerated - object-oriented interface
 * @export
 * @class FunctionsApiGenerated
 * @extends {BaseAPI}
 */
export class FunctionsApiGenerated extends BaseAPI {
    /**
     * Create a new build for an Appwrite Function deployment. This endpoint can be used to retry a failed build.
     * @summary Create build
     * @param {FunctionsApiCreateBuildRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionsApiGenerated
     */
    public createBuild(requestParameters: FunctionsApiCreateBuildRequest, options?: AxiosRequestConfig) {
        return FunctionsApiFp(this.configuration).createBuild(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new function code deployment. Use this endpoint to upload a new version of your code function. To execute your newly uploaded code, you\'ll need to update the function\'s deployment to use your new deployment UID.  This endpoint accepts a tar.gz file compressed with your code. Make sure to include any dependencies your code has within the compressed file. You can learn more about code packaging in the [Appwrite Cloud Functions tutorial](https://appwrite.io/docs/functions).  Use the \"command\" param to set the entrypoint used to execute your code.
     * @summary Create deployment
     * @param {FunctionsApiCreateDeploymentFunctionCodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionsApiGenerated
     */
    public createDeploymentFunctionCode(requestParameters: FunctionsApiCreateDeploymentFunctionCodeRequest, options?: AxiosRequestConfig) {
        return FunctionsApiFp(this.configuration).createDeploymentFunctionCode(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new function. You can pass a list of [permissions](https://appwrite.io/docs/permissions) to allow different project users or team with access to execute the function using the client API.
     * @summary Create function
     * @param {FunctionsApiCreateNewFunctionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionsApiGenerated
     */
    public createNewFunction(requestParameters: FunctionsApiCreateNewFunctionRequest, options?: AxiosRequestConfig) {
        return FunctionsApiFp(this.configuration).createNewFunction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new function environment variable. These variables can be accessed in the function at runtime as environment variables.
     * @summary Create variable
     * @param {FunctionsApiCreateVariableRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionsApiGenerated
     */
    public createVariable(requestParameters: FunctionsApiCreateVariableRequest, options?: AxiosRequestConfig) {
        return FunctionsApiFp(this.configuration).createVariable(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a function by its unique ID.
     * @summary Delete function
     * @param {FunctionsApiDeleteByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionsApiGenerated
     */
    public deleteById(requestParameters: FunctionsApiDeleteByIdRequest, options?: AxiosRequestConfig) {
        return FunctionsApiFp(this.configuration).deleteById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a code deployment by its unique ID.
     * @summary Delete deployment
     * @param {FunctionsApiDeleteDeploymentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionsApiGenerated
     */
    public deleteDeployment(requestParameters: FunctionsApiDeleteDeploymentRequest, options?: AxiosRequestConfig) {
        return FunctionsApiFp(this.configuration).deleteDeployment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a variable by its unique ID.
     * @summary Delete variable
     * @param {FunctionsApiDeleteVariableByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionsApiGenerated
     */
    public deleteVariableById(requestParameters: FunctionsApiDeleteVariableByIdRequest, options?: AxiosRequestConfig) {
        return FunctionsApiFp(this.configuration).deleteVariableById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a function by its unique ID.
     * @summary Get function
     * @param {FunctionsApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionsApiGenerated
     */
    public getById(requestParameters: FunctionsApiGetByIdRequest, options?: AxiosRequestConfig) {
        return FunctionsApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a code deployment by its unique ID.
     * @summary Get deployment
     * @param {FunctionsApiGetDeploymentByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionsApiGenerated
     */
    public getDeploymentById(requestParameters: FunctionsApiGetDeploymentByIdRequest, options?: AxiosRequestConfig) {
        return FunctionsApiFp(this.configuration).getDeploymentById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a Deployment\'s contents by its unique ID. This endpoint supports range requests for partial or streaming file download.
     * @summary Download Deployment
     * @param {FunctionsApiGetDeploymentContentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionsApiGenerated
     */
    public getDeploymentContents(requestParameters: FunctionsApiGetDeploymentContentsRequest, options?: AxiosRequestConfig) {
        return FunctionsApiFp(this.configuration).getDeploymentContents(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a function execution log by its unique ID.
     * @summary Get execution
     * @param {FunctionsApiGetExecutionLogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionsApiGenerated
     */
    public getExecutionLog(requestParameters: FunctionsApiGetExecutionLogRequest, options?: AxiosRequestConfig) {
        return FunctionsApiFp(this.configuration).getExecutionLog(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a variable by its unique ID.
     * @summary Get variable
     * @param {FunctionsApiGetVariableByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionsApiGenerated
     */
    public getVariableById(requestParameters: FunctionsApiGetVariableByIdRequest, options?: AxiosRequestConfig) {
        return FunctionsApiFp(this.configuration).getVariableById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of all the project\'s functions. You can use the query params to filter your results.
     * @summary List functions
     * @param {FunctionsApiListAllFunctionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionsApiGenerated
     */
    public listAllFunctions(requestParameters: FunctionsApiListAllFunctionsRequest, options?: AxiosRequestConfig) {
        return FunctionsApiFp(this.configuration).listAllFunctions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of all the project\'s code deployments. You can use the query params to filter your results.
     * @summary List deployments
     * @param {FunctionsApiListDeploymentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionsApiGenerated
     */
    public listDeployments(requestParameters: FunctionsApiListDeploymentsRequest, options?: AxiosRequestConfig) {
        return FunctionsApiFp(this.configuration).listDeployments(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of all the current user function execution logs. You can use the query params to filter your results.
     * @summary List executions
     * @param {FunctionsApiListExecutionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionsApiGenerated
     */
    public listExecutions(requestParameters: FunctionsApiListExecutionsRequest, options?: AxiosRequestConfig) {
        return FunctionsApiFp(this.configuration).listExecutions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of all runtimes that are currently active on your instance.
     * @summary List runtimes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionsApiGenerated
     */
    public listRuntimes(options?: AxiosRequestConfig) {
        return FunctionsApiFp(this.configuration).listRuntimes(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of all variables of a specific function.
     * @summary List variables
     * @param {FunctionsApiListVariablesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionsApiGenerated
     */
    public listVariables(requestParameters: FunctionsApiListVariablesRequest, options?: AxiosRequestConfig) {
        return FunctionsApiFp(this.configuration).listVariables(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Trigger a function execution. The returned object will return you the current execution status. You can ping the `Get Execution` endpoint to get updates on the current execution status. Once this endpoint is called, your function execution process will start asynchronously.
     * @summary Create execution
     * @param {FunctionsApiTriggerExecutionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionsApiGenerated
     */
    public triggerExecution(requestParameters: FunctionsApiTriggerExecutionRequest, options?: AxiosRequestConfig) {
        return FunctionsApiFp(this.configuration).triggerExecution(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update function by its unique ID.
     * @summary Update function
     * @param {FunctionsApiUpdateByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionsApiGenerated
     */
    public updateById(requestParameters: FunctionsApiUpdateByIdRequest, options?: AxiosRequestConfig) {
        return FunctionsApiFp(this.configuration).updateById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the function code deployment ID using the unique function ID. Use this endpoint to switch the code deployment that should be executed by the execution endpoint.
     * @summary Update function deployment
     * @param {FunctionsApiUpdateDeploymentFunctionCodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionsApiGenerated
     */
    public updateDeploymentFunctionCode(requestParameters: FunctionsApiUpdateDeploymentFunctionCodeRequest, options?: AxiosRequestConfig) {
        return FunctionsApiFp(this.configuration).updateDeploymentFunctionCode(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update variable by its unique ID.
     * @summary Update variable
     * @param {FunctionsApiUpdateVariableByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionsApiGenerated
     */
    public updateVariableById(requestParameters: FunctionsApiUpdateVariableByIdRequest, options?: AxiosRequestConfig) {
        return FunctionsApiFp(this.configuration).updateVariableById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
