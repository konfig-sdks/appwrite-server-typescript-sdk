/* tslint:disable */
/* eslint-disable */
/*
Appwrite

Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)

The version of the OpenAPI document: 1.5.0
Contact: team@appwrite.io

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Bucket } from '../models';
// @ts-ignore
import { BucketList } from '../models';
// @ts-ignore
import { FileList } from '../models';
// @ts-ignore
import { StorageCreateFileRequest } from '../models';
// @ts-ignore
import { StorageCreateNewBucketRequest } from '../models';
// @ts-ignore
import { StorageUpdateBucketByIdRequest } from '../models';
// @ts-ignore
import { StorageUpdateFileByIdRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * StorageApi - axios parameter creator
 * @export
 */
export const StorageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new file. Before using this route, you should create a new bucket resource using either a [server integration](https://appwrite.io/docs/server/storage#storageCreateBucket) API or directly from your Appwrite console.  Larger files should be uploaded using multiple requests with the [content-range](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Range) header to send a partial request with a maximum supported chunk of `5MB`. The `content-range` header values should always be in bytes.  When the first request is sent, the server will return the **File** object, and the subsequent part request must include the file\'s **id** in `x-appwrite-id` header to allow the server to know that the partial upload is for the existing file and not for a new one.  If you\'re creating a new file using one of the Appwrite SDKs, all the chunking logic will be managed by the SDK internally. 
         * @summary Create file
         * @param {string} bucketId Storage bucket unique ID. You can create a new storage bucket using the Storage service [server integration](https://appwrite.io/docs/server/storage#createBucket).
         * @param {string} fileId File ID. Choose a custom ID or generate a random ID with &#x60;ID.unique()&#x60;. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can\\\&#39;t start with a special char. Max length is 36 chars.
         * @param {string} file Binary file. Appwrite SDKs provide helpers to handle file input. [Learn about file input](https://appwrite.io/docs/storage#file-input).
         * @param {Array<string>} [permissions] An array of permission strings. By default, only the current user is granted all permissions. [Learn more about permissions](https://appwrite.io/docs/permissions).
         * @param {StorageCreateFileRequest} [storageCreateFileRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFile: async (bucketId: string, fileId: string, file: string, permissions?: Array<string>, storageCreateFileRequest?: StorageCreateFileRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bucketId' is not null or undefined
            assertParamExists('createFile', 'bucketId', bucketId)
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('createFile', 'fileId', fileId)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('createFile', 'file', file)
            const localVarPath = `/storage/buckets/{bucketId}/files`
                .replace(`{${"bucketId"}}`, encodeURIComponent(String(bucketId !== undefined ? bucketId : `-bucketId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            const addFormParam = async (name: string, data: any, isBinary: boolean, isPrimitiveType: boolean) => {
                if (isBinary) {
                    if (data instanceof Uint8Array) {
                        // Handle Buffer data
                        const filetype = await fromBuffer(data)
                        const filename = filetype === undefined ? name : `${name}.${filetype.ext}`
                        localVarFormParams.append(name, data as any, filename);
                    } else if ("name" in data) {
                        // File instances in browsers and Node.js have the
                        // "name" property "Duck typing" files to handle browser
                        // File class or Node.js File class
                        // Web: https://developer.mozilla.org/en-US/docs/Web/API/File
                        // Node.js: https://nodejs.org/api/buffer.html#new-bufferfilesources-filename-options
                        if (isBrowser()) {
                            // FormData in browser can accept File/Blob directly
                            localVarFormParams.append(name, data, data.name);
                        } else {
                            // FormData in Node.js can only accept raw Buffer so convert before passing
                            const bytes = await data.arrayBuffer()
                            const buffer = Buffer.from(bytes)
                            localVarFormParams.append(name, buffer, data.name);
                        }
                    }
                } else {
                    if (isPrimitiveType) {
                        /**
                         * FormData can only accept string or Blob so we need to convert
                         * non-string primitives to string. We also need to convert
                         */
                        if (typeof data === "object") {
                          localVarFormParams.append(name, JSON.stringify(data));
                        } else {
                          localVarFormParams.append(name, data);
                        }
                    } else {
                        if (isBrowser()) {
                            localVarFormParams.append(name, new Blob([JSON.stringify(data)], { type: "application/json" }))
                        } else {
                            localVarFormParams.append(name, JSON.stringify(data), { type: "application/json", filename: "data.json" });
                        }
                    }
                }
            }
            if (!isBrowser()) Object.assign(localVarHeaderParameter, localVarFormParams.getHeaders());

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

            if (fileId !== undefined) {
                await addFormParam('fileId', fileId, false, true)
            }
    
            if (file !== undefined) {
                await addFormParam('file', file, false, true)
            }
            if (permissions) {
            localVarFormParams.append('permissions', permissions.join(COLLECTION_FORMATS.csv));
            }

    
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;
            requestBeforeHook({
                requestBody: storageCreateFileRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/storage/buckets/{bucketId}/files',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new storage bucket.
         * @summary Create bucket
         * @param {StorageCreateNewBucketRequest} [storageCreateNewBucketRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewBucket: async (storageCreateNewBucketRequest?: StorageCreateNewBucketRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/storage/buckets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: storageCreateNewBucketRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/storage/buckets',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(storageCreateNewBucketRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a storage bucket by its unique ID.
         * @summary Delete bucket
         * @param {string} bucketId Bucket unique ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBucketById: async (bucketId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bucketId' is not null or undefined
            assertParamExists('deleteBucketById', 'bucketId', bucketId)
            const localVarPath = `/storage/buckets/{bucketId}`
                .replace(`{${"bucketId"}}`, encodeURIComponent(String(bucketId !== undefined ? bucketId : `-bucketId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/storage/buckets/{bucketId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a file by its unique ID. Only users with write permissions have access to delete this resource.
         * @summary Delete File
         * @param {string} bucketId Storage bucket unique ID. You can create a new storage bucket using the Storage service [server integration](https://appwrite.io/docs/server/storage#createBucket).
         * @param {string} fileId File ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFileById: async (bucketId: string, fileId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bucketId' is not null or undefined
            assertParamExists('deleteFileById', 'bucketId', bucketId)
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('deleteFileById', 'fileId', fileId)
            const localVarPath = `/storage/buckets/{bucketId}/files/{fileId}`
                .replace(`{${"bucketId"}}`, encodeURIComponent(String(bucketId !== undefined ? bucketId : `-bucketId-`)))
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId !== undefined ? fileId : `-fileId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/storage/buckets/{bucketId}/files/{fileId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a storage bucket by its unique ID. This endpoint response returns a JSON object with the storage bucket metadata.
         * @summary Get bucket
         * @param {string} bucketId Bucket unique ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBucketById: async (bucketId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bucketId' is not null or undefined
            assertParamExists('getBucketById', 'bucketId', bucketId)
            const localVarPath = `/storage/buckets/{bucketId}`
                .replace(`{${"bucketId"}}`, encodeURIComponent(String(bucketId !== undefined ? bucketId : `-bucketId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/storage/buckets/{bucketId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a file by its unique ID. This endpoint response returns a JSON object with the file metadata.
         * @summary Get file
         * @param {string} bucketId Storage bucket unique ID. You can create a new storage bucket using the Storage service [server integration](https://appwrite.io/docs/server/storage#createBucket).
         * @param {string} fileId File ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileById: async (bucketId: string, fileId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bucketId' is not null or undefined
            assertParamExists('getFileById', 'bucketId', bucketId)
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('getFileById', 'fileId', fileId)
            const localVarPath = `/storage/buckets/{bucketId}/files/{fileId}`
                .replace(`{${"bucketId"}}`, encodeURIComponent(String(bucketId !== undefined ? bucketId : `-bucketId-`)))
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId !== undefined ? fileId : `-fileId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/storage/buckets/{bucketId}/files/{fileId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a file content by its unique ID. The endpoint response return with a \'Content-Disposition: attachment\' header that tells the browser to start downloading the file to user downloads directory.
         * @summary Get file for download
         * @param {string} bucketId Storage bucket ID. You can create a new storage bucket using the Storage service [server integration](https://appwrite.io/docs/server/storage#createBucket).
         * @param {string} fileId File ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileDownload: async (bucketId: string, fileId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bucketId' is not null or undefined
            assertParamExists('getFileDownload', 'bucketId', bucketId)
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('getFileDownload', 'fileId', fileId)
            const localVarPath = `/storage/buckets/{bucketId}/files/{fileId}/download`
                .replace(`{${"bucketId"}}`, encodeURIComponent(String(bucketId !== undefined ? bucketId : `-bucketId-`)))
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId !== undefined ? fileId : `-fileId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/storage/buckets/{bucketId}/files/{fileId}/download',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a file preview image. Currently, this method supports preview for image files (jpg, png, and gif), other supported formats, like pdf, docs, slides, and spreadsheets, will return the file icon image. You can also pass query string arguments for cutting and resizing your preview image. Preview is supported only for image files smaller than 10MB.
         * @summary Get file preview
         * @param {string} bucketId Storage bucket unique ID. You can create a new storage bucket using the Storage service [server integration](https://appwrite.io/docs/server/storage#createBucket).
         * @param {string} fileId File ID
         * @param {number} [width] Resize preview image width, Pass an integer between 0 to 4000.
         * @param {number} [height] Resize preview image height, Pass an integer between 0 to 4000.
         * @param {'center' | 'top-left' | 'top' | 'top-right' | 'left' | 'right' | 'bottom-left' | 'bottom' | 'bottom-right'} [gravity] Image crop gravity. Can be one of center,top-left,top,top-right,left,right,bottom-left,bottom,bottom-right
         * @param {number} [quality] Preview image quality. Pass an integer between 0 to 100. Defaults to 100.
         * @param {number} [borderWidth] Preview image border in pixels. Pass an integer between 0 to 100. Defaults to 0.
         * @param {string} [borderColor] Preview image border color. Use a valid HEX color, no # is needed for prefix.
         * @param {number} [borderRadius] Preview image border radius in pixels. Pass an integer between 0 to 4000.
         * @param {number} [opacity] Preview image opacity. Only works with images having an alpha channel (like png). Pass a number between 0 to 1.
         * @param {number} [rotation] Preview image rotation in degrees. Pass an integer between -360 and 360.
         * @param {string} [background] Preview image background color. Only works with transparent images (png). Use a valid HEX color, no # is needed for prefix.
         * @param {'jpg' | 'jpeg' | 'gif' | 'png' | 'webp'} [output] Output format type (jpeg, jpg, png, gif and webp).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFilePreviewImage: async (bucketId: string, fileId: string, width?: number, height?: number, gravity?: 'center' | 'top-left' | 'top' | 'top-right' | 'left' | 'right' | 'bottom-left' | 'bottom' | 'bottom-right', quality?: number, borderWidth?: number, borderColor?: string, borderRadius?: number, opacity?: number, rotation?: number, background?: string, output?: 'jpg' | 'jpeg' | 'gif' | 'png' | 'webp', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bucketId' is not null or undefined
            assertParamExists('getFilePreviewImage', 'bucketId', bucketId)
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('getFilePreviewImage', 'fileId', fileId)
            const localVarPath = `/storage/buckets/{bucketId}/files/{fileId}/preview`
                .replace(`{${"bucketId"}}`, encodeURIComponent(String(bucketId !== undefined ? bucketId : `-bucketId-`)))
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId !== undefined ? fileId : `-fileId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })
            if (width !== undefined) {
                localVarQueryParameter['width'] = width;
            }

            if (height !== undefined) {
                localVarQueryParameter['height'] = height;
            }

            if (gravity !== undefined) {
                localVarQueryParameter['gravity'] = gravity;
            }

            if (quality !== undefined) {
                localVarQueryParameter['quality'] = quality;
            }

            if (borderWidth !== undefined) {
                localVarQueryParameter['borderWidth'] = borderWidth;
            }

            if (borderColor !== undefined) {
                localVarQueryParameter['borderColor'] = borderColor;
            }

            if (borderRadius !== undefined) {
                localVarQueryParameter['borderRadius'] = borderRadius;
            }

            if (opacity !== undefined) {
                localVarQueryParameter['opacity'] = opacity;
            }

            if (rotation !== undefined) {
                localVarQueryParameter['rotation'] = rotation;
            }

            if (background !== undefined) {
                localVarQueryParameter['background'] = background;
            }

            if (output !== undefined) {
                localVarQueryParameter['output'] = output;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/storage/buckets/{bucketId}/files/{fileId}/preview',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a file content by its unique ID. This endpoint is similar to the download method but returns with no  \'Content-Disposition: attachment\' header.
         * @summary Get file for view
         * @param {string} bucketId Storage bucket unique ID. You can create a new storage bucket using the Storage service [server integration](https://appwrite.io/docs/server/storage#createBucket).
         * @param {string} fileId File ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileView: async (bucketId: string, fileId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bucketId' is not null or undefined
            assertParamExists('getFileView', 'bucketId', bucketId)
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('getFileView', 'fileId', fileId)
            const localVarPath = `/storage/buckets/{bucketId}/files/{fileId}/view`
                .replace(`{${"bucketId"}}`, encodeURIComponent(String(bucketId !== undefined ? bucketId : `-bucketId-`)))
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId !== undefined ? fileId : `-fileId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/storage/buckets/{bucketId}/files/{fileId}/view',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of all the storage buckets. You can use the query params to filter your results.
         * @summary List buckets
         * @param {Array<string>} [queries] Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: enabled, name, fileSecurity, maximumFileSize, encryption, antivirus
         * @param {string} [search] Search term to filter your list results. Max length: 256 chars.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBuckets: async (queries?: Array<string>, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/storage/buckets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            if (queries) {
                localVarQueryParameter['queries'] = queries;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/storage/buckets',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of all the user files. You can use the query params to filter your results.
         * @summary List files
         * @param {string} bucketId Storage bucket unique ID. You can create a new storage bucket using the Storage service [server integration](https://appwrite.io/docs/server/storage#createBucket).
         * @param {Array<string>} [queries] Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: name, signature, mimeType, sizeOriginal, chunksTotal, chunksUploaded
         * @param {string} [search] Search term to filter your list results. Max length: 256 chars.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFiles: async (bucketId: string, queries?: Array<string>, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bucketId' is not null or undefined
            assertParamExists('listFiles', 'bucketId', bucketId)
            const localVarPath = `/storage/buckets/{bucketId}/files`
                .replace(`{${"bucketId"}}`, encodeURIComponent(String(bucketId !== undefined ? bucketId : `-bucketId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })
            if (queries) {
                localVarQueryParameter['queries'] = queries;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/storage/buckets/{bucketId}/files',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a storage bucket by its unique ID.
         * @summary Update bucket
         * @param {string} bucketId Bucket unique ID.
         * @param {StorageUpdateBucketByIdRequest} [storageUpdateBucketByIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBucketById: async (bucketId: string, storageUpdateBucketByIdRequest?: StorageUpdateBucketByIdRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bucketId' is not null or undefined
            assertParamExists('updateBucketById', 'bucketId', bucketId)
            const localVarPath = `/storage/buckets/{bucketId}`
                .replace(`{${"bucketId"}}`, encodeURIComponent(String(bucketId !== undefined ? bucketId : `-bucketId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: storageUpdateBucketByIdRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/storage/buckets/{bucketId}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(storageUpdateBucketByIdRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a file by its unique ID. Only users with write permissions have access to update this resource.
         * @summary Update file
         * @param {string} bucketId Storage bucket unique ID. You can create a new storage bucket using the Storage service [server integration](https://appwrite.io/docs/server/storage#createBucket).
         * @param {string} fileId File unique ID.
         * @param {StorageUpdateFileByIdRequest} [storageUpdateFileByIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFileById: async (bucketId: string, fileId: string, storageUpdateFileByIdRequest?: StorageUpdateFileByIdRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bucketId' is not null or undefined
            assertParamExists('updateFileById', 'bucketId', bucketId)
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('updateFileById', 'fileId', fileId)
            const localVarPath = `/storage/buckets/{bucketId}/files/{fileId}`
                .replace(`{${"bucketId"}}`, encodeURIComponent(String(bucketId !== undefined ? bucketId : `-bucketId-`)))
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId !== undefined ? fileId : `-fileId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: storageUpdateFileByIdRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/storage/buckets/{bucketId}/files/{fileId}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(storageUpdateFileByIdRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StorageApi - functional programming interface
 * @export
 */
export const StorageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StorageApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new file. Before using this route, you should create a new bucket resource using either a [server integration](https://appwrite.io/docs/server/storage#storageCreateBucket) API or directly from your Appwrite console.  Larger files should be uploaded using multiple requests with the [content-range](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Range) header to send a partial request with a maximum supported chunk of `5MB`. The `content-range` header values should always be in bytes.  When the first request is sent, the server will return the **File** object, and the subsequent part request must include the file\'s **id** in `x-appwrite-id` header to allow the server to know that the partial upload is for the existing file and not for a new one.  If you\'re creating a new file using one of the Appwrite SDKs, all the chunking logic will be managed by the SDK internally. 
         * @summary Create file
         * @param {StorageApiCreateFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFile(requestParameters: StorageApiCreateFileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const storageCreateFileRequest: StorageCreateFileRequest = {
                fileId: requestParameters.fileId,
                file: requestParameters.file,
                permissions: requestParameters.permissions
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createFile(requestParameters.bucketId, requestParameters.fileId, requestParameters.file, requestParameters.permissions, storageCreateFileRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new storage bucket.
         * @summary Create bucket
         * @param {StorageApiCreateNewBucketRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewBucket(requestParameters: StorageApiCreateNewBucketRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Bucket>> {
            const storageCreateNewBucketRequest: StorageCreateNewBucketRequest = {
                bucketId: requestParameters.bucketId,
                name: requestParameters.name,
                permissions: requestParameters.permissions,
                fileSecurity: requestParameters.fileSecurity,
                enabled: requestParameters.enabled,
                maximumFileSize: requestParameters.maximumFileSize,
                allowedFileExtensions: requestParameters.allowedFileExtensions,
                compression: requestParameters.compression,
                encryption: requestParameters.encryption,
                antivirus: requestParameters.antivirus
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewBucket(storageCreateNewBucketRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a storage bucket by its unique ID.
         * @summary Delete bucket
         * @param {StorageApiDeleteBucketByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBucketById(requestParameters: StorageApiDeleteBucketByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBucketById(requestParameters.bucketId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a file by its unique ID. Only users with write permissions have access to delete this resource.
         * @summary Delete File
         * @param {StorageApiDeleteFileByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFileById(requestParameters: StorageApiDeleteFileByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFileById(requestParameters.bucketId, requestParameters.fileId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a storage bucket by its unique ID. This endpoint response returns a JSON object with the storage bucket metadata.
         * @summary Get bucket
         * @param {StorageApiGetBucketByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBucketById(requestParameters: StorageApiGetBucketByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Bucket>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBucketById(requestParameters.bucketId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a file by its unique ID. This endpoint response returns a JSON object with the file metadata.
         * @summary Get file
         * @param {StorageApiGetFileByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFileById(requestParameters: StorageApiGetFileByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFileById(requestParameters.bucketId, requestParameters.fileId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a file content by its unique ID. The endpoint response return with a \'Content-Disposition: attachment\' header that tells the browser to start downloading the file to user downloads directory.
         * @summary Get file for download
         * @param {StorageApiGetFileDownloadRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFileDownload(requestParameters: StorageApiGetFileDownloadRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFileDownload(requestParameters.bucketId, requestParameters.fileId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a file preview image. Currently, this method supports preview for image files (jpg, png, and gif), other supported formats, like pdf, docs, slides, and spreadsheets, will return the file icon image. You can also pass query string arguments for cutting and resizing your preview image. Preview is supported only for image files smaller than 10MB.
         * @summary Get file preview
         * @param {StorageApiGetFilePreviewImageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFilePreviewImage(requestParameters: StorageApiGetFilePreviewImageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFilePreviewImage(requestParameters.bucketId, requestParameters.fileId, requestParameters.width, requestParameters.height, requestParameters.gravity, requestParameters.quality, requestParameters.borderWidth, requestParameters.borderColor, requestParameters.borderRadius, requestParameters.opacity, requestParameters.rotation, requestParameters.background, requestParameters.output, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a file content by its unique ID. This endpoint is similar to the download method but returns with no  \'Content-Disposition: attachment\' header.
         * @summary Get file for view
         * @param {StorageApiGetFileViewRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFileView(requestParameters: StorageApiGetFileViewRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFileView(requestParameters.bucketId, requestParameters.fileId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of all the storage buckets. You can use the query params to filter your results.
         * @summary List buckets
         * @param {StorageApiListBucketsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listBuckets(requestParameters: StorageApiListBucketsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BucketList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listBuckets(requestParameters.queries, requestParameters.search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of all the user files. You can use the query params to filter your results.
         * @summary List files
         * @param {StorageApiListFilesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFiles(requestParameters: StorageApiListFilesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listFiles(requestParameters.bucketId, requestParameters.queries, requestParameters.search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a storage bucket by its unique ID.
         * @summary Update bucket
         * @param {StorageApiUpdateBucketByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBucketById(requestParameters: StorageApiUpdateBucketByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Bucket>> {
            const storageUpdateBucketByIdRequest: StorageUpdateBucketByIdRequest = {
                name: requestParameters.name,
                permissions: requestParameters.permissions,
                fileSecurity: requestParameters.fileSecurity,
                enabled: requestParameters.enabled,
                maximumFileSize: requestParameters.maximumFileSize,
                allowedFileExtensions: requestParameters.allowedFileExtensions,
                compression: requestParameters.compression,
                encryption: requestParameters.encryption,
                antivirus: requestParameters.antivirus
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBucketById(requestParameters.bucketId, storageUpdateBucketByIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a file by its unique ID. Only users with write permissions have access to update this resource.
         * @summary Update file
         * @param {StorageApiUpdateFileByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateFileById(requestParameters: StorageApiUpdateFileByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const storageUpdateFileByIdRequest: StorageUpdateFileByIdRequest = {
                name: requestParameters.name,
                permissions: requestParameters.permissions
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateFileById(requestParameters.bucketId, requestParameters.fileId, storageUpdateFileByIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StorageApi - factory interface
 * @export
 */
export const StorageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StorageApiFp(configuration)
    return {
        /**
         * Create a new file. Before using this route, you should create a new bucket resource using either a [server integration](https://appwrite.io/docs/server/storage#storageCreateBucket) API or directly from your Appwrite console.  Larger files should be uploaded using multiple requests with the [content-range](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Range) header to send a partial request with a maximum supported chunk of `5MB`. The `content-range` header values should always be in bytes.  When the first request is sent, the server will return the **File** object, and the subsequent part request must include the file\'s **id** in `x-appwrite-id` header to allow the server to know that the partial upload is for the existing file and not for a new one.  If you\'re creating a new file using one of the Appwrite SDKs, all the chunking logic will be managed by the SDK internally. 
         * @summary Create file
         * @param {StorageApiCreateFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFile(requestParameters: StorageApiCreateFileRequest, options?: AxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.createFile(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new storage bucket.
         * @summary Create bucket
         * @param {StorageApiCreateNewBucketRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewBucket(requestParameters: StorageApiCreateNewBucketRequest, options?: AxiosRequestConfig): AxiosPromise<Bucket> {
            return localVarFp.createNewBucket(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a storage bucket by its unique ID.
         * @summary Delete bucket
         * @param {StorageApiDeleteBucketByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBucketById(requestParameters: StorageApiDeleteBucketByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteBucketById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a file by its unique ID. Only users with write permissions have access to delete this resource.
         * @summary Delete File
         * @param {StorageApiDeleteFileByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFileById(requestParameters: StorageApiDeleteFileByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteFileById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a storage bucket by its unique ID. This endpoint response returns a JSON object with the storage bucket metadata.
         * @summary Get bucket
         * @param {StorageApiGetBucketByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBucketById(requestParameters: StorageApiGetBucketByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Bucket> {
            return localVarFp.getBucketById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a file by its unique ID. This endpoint response returns a JSON object with the file metadata.
         * @summary Get file
         * @param {StorageApiGetFileByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileById(requestParameters: StorageApiGetFileByIdRequest, options?: AxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getFileById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a file content by its unique ID. The endpoint response return with a \'Content-Disposition: attachment\' header that tells the browser to start downloading the file to user downloads directory.
         * @summary Get file for download
         * @param {StorageApiGetFileDownloadRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileDownload(requestParameters: StorageApiGetFileDownloadRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getFileDownload(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a file preview image. Currently, this method supports preview for image files (jpg, png, and gif), other supported formats, like pdf, docs, slides, and spreadsheets, will return the file icon image. You can also pass query string arguments for cutting and resizing your preview image. Preview is supported only for image files smaller than 10MB.
         * @summary Get file preview
         * @param {StorageApiGetFilePreviewImageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFilePreviewImage(requestParameters: StorageApiGetFilePreviewImageRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getFilePreviewImage(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a file content by its unique ID. This endpoint is similar to the download method but returns with no  \'Content-Disposition: attachment\' header.
         * @summary Get file for view
         * @param {StorageApiGetFileViewRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileView(requestParameters: StorageApiGetFileViewRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getFileView(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of all the storage buckets. You can use the query params to filter your results.
         * @summary List buckets
         * @param {StorageApiListBucketsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBuckets(requestParameters: StorageApiListBucketsRequest, options?: AxiosRequestConfig): AxiosPromise<BucketList> {
            return localVarFp.listBuckets(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of all the user files. You can use the query params to filter your results.
         * @summary List files
         * @param {StorageApiListFilesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFiles(requestParameters: StorageApiListFilesRequest, options?: AxiosRequestConfig): AxiosPromise<FileList> {
            return localVarFp.listFiles(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a storage bucket by its unique ID.
         * @summary Update bucket
         * @param {StorageApiUpdateBucketByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBucketById(requestParameters: StorageApiUpdateBucketByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Bucket> {
            return localVarFp.updateBucketById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a file by its unique ID. Only users with write permissions have access to update this resource.
         * @summary Update file
         * @param {StorageApiUpdateFileByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFileById(requestParameters: StorageApiUpdateFileByIdRequest, options?: AxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.updateFileById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createFile operation in StorageApi.
 * @export
 * @interface StorageApiCreateFileRequest
 */
export type StorageApiCreateFileRequest = {
    
    /**
    * Storage bucket unique ID. You can create a new storage bucket using the Storage service [server integration](https://appwrite.io/docs/server/storage#createBucket).
    * @type {string}
    * @memberof StorageApiCreateFile
    */
    readonly bucketId: string
    
    /**
    * File ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can\\\'t start with a special char. Max length is 36 chars.
    * @type {string}
    * @memberof StorageApiCreateFile
    */
    readonly fileId: string
    
    /**
    * Binary file. Appwrite SDKs provide helpers to handle file input. [Learn about file input](https://appwrite.io/docs/storage#file-input).
    * @type {string}
    * @memberof StorageApiCreateFile
    */
    readonly file: string
    
    /**
    * An array of permission strings. By default, only the current user is granted all permissions. [Learn more about permissions](https://appwrite.io/docs/permissions).
    * @type {Array<string>}
    * @memberof StorageApiCreateFile
    */
    readonly permissions?: Array<string>
    
} & StorageCreateFileRequest

/**
 * Request parameters for createNewBucket operation in StorageApi.
 * @export
 * @interface StorageApiCreateNewBucketRequest
 */
export type StorageApiCreateNewBucketRequest = {
    
} & StorageCreateNewBucketRequest

/**
 * Request parameters for deleteBucketById operation in StorageApi.
 * @export
 * @interface StorageApiDeleteBucketByIdRequest
 */
export type StorageApiDeleteBucketByIdRequest = {
    
    /**
    * Bucket unique ID.
    * @type {string}
    * @memberof StorageApiDeleteBucketById
    */
    readonly bucketId: string
    
}

/**
 * Request parameters for deleteFileById operation in StorageApi.
 * @export
 * @interface StorageApiDeleteFileByIdRequest
 */
export type StorageApiDeleteFileByIdRequest = {
    
    /**
    * Storage bucket unique ID. You can create a new storage bucket using the Storage service [server integration](https://appwrite.io/docs/server/storage#createBucket).
    * @type {string}
    * @memberof StorageApiDeleteFileById
    */
    readonly bucketId: string
    
    /**
    * File ID.
    * @type {string}
    * @memberof StorageApiDeleteFileById
    */
    readonly fileId: string
    
}

/**
 * Request parameters for getBucketById operation in StorageApi.
 * @export
 * @interface StorageApiGetBucketByIdRequest
 */
export type StorageApiGetBucketByIdRequest = {
    
    /**
    * Bucket unique ID.
    * @type {string}
    * @memberof StorageApiGetBucketById
    */
    readonly bucketId: string
    
}

/**
 * Request parameters for getFileById operation in StorageApi.
 * @export
 * @interface StorageApiGetFileByIdRequest
 */
export type StorageApiGetFileByIdRequest = {
    
    /**
    * Storage bucket unique ID. You can create a new storage bucket using the Storage service [server integration](https://appwrite.io/docs/server/storage#createBucket).
    * @type {string}
    * @memberof StorageApiGetFileById
    */
    readonly bucketId: string
    
    /**
    * File ID.
    * @type {string}
    * @memberof StorageApiGetFileById
    */
    readonly fileId: string
    
}

/**
 * Request parameters for getFileDownload operation in StorageApi.
 * @export
 * @interface StorageApiGetFileDownloadRequest
 */
export type StorageApiGetFileDownloadRequest = {
    
    /**
    * Storage bucket ID. You can create a new storage bucket using the Storage service [server integration](https://appwrite.io/docs/server/storage#createBucket).
    * @type {string}
    * @memberof StorageApiGetFileDownload
    */
    readonly bucketId: string
    
    /**
    * File ID.
    * @type {string}
    * @memberof StorageApiGetFileDownload
    */
    readonly fileId: string
    
}

/**
 * Request parameters for getFilePreviewImage operation in StorageApi.
 * @export
 * @interface StorageApiGetFilePreviewImageRequest
 */
export type StorageApiGetFilePreviewImageRequest = {
    
    /**
    * Storage bucket unique ID. You can create a new storage bucket using the Storage service [server integration](https://appwrite.io/docs/server/storage#createBucket).
    * @type {string}
    * @memberof StorageApiGetFilePreviewImage
    */
    readonly bucketId: string
    
    /**
    * File ID
    * @type {string}
    * @memberof StorageApiGetFilePreviewImage
    */
    readonly fileId: string
    
    /**
    * Resize preview image width, Pass an integer between 0 to 4000.
    * @type {number}
    * @memberof StorageApiGetFilePreviewImage
    */
    readonly width?: number
    
    /**
    * Resize preview image height, Pass an integer between 0 to 4000.
    * @type {number}
    * @memberof StorageApiGetFilePreviewImage
    */
    readonly height?: number
    
    /**
    * Image crop gravity. Can be one of center,top-left,top,top-right,left,right,bottom-left,bottom,bottom-right
    * @type {'center' | 'top-left' | 'top' | 'top-right' | 'left' | 'right' | 'bottom-left' | 'bottom' | 'bottom-right'}
    * @memberof StorageApiGetFilePreviewImage
    */
    readonly gravity?: 'center' | 'top-left' | 'top' | 'top-right' | 'left' | 'right' | 'bottom-left' | 'bottom' | 'bottom-right'
    
    /**
    * Preview image quality. Pass an integer between 0 to 100. Defaults to 100.
    * @type {number}
    * @memberof StorageApiGetFilePreviewImage
    */
    readonly quality?: number
    
    /**
    * Preview image border in pixels. Pass an integer between 0 to 100. Defaults to 0.
    * @type {number}
    * @memberof StorageApiGetFilePreviewImage
    */
    readonly borderWidth?: number
    
    /**
    * Preview image border color. Use a valid HEX color, no # is needed for prefix.
    * @type {string}
    * @memberof StorageApiGetFilePreviewImage
    */
    readonly borderColor?: string
    
    /**
    * Preview image border radius in pixels. Pass an integer between 0 to 4000.
    * @type {number}
    * @memberof StorageApiGetFilePreviewImage
    */
    readonly borderRadius?: number
    
    /**
    * Preview image opacity. Only works with images having an alpha channel (like png). Pass a number between 0 to 1.
    * @type {number}
    * @memberof StorageApiGetFilePreviewImage
    */
    readonly opacity?: number
    
    /**
    * Preview image rotation in degrees. Pass an integer between -360 and 360.
    * @type {number}
    * @memberof StorageApiGetFilePreviewImage
    */
    readonly rotation?: number
    
    /**
    * Preview image background color. Only works with transparent images (png). Use a valid HEX color, no # is needed for prefix.
    * @type {string}
    * @memberof StorageApiGetFilePreviewImage
    */
    readonly background?: string
    
    /**
    * Output format type (jpeg, jpg, png, gif and webp).
    * @type {'jpg' | 'jpeg' | 'gif' | 'png' | 'webp'}
    * @memberof StorageApiGetFilePreviewImage
    */
    readonly output?: 'jpg' | 'jpeg' | 'gif' | 'png' | 'webp'
    
}

/**
 * Request parameters for getFileView operation in StorageApi.
 * @export
 * @interface StorageApiGetFileViewRequest
 */
export type StorageApiGetFileViewRequest = {
    
    /**
    * Storage bucket unique ID. You can create a new storage bucket using the Storage service [server integration](https://appwrite.io/docs/server/storage#createBucket).
    * @type {string}
    * @memberof StorageApiGetFileView
    */
    readonly bucketId: string
    
    /**
    * File ID.
    * @type {string}
    * @memberof StorageApiGetFileView
    */
    readonly fileId: string
    
}

/**
 * Request parameters for listBuckets operation in StorageApi.
 * @export
 * @interface StorageApiListBucketsRequest
 */
export type StorageApiListBucketsRequest = {
    
    /**
    * Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: enabled, name, fileSecurity, maximumFileSize, encryption, antivirus
    * @type {Array<string>}
    * @memberof StorageApiListBuckets
    */
    readonly queries?: Array<string>
    
    /**
    * Search term to filter your list results. Max length: 256 chars.
    * @type {string}
    * @memberof StorageApiListBuckets
    */
    readonly search?: string
    
}

/**
 * Request parameters for listFiles operation in StorageApi.
 * @export
 * @interface StorageApiListFilesRequest
 */
export type StorageApiListFilesRequest = {
    
    /**
    * Storage bucket unique ID. You can create a new storage bucket using the Storage service [server integration](https://appwrite.io/docs/server/storage#createBucket).
    * @type {string}
    * @memberof StorageApiListFiles
    */
    readonly bucketId: string
    
    /**
    * Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: name, signature, mimeType, sizeOriginal, chunksTotal, chunksUploaded
    * @type {Array<string>}
    * @memberof StorageApiListFiles
    */
    readonly queries?: Array<string>
    
    /**
    * Search term to filter your list results. Max length: 256 chars.
    * @type {string}
    * @memberof StorageApiListFiles
    */
    readonly search?: string
    
}

/**
 * Request parameters for updateBucketById operation in StorageApi.
 * @export
 * @interface StorageApiUpdateBucketByIdRequest
 */
export type StorageApiUpdateBucketByIdRequest = {
    
    /**
    * Bucket unique ID.
    * @type {string}
    * @memberof StorageApiUpdateBucketById
    */
    readonly bucketId: string
    
} & StorageUpdateBucketByIdRequest

/**
 * Request parameters for updateFileById operation in StorageApi.
 * @export
 * @interface StorageApiUpdateFileByIdRequest
 */
export type StorageApiUpdateFileByIdRequest = {
    
    /**
    * Storage bucket unique ID. You can create a new storage bucket using the Storage service [server integration](https://appwrite.io/docs/server/storage#createBucket).
    * @type {string}
    * @memberof StorageApiUpdateFileById
    */
    readonly bucketId: string
    
    /**
    * File unique ID.
    * @type {string}
    * @memberof StorageApiUpdateFileById
    */
    readonly fileId: string
    
} & StorageUpdateFileByIdRequest

/**
 * StorageApiGenerated - object-oriented interface
 * @export
 * @class StorageApiGenerated
 * @extends {BaseAPI}
 */
export class StorageApiGenerated extends BaseAPI {
    /**
     * Create a new file. Before using this route, you should create a new bucket resource using either a [server integration](https://appwrite.io/docs/server/storage#storageCreateBucket) API or directly from your Appwrite console.  Larger files should be uploaded using multiple requests with the [content-range](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Range) header to send a partial request with a maximum supported chunk of `5MB`. The `content-range` header values should always be in bytes.  When the first request is sent, the server will return the **File** object, and the subsequent part request must include the file\'s **id** in `x-appwrite-id` header to allow the server to know that the partial upload is for the existing file and not for a new one.  If you\'re creating a new file using one of the Appwrite SDKs, all the chunking logic will be managed by the SDK internally. 
     * @summary Create file
     * @param {StorageApiCreateFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiGenerated
     */
    public createFile(requestParameters: StorageApiCreateFileRequest, options?: AxiosRequestConfig) {
        return StorageApiFp(this.configuration).createFile(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new storage bucket.
     * @summary Create bucket
     * @param {StorageApiCreateNewBucketRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiGenerated
     */
    public createNewBucket(requestParameters: StorageApiCreateNewBucketRequest, options?: AxiosRequestConfig) {
        return StorageApiFp(this.configuration).createNewBucket(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a storage bucket by its unique ID.
     * @summary Delete bucket
     * @param {StorageApiDeleteBucketByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiGenerated
     */
    public deleteBucketById(requestParameters: StorageApiDeleteBucketByIdRequest, options?: AxiosRequestConfig) {
        return StorageApiFp(this.configuration).deleteBucketById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a file by its unique ID. Only users with write permissions have access to delete this resource.
     * @summary Delete File
     * @param {StorageApiDeleteFileByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiGenerated
     */
    public deleteFileById(requestParameters: StorageApiDeleteFileByIdRequest, options?: AxiosRequestConfig) {
        return StorageApiFp(this.configuration).deleteFileById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a storage bucket by its unique ID. This endpoint response returns a JSON object with the storage bucket metadata.
     * @summary Get bucket
     * @param {StorageApiGetBucketByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiGenerated
     */
    public getBucketById(requestParameters: StorageApiGetBucketByIdRequest, options?: AxiosRequestConfig) {
        return StorageApiFp(this.configuration).getBucketById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a file by its unique ID. This endpoint response returns a JSON object with the file metadata.
     * @summary Get file
     * @param {StorageApiGetFileByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiGenerated
     */
    public getFileById(requestParameters: StorageApiGetFileByIdRequest, options?: AxiosRequestConfig) {
        return StorageApiFp(this.configuration).getFileById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a file content by its unique ID. The endpoint response return with a \'Content-Disposition: attachment\' header that tells the browser to start downloading the file to user downloads directory.
     * @summary Get file for download
     * @param {StorageApiGetFileDownloadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiGenerated
     */
    public getFileDownload(requestParameters: StorageApiGetFileDownloadRequest, options?: AxiosRequestConfig) {
        return StorageApiFp(this.configuration).getFileDownload(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a file preview image. Currently, this method supports preview for image files (jpg, png, and gif), other supported formats, like pdf, docs, slides, and spreadsheets, will return the file icon image. You can also pass query string arguments for cutting and resizing your preview image. Preview is supported only for image files smaller than 10MB.
     * @summary Get file preview
     * @param {StorageApiGetFilePreviewImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiGenerated
     */
    public getFilePreviewImage(requestParameters: StorageApiGetFilePreviewImageRequest, options?: AxiosRequestConfig) {
        return StorageApiFp(this.configuration).getFilePreviewImage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a file content by its unique ID. This endpoint is similar to the download method but returns with no  \'Content-Disposition: attachment\' header.
     * @summary Get file for view
     * @param {StorageApiGetFileViewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiGenerated
     */
    public getFileView(requestParameters: StorageApiGetFileViewRequest, options?: AxiosRequestConfig) {
        return StorageApiFp(this.configuration).getFileView(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of all the storage buckets. You can use the query params to filter your results.
     * @summary List buckets
     * @param {StorageApiListBucketsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiGenerated
     */
    public listBuckets(requestParameters: StorageApiListBucketsRequest, options?: AxiosRequestConfig) {
        return StorageApiFp(this.configuration).listBuckets(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of all the user files. You can use the query params to filter your results.
     * @summary List files
     * @param {StorageApiListFilesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiGenerated
     */
    public listFiles(requestParameters: StorageApiListFilesRequest, options?: AxiosRequestConfig) {
        return StorageApiFp(this.configuration).listFiles(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a storage bucket by its unique ID.
     * @summary Update bucket
     * @param {StorageApiUpdateBucketByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiGenerated
     */
    public updateBucketById(requestParameters: StorageApiUpdateBucketByIdRequest, options?: AxiosRequestConfig) {
        return StorageApiFp(this.configuration).updateBucketById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a file by its unique ID. Only users with write permissions have access to update this resource.
     * @summary Update file
     * @param {StorageApiUpdateFileByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiGenerated
     */
    public updateFileById(requestParameters: StorageApiUpdateFileByIdRequest, options?: AxiosRequestConfig) {
        return StorageApiFp(this.configuration).updateFileById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
