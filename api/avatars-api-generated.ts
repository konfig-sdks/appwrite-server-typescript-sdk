/* tslint:disable */
/* eslint-disable */
/*
Appwrite

Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)

The version of the OpenAPI document: 1.5.0
Contact: team@appwrite.io

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AvatarsApi - axios parameter creator
 * @export
 */
export const AvatarsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Converts a given plain text to a QR code image. You can use the query parameters to change the size and style of the resulting image. 
         * @summary Get QR code
         * @param {string} text Plain text to be converted to QR code image.
         * @param {number} [size] QR code size. Pass an integer between 1 to 1000. Defaults to 400.
         * @param {number} [margin] Margin from edge. Pass an integer between 0 to 10. Defaults to 1.
         * @param {boolean} [download] Return resulting image with \&#39;Content-Disposition: attachment \&#39; headers for the browser to start downloading it. Pass 0 for no header, or 1 for otherwise. Default value is set to 0.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateQrCode: async (text: string, size?: number, margin?: number, download?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'text' is not null or undefined
            assertParamExists('generateQrCode', 'text', text)
            const localVarPath = `/avatars/qr`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })
            if (text !== undefined) {
                localVarQueryParameter['text'] = text;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (margin !== undefined) {
                localVarQueryParameter['margin'] = margin;
            }

            if (download !== undefined) {
                localVarQueryParameter['download'] = download;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/avatars/qr',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * You can use this endpoint to show different browser icons to your users. The code argument receives the browser code as it appears in your user [GET /account/sessions](https://appwrite.io/docs/references/cloud/client-web/account#getSessions) endpoint. Use width, height and quality arguments to change the output settings.  When one dimension is specified and the other is 0, the image is scaled with preserved aspect ratio. If both dimensions are 0, the API provides an image at source quality. If dimensions are not specified, the default size of image returned is 100x100px.
         * @summary Get browser icon
         * @param {'aa' | 'an' | 'ch' | 'ci' | 'cm' | 'cr' | 'ff' | 'sf' | 'mf' | 'ps' | 'oi' | 'om' | 'op' | 'true'} code Browser Code.
         * @param {number} [width] Image width. Pass an integer between 0 to 2000. Defaults to 100.
         * @param {number} [height] Image height. Pass an integer between 0 to 2000. Defaults to 100.
         * @param {number} [quality] Image quality. Pass an integer between 0 to 100. Defaults to 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrowserIcon: async (code: 'aa' | 'an' | 'ch' | 'ci' | 'cm' | 'cr' | 'ff' | 'sf' | 'mf' | 'ps' | 'oi' | 'om' | 'op' | 'true', width?: number, height?: number, quality?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('getBrowserIcon', 'code', code)
            const localVarPath = `/avatars/browsers/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code !== undefined ? code : `-code-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })
            if (width !== undefined) {
                localVarQueryParameter['width'] = width;
            }

            if (height !== undefined) {
                localVarQueryParameter['height'] = height;
            }

            if (quality !== undefined) {
                localVarQueryParameter['quality'] = quality;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/avatars/browsers/{code}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * You can use this endpoint to show different country flags icons to your users. The code argument receives the 2 letter country code. Use width, height and quality arguments to change the output settings. Country codes follow the [ISO 3166-1](https://en.wikipedia.org/wiki/ISO_3166-1) standard.  When one dimension is specified and the other is 0, the image is scaled with preserved aspect ratio. If both dimensions are 0, the API provides an image at source quality. If dimensions are not specified, the default size of image returned is 100x100px. 
         * @summary Get country flag
         * @param {'af' | 'ao' | 'al' | 'ad' | 'ae' | 'ar' | 'am' | 'ag' | 'au' | 'at' | 'az' | 'bi' | 'be' | 'bj' | 'bf' | 'bd' | 'bg' | 'bh' | 'bs' | 'ba' | 'by' | 'bz' | 'bo' | 'br' | 'bb' | 'bn' | 'bt' | 'bw' | 'cf' | 'ca' | 'ch' | 'cl' | 'cn' | 'ci' | 'cm' | 'cd' | 'cg' | 'co' | 'km' | 'cv' | 'cr' | 'cu' | 'cy' | 'cz' | 'de' | 'dj' | 'dm' | 'dk' | 'do' | 'dz' | 'ec' | 'eg' | 'er' | 'es' | 'ee' | 'et' | 'fi' | 'fj' | 'fr' | 'fm' | 'ga' | 'gb' | 'ge' | 'gh' | 'gn' | 'gm' | 'gw' | 'gq' | 'gr' | 'gd' | 'gt' | 'gy' | 'hn' | 'hr' | 'ht' | 'hu' | 'id' | 'in' | 'ie' | 'ir' | 'iq' | 'is' | 'il' | 'it' | 'jm' | 'jo' | 'jp' | 'kz' | 'ke' | 'kg' | 'kh' | 'ki' | 'kn' | 'kr' | 'kw' | 'la' | 'lb' | 'lr' | 'ly' | 'lc' | 'li' | 'lk' | 'ls' | 'lt' | 'lu' | 'lv' | 'ma' | 'mc' | 'md' | 'mg' | 'mv' | 'mx' | 'mh' | 'mk' | 'ml' | 'mt' | 'mm' | 'me' | 'mn' | 'mz' | 'mr' | 'mu' | 'mw' | 'my' | 'na' | 'ne' | 'ng' | 'ni' | 'nl' | 'false' | 'np' | 'nr' | 'nz' | 'om' | 'pk' | 'pa' | 'pe' | 'ph' | 'pw' | 'pg' | 'pl' | 'kp' | 'pt' | 'py' | 'qa' | 'ro' | 'ru' | 'rw' | 'sa' | 'sd' | 'sn' | 'sg' | 'sb' | 'sl' | 'sv' | 'sm' | 'so' | 'rs' | 'ss' | 'st' | 'sr' | 'sk' | 'si' | 'se' | 'sz' | 'sc' | 'sy' | 'td' | 'tg' | 'th' | 'tj' | 'tm' | 'tl' | 'to' | 'tt' | 'tn' | 'tr' | 'tv' | 'tz' | 'ug' | 'ua' | 'uy' | 'us' | 'uz' | 'va' | 'vc' | 've' | 'vn' | 'vu' | 'ws' | 'ye' | 'za' | 'zm' | 'zw'} code Country Code. ISO Alpha-2 country code format.
         * @param {number} [width] Image width. Pass an integer between 0 to 2000. Defaults to 100.
         * @param {number} [height] Image height. Pass an integer between 0 to 2000. Defaults to 100.
         * @param {number} [quality] Image quality. Pass an integer between 0 to 100. Defaults to 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCountryFlag: async (code: 'af' | 'ao' | 'al' | 'ad' | 'ae' | 'ar' | 'am' | 'ag' | 'au' | 'at' | 'az' | 'bi' | 'be' | 'bj' | 'bf' | 'bd' | 'bg' | 'bh' | 'bs' | 'ba' | 'by' | 'bz' | 'bo' | 'br' | 'bb' | 'bn' | 'bt' | 'bw' | 'cf' | 'ca' | 'ch' | 'cl' | 'cn' | 'ci' | 'cm' | 'cd' | 'cg' | 'co' | 'km' | 'cv' | 'cr' | 'cu' | 'cy' | 'cz' | 'de' | 'dj' | 'dm' | 'dk' | 'do' | 'dz' | 'ec' | 'eg' | 'er' | 'es' | 'ee' | 'et' | 'fi' | 'fj' | 'fr' | 'fm' | 'ga' | 'gb' | 'ge' | 'gh' | 'gn' | 'gm' | 'gw' | 'gq' | 'gr' | 'gd' | 'gt' | 'gy' | 'hn' | 'hr' | 'ht' | 'hu' | 'id' | 'in' | 'ie' | 'ir' | 'iq' | 'is' | 'il' | 'it' | 'jm' | 'jo' | 'jp' | 'kz' | 'ke' | 'kg' | 'kh' | 'ki' | 'kn' | 'kr' | 'kw' | 'la' | 'lb' | 'lr' | 'ly' | 'lc' | 'li' | 'lk' | 'ls' | 'lt' | 'lu' | 'lv' | 'ma' | 'mc' | 'md' | 'mg' | 'mv' | 'mx' | 'mh' | 'mk' | 'ml' | 'mt' | 'mm' | 'me' | 'mn' | 'mz' | 'mr' | 'mu' | 'mw' | 'my' | 'na' | 'ne' | 'ng' | 'ni' | 'nl' | 'false' | 'np' | 'nr' | 'nz' | 'om' | 'pk' | 'pa' | 'pe' | 'ph' | 'pw' | 'pg' | 'pl' | 'kp' | 'pt' | 'py' | 'qa' | 'ro' | 'ru' | 'rw' | 'sa' | 'sd' | 'sn' | 'sg' | 'sb' | 'sl' | 'sv' | 'sm' | 'so' | 'rs' | 'ss' | 'st' | 'sr' | 'sk' | 'si' | 'se' | 'sz' | 'sc' | 'sy' | 'td' | 'tg' | 'th' | 'tj' | 'tm' | 'tl' | 'to' | 'tt' | 'tn' | 'tr' | 'tv' | 'tz' | 'ug' | 'ua' | 'uy' | 'us' | 'uz' | 'va' | 'vc' | 've' | 'vn' | 'vu' | 'ws' | 'ye' | 'za' | 'zm' | 'zw', width?: number, height?: number, quality?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('getCountryFlag', 'code', code)
            const localVarPath = `/avatars/flags/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code !== undefined ? code : `-code-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })
            if (width !== undefined) {
                localVarQueryParameter['width'] = width;
            }

            if (height !== undefined) {
                localVarQueryParameter['height'] = height;
            }

            if (quality !== undefined) {
                localVarQueryParameter['quality'] = quality;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/avatars/flags/{code}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The credit card endpoint will return you the icon of the credit card provider you need. Use width, height and quality arguments to change the output settings.  When one dimension is specified and the other is 0, the image is scaled with preserved aspect ratio. If both dimensions are 0, the API provides an image at source quality. If dimensions are not specified, the default size of image returned is 100x100px. 
         * @summary Get credit card icon
         * @param {'amex' | 'argencard' | 'cabal' | 'censosud' | 'diners' | 'discover' | 'elo' | 'hipercard' | 'jcb' | 'mastercard' | 'naranja' | 'targeta-shopping' | 'union-china-pay' | 'visa' | 'mir' | 'maestro'} code Credit Card Code. Possible values: amex, argencard, cabal, censosud, diners, discover, elo, hipercard, jcb, mastercard, naranja, targeta-shopping, union-china-pay, visa, mir, maestro.
         * @param {number} [width] Image width. Pass an integer between 0 to 2000. Defaults to 100.
         * @param {number} [height] Image height. Pass an integer between 0 to 2000. Defaults to 100.
         * @param {number} [quality] Image quality. Pass an integer between 0 to 100. Defaults to 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCreditCardIcon: async (code: 'amex' | 'argencard' | 'cabal' | 'censosud' | 'diners' | 'discover' | 'elo' | 'hipercard' | 'jcb' | 'mastercard' | 'naranja' | 'targeta-shopping' | 'union-china-pay' | 'visa' | 'mir' | 'maestro', width?: number, height?: number, quality?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('getCreditCardIcon', 'code', code)
            const localVarPath = `/avatars/credit-cards/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code !== undefined ? code : `-code-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })
            if (width !== undefined) {
                localVarQueryParameter['width'] = width;
            }

            if (height !== undefined) {
                localVarQueryParameter['height'] = height;
            }

            if (quality !== undefined) {
                localVarQueryParameter['quality'] = quality;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/avatars/credit-cards/{code}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to fetch the favorite icon (AKA favicon) of any remote website URL. 
         * @summary Get favicon
         * @param {string} url Website URL which you want to fetch the favicon from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFavicon: async (url: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'url' is not null or undefined
            assertParamExists('getFavicon', 'url', url)
            const localVarPath = `/avatars/favicon`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })
            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/avatars/favicon',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to fetch a remote image URL and crop it to any image size you want. This endpoint is very useful if you need to crop and display remote images in your app or in case you want to make sure a 3rd party image is properly served using a TLS protocol.  When one dimension is specified and the other is 0, the image is scaled with preserved aspect ratio. If both dimensions are 0, the API provides an image at source quality. If dimensions are not specified, the default size of image returned is 400x400px. 
         * @summary Get image from URL
         * @param {string} url Image URL which you want to crop.
         * @param {number} [width] Resize preview image width, Pass an integer between 0 to 2000. Defaults to 400.
         * @param {number} [height] Resize preview image height, Pass an integer between 0 to 2000. Defaults to 400.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRemoteImage: async (url: string, width?: number, height?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'url' is not null or undefined
            assertParamExists('getRemoteImage', 'url', url)
            const localVarPath = `/avatars/image`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })
            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }

            if (width !== undefined) {
                localVarQueryParameter['width'] = width;
            }

            if (height !== undefined) {
                localVarQueryParameter['height'] = height;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/avatars/image',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to show your user initials avatar icon on your website or app. By default, this route will try to print your logged-in user name or email initials. You can also overwrite the user name if you pass the \'name\' parameter. If no name is given and no user is logged, an empty avatar will be returned.  You can use the color and background params to change the avatar colors. By default, a random theme will be selected. The random theme will persist for the user\'s initials when reloading the same theme will always return for the same initials.  When one dimension is specified and the other is 0, the image is scaled with preserved aspect ratio. If both dimensions are 0, the API provides an image at source quality. If dimensions are not specified, the default size of image returned is 100x100px. 
         * @summary Get user initials
         * @param {string} [name] Full Name. When empty, current user name or email will be used. Max length: 128 chars.
         * @param {number} [width] Image width. Pass an integer between 0 to 2000. Defaults to 100.
         * @param {number} [height] Image height. Pass an integer between 0 to 2000. Defaults to 100.
         * @param {string} [background] Changes background color. By default a random color will be picked and stay will persistent to the given name.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInitials: async (name?: string, width?: number, height?: number, background?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/avatars/initials`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })
            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (width !== undefined) {
                localVarQueryParameter['width'] = width;
            }

            if (height !== undefined) {
                localVarQueryParameter['height'] = height;
            }

            if (background !== undefined) {
                localVarQueryParameter['background'] = background;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/avatars/initials',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AvatarsApi - functional programming interface
 * @export
 */
export const AvatarsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AvatarsApiAxiosParamCreator(configuration)
    return {
        /**
         * Converts a given plain text to a QR code image. You can use the query parameters to change the size and style of the resulting image. 
         * @summary Get QR code
         * @param {AvatarsApiGenerateQrCodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateQrCode(requestParameters: AvatarsApiGenerateQrCodeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateQrCode(requestParameters.text, requestParameters.size, requestParameters.margin, requestParameters.download, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * You can use this endpoint to show different browser icons to your users. The code argument receives the browser code as it appears in your user [GET /account/sessions](https://appwrite.io/docs/references/cloud/client-web/account#getSessions) endpoint. Use width, height and quality arguments to change the output settings.  When one dimension is specified and the other is 0, the image is scaled with preserved aspect ratio. If both dimensions are 0, the API provides an image at source quality. If dimensions are not specified, the default size of image returned is 100x100px.
         * @summary Get browser icon
         * @param {AvatarsApiGetBrowserIconRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBrowserIcon(requestParameters: AvatarsApiGetBrowserIconRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBrowserIcon(requestParameters.code, requestParameters.width, requestParameters.height, requestParameters.quality, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * You can use this endpoint to show different country flags icons to your users. The code argument receives the 2 letter country code. Use width, height and quality arguments to change the output settings. Country codes follow the [ISO 3166-1](https://en.wikipedia.org/wiki/ISO_3166-1) standard.  When one dimension is specified and the other is 0, the image is scaled with preserved aspect ratio. If both dimensions are 0, the API provides an image at source quality. If dimensions are not specified, the default size of image returned is 100x100px. 
         * @summary Get country flag
         * @param {AvatarsApiGetCountryFlagRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCountryFlag(requestParameters: AvatarsApiGetCountryFlagRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCountryFlag(requestParameters.code, requestParameters.width, requestParameters.height, requestParameters.quality, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The credit card endpoint will return you the icon of the credit card provider you need. Use width, height and quality arguments to change the output settings.  When one dimension is specified and the other is 0, the image is scaled with preserved aspect ratio. If both dimensions are 0, the API provides an image at source quality. If dimensions are not specified, the default size of image returned is 100x100px. 
         * @summary Get credit card icon
         * @param {AvatarsApiGetCreditCardIconRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCreditCardIcon(requestParameters: AvatarsApiGetCreditCardIconRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCreditCardIcon(requestParameters.code, requestParameters.width, requestParameters.height, requestParameters.quality, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to fetch the favorite icon (AKA favicon) of any remote website URL. 
         * @summary Get favicon
         * @param {AvatarsApiGetFaviconRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFavicon(requestParameters: AvatarsApiGetFaviconRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFavicon(requestParameters.url, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to fetch a remote image URL and crop it to any image size you want. This endpoint is very useful if you need to crop and display remote images in your app or in case you want to make sure a 3rd party image is properly served using a TLS protocol.  When one dimension is specified and the other is 0, the image is scaled with preserved aspect ratio. If both dimensions are 0, the API provides an image at source quality. If dimensions are not specified, the default size of image returned is 400x400px. 
         * @summary Get image from URL
         * @param {AvatarsApiGetRemoteImageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRemoteImage(requestParameters: AvatarsApiGetRemoteImageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRemoteImage(requestParameters.url, requestParameters.width, requestParameters.height, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to show your user initials avatar icon on your website or app. By default, this route will try to print your logged-in user name or email initials. You can also overwrite the user name if you pass the \'name\' parameter. If no name is given and no user is logged, an empty avatar will be returned.  You can use the color and background params to change the avatar colors. By default, a random theme will be selected. The random theme will persist for the user\'s initials when reloading the same theme will always return for the same initials.  When one dimension is specified and the other is 0, the image is scaled with preserved aspect ratio. If both dimensions are 0, the API provides an image at source quality. If dimensions are not specified, the default size of image returned is 100x100px. 
         * @summary Get user initials
         * @param {AvatarsApiGetUserInitialsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserInitials(requestParameters: AvatarsApiGetUserInitialsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserInitials(requestParameters.name, requestParameters.width, requestParameters.height, requestParameters.background, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AvatarsApi - factory interface
 * @export
 */
export const AvatarsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AvatarsApiFp(configuration)
    return {
        /**
         * Converts a given plain text to a QR code image. You can use the query parameters to change the size and style of the resulting image. 
         * @summary Get QR code
         * @param {AvatarsApiGenerateQrCodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateQrCode(requestParameters: AvatarsApiGenerateQrCodeRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.generateQrCode(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * You can use this endpoint to show different browser icons to your users. The code argument receives the browser code as it appears in your user [GET /account/sessions](https://appwrite.io/docs/references/cloud/client-web/account#getSessions) endpoint. Use width, height and quality arguments to change the output settings.  When one dimension is specified and the other is 0, the image is scaled with preserved aspect ratio. If both dimensions are 0, the API provides an image at source quality. If dimensions are not specified, the default size of image returned is 100x100px.
         * @summary Get browser icon
         * @param {AvatarsApiGetBrowserIconRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrowserIcon(requestParameters: AvatarsApiGetBrowserIconRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getBrowserIcon(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * You can use this endpoint to show different country flags icons to your users. The code argument receives the 2 letter country code. Use width, height and quality arguments to change the output settings. Country codes follow the [ISO 3166-1](https://en.wikipedia.org/wiki/ISO_3166-1) standard.  When one dimension is specified and the other is 0, the image is scaled with preserved aspect ratio. If both dimensions are 0, the API provides an image at source quality. If dimensions are not specified, the default size of image returned is 100x100px. 
         * @summary Get country flag
         * @param {AvatarsApiGetCountryFlagRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCountryFlag(requestParameters: AvatarsApiGetCountryFlagRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getCountryFlag(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * The credit card endpoint will return you the icon of the credit card provider you need. Use width, height and quality arguments to change the output settings.  When one dimension is specified and the other is 0, the image is scaled with preserved aspect ratio. If both dimensions are 0, the API provides an image at source quality. If dimensions are not specified, the default size of image returned is 100x100px. 
         * @summary Get credit card icon
         * @param {AvatarsApiGetCreditCardIconRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCreditCardIcon(requestParameters: AvatarsApiGetCreditCardIconRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getCreditCardIcon(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to fetch the favorite icon (AKA favicon) of any remote website URL. 
         * @summary Get favicon
         * @param {AvatarsApiGetFaviconRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFavicon(requestParameters: AvatarsApiGetFaviconRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getFavicon(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to fetch a remote image URL and crop it to any image size you want. This endpoint is very useful if you need to crop and display remote images in your app or in case you want to make sure a 3rd party image is properly served using a TLS protocol.  When one dimension is specified and the other is 0, the image is scaled with preserved aspect ratio. If both dimensions are 0, the API provides an image at source quality. If dimensions are not specified, the default size of image returned is 400x400px. 
         * @summary Get image from URL
         * @param {AvatarsApiGetRemoteImageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRemoteImage(requestParameters: AvatarsApiGetRemoteImageRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getRemoteImage(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to show your user initials avatar icon on your website or app. By default, this route will try to print your logged-in user name or email initials. You can also overwrite the user name if you pass the \'name\' parameter. If no name is given and no user is logged, an empty avatar will be returned.  You can use the color and background params to change the avatar colors. By default, a random theme will be selected. The random theme will persist for the user\'s initials when reloading the same theme will always return for the same initials.  When one dimension is specified and the other is 0, the image is scaled with preserved aspect ratio. If both dimensions are 0, the API provides an image at source quality. If dimensions are not specified, the default size of image returned is 100x100px. 
         * @summary Get user initials
         * @param {AvatarsApiGetUserInitialsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInitials(requestParameters: AvatarsApiGetUserInitialsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getUserInitials(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for generateQrCode operation in AvatarsApi.
 * @export
 * @interface AvatarsApiGenerateQrCodeRequest
 */
export type AvatarsApiGenerateQrCodeRequest = {
    
    /**
    * Plain text to be converted to QR code image.
    * @type {string}
    * @memberof AvatarsApiGenerateQrCode
    */
    readonly text: string
    
    /**
    * QR code size. Pass an integer between 1 to 1000. Defaults to 400.
    * @type {number}
    * @memberof AvatarsApiGenerateQrCode
    */
    readonly size?: number
    
    /**
    * Margin from edge. Pass an integer between 0 to 10. Defaults to 1.
    * @type {number}
    * @memberof AvatarsApiGenerateQrCode
    */
    readonly margin?: number
    
    /**
    * Return resulting image with \'Content-Disposition: attachment \' headers for the browser to start downloading it. Pass 0 for no header, or 1 for otherwise. Default value is set to 0.
    * @type {boolean}
    * @memberof AvatarsApiGenerateQrCode
    */
    readonly download?: boolean
    
}

/**
 * Request parameters for getBrowserIcon operation in AvatarsApi.
 * @export
 * @interface AvatarsApiGetBrowserIconRequest
 */
export type AvatarsApiGetBrowserIconRequest = {
    
    /**
    * Browser Code.
    * @type {'aa' | 'an' | 'ch' | 'ci' | 'cm' | 'cr' | 'ff' | 'sf' | 'mf' | 'ps' | 'oi' | 'om' | 'op' | 'true'}
    * @memberof AvatarsApiGetBrowserIcon
    */
    readonly code: 'aa' | 'an' | 'ch' | 'ci' | 'cm' | 'cr' | 'ff' | 'sf' | 'mf' | 'ps' | 'oi' | 'om' | 'op' | 'true'
    
    /**
    * Image width. Pass an integer between 0 to 2000. Defaults to 100.
    * @type {number}
    * @memberof AvatarsApiGetBrowserIcon
    */
    readonly width?: number
    
    /**
    * Image height. Pass an integer between 0 to 2000. Defaults to 100.
    * @type {number}
    * @memberof AvatarsApiGetBrowserIcon
    */
    readonly height?: number
    
    /**
    * Image quality. Pass an integer between 0 to 100. Defaults to 100.
    * @type {number}
    * @memberof AvatarsApiGetBrowserIcon
    */
    readonly quality?: number
    
}

/**
 * Request parameters for getCountryFlag operation in AvatarsApi.
 * @export
 * @interface AvatarsApiGetCountryFlagRequest
 */
export type AvatarsApiGetCountryFlagRequest = {
    
    /**
    * Country Code. ISO Alpha-2 country code format.
    * @type {'af' | 'ao' | 'al' | 'ad' | 'ae' | 'ar' | 'am' | 'ag' | 'au' | 'at' | 'az' | 'bi' | 'be' | 'bj' | 'bf' | 'bd' | 'bg' | 'bh' | 'bs' | 'ba' | 'by' | 'bz' | 'bo' | 'br' | 'bb' | 'bn' | 'bt' | 'bw' | 'cf' | 'ca' | 'ch' | 'cl' | 'cn' | 'ci' | 'cm' | 'cd' | 'cg' | 'co' | 'km' | 'cv' | 'cr' | 'cu' | 'cy' | 'cz' | 'de' | 'dj' | 'dm' | 'dk' | 'do' | 'dz' | 'ec' | 'eg' | 'er' | 'es' | 'ee' | 'et' | 'fi' | 'fj' | 'fr' | 'fm' | 'ga' | 'gb' | 'ge' | 'gh' | 'gn' | 'gm' | 'gw' | 'gq' | 'gr' | 'gd' | 'gt' | 'gy' | 'hn' | 'hr' | 'ht' | 'hu' | 'id' | 'in' | 'ie' | 'ir' | 'iq' | 'is' | 'il' | 'it' | 'jm' | 'jo' | 'jp' | 'kz' | 'ke' | 'kg' | 'kh' | 'ki' | 'kn' | 'kr' | 'kw' | 'la' | 'lb' | 'lr' | 'ly' | 'lc' | 'li' | 'lk' | 'ls' | 'lt' | 'lu' | 'lv' | 'ma' | 'mc' | 'md' | 'mg' | 'mv' | 'mx' | 'mh' | 'mk' | 'ml' | 'mt' | 'mm' | 'me' | 'mn' | 'mz' | 'mr' | 'mu' | 'mw' | 'my' | 'na' | 'ne' | 'ng' | 'ni' | 'nl' | 'false' | 'np' | 'nr' | 'nz' | 'om' | 'pk' | 'pa' | 'pe' | 'ph' | 'pw' | 'pg' | 'pl' | 'kp' | 'pt' | 'py' | 'qa' | 'ro' | 'ru' | 'rw' | 'sa' | 'sd' | 'sn' | 'sg' | 'sb' | 'sl' | 'sv' | 'sm' | 'so' | 'rs' | 'ss' | 'st' | 'sr' | 'sk' | 'si' | 'se' | 'sz' | 'sc' | 'sy' | 'td' | 'tg' | 'th' | 'tj' | 'tm' | 'tl' | 'to' | 'tt' | 'tn' | 'tr' | 'tv' | 'tz' | 'ug' | 'ua' | 'uy' | 'us' | 'uz' | 'va' | 'vc' | 've' | 'vn' | 'vu' | 'ws' | 'ye' | 'za' | 'zm' | 'zw'}
    * @memberof AvatarsApiGetCountryFlag
    */
    readonly code: 'af' | 'ao' | 'al' | 'ad' | 'ae' | 'ar' | 'am' | 'ag' | 'au' | 'at' | 'az' | 'bi' | 'be' | 'bj' | 'bf' | 'bd' | 'bg' | 'bh' | 'bs' | 'ba' | 'by' | 'bz' | 'bo' | 'br' | 'bb' | 'bn' | 'bt' | 'bw' | 'cf' | 'ca' | 'ch' | 'cl' | 'cn' | 'ci' | 'cm' | 'cd' | 'cg' | 'co' | 'km' | 'cv' | 'cr' | 'cu' | 'cy' | 'cz' | 'de' | 'dj' | 'dm' | 'dk' | 'do' | 'dz' | 'ec' | 'eg' | 'er' | 'es' | 'ee' | 'et' | 'fi' | 'fj' | 'fr' | 'fm' | 'ga' | 'gb' | 'ge' | 'gh' | 'gn' | 'gm' | 'gw' | 'gq' | 'gr' | 'gd' | 'gt' | 'gy' | 'hn' | 'hr' | 'ht' | 'hu' | 'id' | 'in' | 'ie' | 'ir' | 'iq' | 'is' | 'il' | 'it' | 'jm' | 'jo' | 'jp' | 'kz' | 'ke' | 'kg' | 'kh' | 'ki' | 'kn' | 'kr' | 'kw' | 'la' | 'lb' | 'lr' | 'ly' | 'lc' | 'li' | 'lk' | 'ls' | 'lt' | 'lu' | 'lv' | 'ma' | 'mc' | 'md' | 'mg' | 'mv' | 'mx' | 'mh' | 'mk' | 'ml' | 'mt' | 'mm' | 'me' | 'mn' | 'mz' | 'mr' | 'mu' | 'mw' | 'my' | 'na' | 'ne' | 'ng' | 'ni' | 'nl' | 'false' | 'np' | 'nr' | 'nz' | 'om' | 'pk' | 'pa' | 'pe' | 'ph' | 'pw' | 'pg' | 'pl' | 'kp' | 'pt' | 'py' | 'qa' | 'ro' | 'ru' | 'rw' | 'sa' | 'sd' | 'sn' | 'sg' | 'sb' | 'sl' | 'sv' | 'sm' | 'so' | 'rs' | 'ss' | 'st' | 'sr' | 'sk' | 'si' | 'se' | 'sz' | 'sc' | 'sy' | 'td' | 'tg' | 'th' | 'tj' | 'tm' | 'tl' | 'to' | 'tt' | 'tn' | 'tr' | 'tv' | 'tz' | 'ug' | 'ua' | 'uy' | 'us' | 'uz' | 'va' | 'vc' | 've' | 'vn' | 'vu' | 'ws' | 'ye' | 'za' | 'zm' | 'zw'
    
    /**
    * Image width. Pass an integer between 0 to 2000. Defaults to 100.
    * @type {number}
    * @memberof AvatarsApiGetCountryFlag
    */
    readonly width?: number
    
    /**
    * Image height. Pass an integer between 0 to 2000. Defaults to 100.
    * @type {number}
    * @memberof AvatarsApiGetCountryFlag
    */
    readonly height?: number
    
    /**
    * Image quality. Pass an integer between 0 to 100. Defaults to 100.
    * @type {number}
    * @memberof AvatarsApiGetCountryFlag
    */
    readonly quality?: number
    
}

/**
 * Request parameters for getCreditCardIcon operation in AvatarsApi.
 * @export
 * @interface AvatarsApiGetCreditCardIconRequest
 */
export type AvatarsApiGetCreditCardIconRequest = {
    
    /**
    * Credit Card Code. Possible values: amex, argencard, cabal, censosud, diners, discover, elo, hipercard, jcb, mastercard, naranja, targeta-shopping, union-china-pay, visa, mir, maestro.
    * @type {'amex' | 'argencard' | 'cabal' | 'censosud' | 'diners' | 'discover' | 'elo' | 'hipercard' | 'jcb' | 'mastercard' | 'naranja' | 'targeta-shopping' | 'union-china-pay' | 'visa' | 'mir' | 'maestro'}
    * @memberof AvatarsApiGetCreditCardIcon
    */
    readonly code: 'amex' | 'argencard' | 'cabal' | 'censosud' | 'diners' | 'discover' | 'elo' | 'hipercard' | 'jcb' | 'mastercard' | 'naranja' | 'targeta-shopping' | 'union-china-pay' | 'visa' | 'mir' | 'maestro'
    
    /**
    * Image width. Pass an integer between 0 to 2000. Defaults to 100.
    * @type {number}
    * @memberof AvatarsApiGetCreditCardIcon
    */
    readonly width?: number
    
    /**
    * Image height. Pass an integer between 0 to 2000. Defaults to 100.
    * @type {number}
    * @memberof AvatarsApiGetCreditCardIcon
    */
    readonly height?: number
    
    /**
    * Image quality. Pass an integer between 0 to 100. Defaults to 100.
    * @type {number}
    * @memberof AvatarsApiGetCreditCardIcon
    */
    readonly quality?: number
    
}

/**
 * Request parameters for getFavicon operation in AvatarsApi.
 * @export
 * @interface AvatarsApiGetFaviconRequest
 */
export type AvatarsApiGetFaviconRequest = {
    
    /**
    * Website URL which you want to fetch the favicon from.
    * @type {string}
    * @memberof AvatarsApiGetFavicon
    */
    readonly url: string
    
}

/**
 * Request parameters for getRemoteImage operation in AvatarsApi.
 * @export
 * @interface AvatarsApiGetRemoteImageRequest
 */
export type AvatarsApiGetRemoteImageRequest = {
    
    /**
    * Image URL which you want to crop.
    * @type {string}
    * @memberof AvatarsApiGetRemoteImage
    */
    readonly url: string
    
    /**
    * Resize preview image width, Pass an integer between 0 to 2000. Defaults to 400.
    * @type {number}
    * @memberof AvatarsApiGetRemoteImage
    */
    readonly width?: number
    
    /**
    * Resize preview image height, Pass an integer between 0 to 2000. Defaults to 400.
    * @type {number}
    * @memberof AvatarsApiGetRemoteImage
    */
    readonly height?: number
    
}

/**
 * Request parameters for getUserInitials operation in AvatarsApi.
 * @export
 * @interface AvatarsApiGetUserInitialsRequest
 */
export type AvatarsApiGetUserInitialsRequest = {
    
    /**
    * Full Name. When empty, current user name or email will be used. Max length: 128 chars.
    * @type {string}
    * @memberof AvatarsApiGetUserInitials
    */
    readonly name?: string
    
    /**
    * Image width. Pass an integer between 0 to 2000. Defaults to 100.
    * @type {number}
    * @memberof AvatarsApiGetUserInitials
    */
    readonly width?: number
    
    /**
    * Image height. Pass an integer between 0 to 2000. Defaults to 100.
    * @type {number}
    * @memberof AvatarsApiGetUserInitials
    */
    readonly height?: number
    
    /**
    * Changes background color. By default a random color will be picked and stay will persistent to the given name.
    * @type {string}
    * @memberof AvatarsApiGetUserInitials
    */
    readonly background?: string
    
}

/**
 * AvatarsApiGenerated - object-oriented interface
 * @export
 * @class AvatarsApiGenerated
 * @extends {BaseAPI}
 */
export class AvatarsApiGenerated extends BaseAPI {
    /**
     * Converts a given plain text to a QR code image. You can use the query parameters to change the size and style of the resulting image. 
     * @summary Get QR code
     * @param {AvatarsApiGenerateQrCodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvatarsApiGenerated
     */
    public generateQrCode(requestParameters: AvatarsApiGenerateQrCodeRequest, options?: AxiosRequestConfig) {
        return AvatarsApiFp(this.configuration).generateQrCode(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * You can use this endpoint to show different browser icons to your users. The code argument receives the browser code as it appears in your user [GET /account/sessions](https://appwrite.io/docs/references/cloud/client-web/account#getSessions) endpoint. Use width, height and quality arguments to change the output settings.  When one dimension is specified and the other is 0, the image is scaled with preserved aspect ratio. If both dimensions are 0, the API provides an image at source quality. If dimensions are not specified, the default size of image returned is 100x100px.
     * @summary Get browser icon
     * @param {AvatarsApiGetBrowserIconRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvatarsApiGenerated
     */
    public getBrowserIcon(requestParameters: AvatarsApiGetBrowserIconRequest, options?: AxiosRequestConfig) {
        return AvatarsApiFp(this.configuration).getBrowserIcon(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * You can use this endpoint to show different country flags icons to your users. The code argument receives the 2 letter country code. Use width, height and quality arguments to change the output settings. Country codes follow the [ISO 3166-1](https://en.wikipedia.org/wiki/ISO_3166-1) standard.  When one dimension is specified and the other is 0, the image is scaled with preserved aspect ratio. If both dimensions are 0, the API provides an image at source quality. If dimensions are not specified, the default size of image returned is 100x100px. 
     * @summary Get country flag
     * @param {AvatarsApiGetCountryFlagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvatarsApiGenerated
     */
    public getCountryFlag(requestParameters: AvatarsApiGetCountryFlagRequest, options?: AxiosRequestConfig) {
        return AvatarsApiFp(this.configuration).getCountryFlag(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The credit card endpoint will return you the icon of the credit card provider you need. Use width, height and quality arguments to change the output settings.  When one dimension is specified and the other is 0, the image is scaled with preserved aspect ratio. If both dimensions are 0, the API provides an image at source quality. If dimensions are not specified, the default size of image returned is 100x100px. 
     * @summary Get credit card icon
     * @param {AvatarsApiGetCreditCardIconRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvatarsApiGenerated
     */
    public getCreditCardIcon(requestParameters: AvatarsApiGetCreditCardIconRequest, options?: AxiosRequestConfig) {
        return AvatarsApiFp(this.configuration).getCreditCardIcon(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to fetch the favorite icon (AKA favicon) of any remote website URL. 
     * @summary Get favicon
     * @param {AvatarsApiGetFaviconRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvatarsApiGenerated
     */
    public getFavicon(requestParameters: AvatarsApiGetFaviconRequest, options?: AxiosRequestConfig) {
        return AvatarsApiFp(this.configuration).getFavicon(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to fetch a remote image URL and crop it to any image size you want. This endpoint is very useful if you need to crop and display remote images in your app or in case you want to make sure a 3rd party image is properly served using a TLS protocol.  When one dimension is specified and the other is 0, the image is scaled with preserved aspect ratio. If both dimensions are 0, the API provides an image at source quality. If dimensions are not specified, the default size of image returned is 400x400px. 
     * @summary Get image from URL
     * @param {AvatarsApiGetRemoteImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvatarsApiGenerated
     */
    public getRemoteImage(requestParameters: AvatarsApiGetRemoteImageRequest, options?: AxiosRequestConfig) {
        return AvatarsApiFp(this.configuration).getRemoteImage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to show your user initials avatar icon on your website or app. By default, this route will try to print your logged-in user name or email initials. You can also overwrite the user name if you pass the \'name\' parameter. If no name is given and no user is logged, an empty avatar will be returned.  You can use the color and background params to change the avatar colors. By default, a random theme will be selected. The random theme will persist for the user\'s initials when reloading the same theme will always return for the same initials.  When one dimension is specified and the other is 0, the image is scaled with preserved aspect ratio. If both dimensions are 0, the API provides an image at source quality. If dimensions are not specified, the default size of image returned is 100x100px. 
     * @summary Get user initials
     * @param {AvatarsApiGetUserInitialsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvatarsApiGenerated
     */
    public getUserInitials(requestParameters: AvatarsApiGetUserInitialsRequest = {}, options?: AxiosRequestConfig) {
        return AvatarsApiFp(this.configuration).getUserInitials(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
