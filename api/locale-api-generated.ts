/* tslint:disable */
/* eslint-disable */
/*
Appwrite

Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)

The version of the OpenAPI document: 1.5.0
Contact: team@appwrite.io

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ContinentList } from '../models';
// @ts-ignore
import { CountryList } from '../models';
// @ts-ignore
import { CurrencyList } from '../models';
// @ts-ignore
import { LanguageList } from '../models';
// @ts-ignore
import { Locale } from '../models';
// @ts-ignore
import { LocaleCodeList } from '../models';
// @ts-ignore
import { PhoneList } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * LocaleApi - axios parameter creator
 * @export
 */
export const LocaleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * List of all languages classified by ISO 639-1 including 2-letter code, name in English, and name in the respective language.
         * @summary List languages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLanguageList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/locale/languages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/locale/languages',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the current user location based on IP. Returns an object with user country code, country name, continent name, continent code, ip address and suggested currency. You can use the locale header to get the data in a supported language.  ([IP Geolocation by DB-IP](https://db-ip.com))
         * @summary Get user locale
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserLocaleData: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/locale`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/locale',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List of all locale codes in [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes).
         * @summary List Locale Codes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCodes: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/locale/codes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/locale/codes',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List of all continents. You can use the locale header to get the data in a supported language.
         * @summary List continents
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContinents: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/locale/continents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/locale/continents',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List of all countries. You can use the locale header to get the data in a supported language.
         * @summary List countries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCountries: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/locale/countries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/locale/countries',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List of all currencies, including currency symbol, name, plural, and decimal digits for all major and minor currencies. You can use the locale header to get the data in a supported language.
         * @summary List currencies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCurrenciesData: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/locale/currencies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/locale/currencies',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List of all countries that are currently members of the EU. You can use the locale header to get the data in a supported language.
         * @summary List EU countries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEuCountries: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/locale/countries/eu`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/locale/countries/eu',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List of all countries phone codes. You can use the locale header to get the data in a supported language.
         * @summary List countries phone codes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPhoneCodes: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/locale/countries/phones`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Key", keyParamName: "key", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/locale/countries/phones',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LocaleApi - functional programming interface
 * @export
 */
export const LocaleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LocaleApiAxiosParamCreator(configuration)
    return {
        /**
         * List of all languages classified by ISO 639-1 including 2-letter code, name in English, and name in the respective language.
         * @summary List languages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLanguageList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LanguageList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLanguageList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the current user location based on IP. Returns an object with user country code, country name, continent name, continent code, ip address and suggested currency. You can use the locale header to get the data in a supported language.  ([IP Geolocation by DB-IP](https://db-ip.com))
         * @summary Get user locale
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserLocaleData(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Locale>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserLocaleData(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List of all locale codes in [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes).
         * @summary List Locale Codes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCodes(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LocaleCodeList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCodes(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List of all continents. You can use the locale header to get the data in a supported language.
         * @summary List continents
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listContinents(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContinentList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listContinents(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List of all countries. You can use the locale header to get the data in a supported language.
         * @summary List countries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCountries(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CountryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCountries(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List of all currencies, including currency symbol, name, plural, and decimal digits for all major and minor currencies. You can use the locale header to get the data in a supported language.
         * @summary List currencies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCurrenciesData(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CurrencyList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCurrenciesData(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List of all countries that are currently members of the EU. You can use the locale header to get the data in a supported language.
         * @summary List EU countries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listEuCountries(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CountryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listEuCountries(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List of all countries phone codes. You can use the locale header to get the data in a supported language.
         * @summary List countries phone codes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPhoneCodes(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PhoneList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPhoneCodes(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LocaleApi - factory interface
 * @export
 */
export const LocaleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LocaleApiFp(configuration)
    return {
        /**
         * List of all languages classified by ISO 639-1 including 2-letter code, name in English, and name in the respective language.
         * @summary List languages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLanguageList(options?: AxiosRequestConfig): AxiosPromise<LanguageList> {
            return localVarFp.getLanguageList(options).then((request) => request(axios, basePath));
        },
        /**
         * Get the current user location based on IP. Returns an object with user country code, country name, continent name, continent code, ip address and suggested currency. You can use the locale header to get the data in a supported language.  ([IP Geolocation by DB-IP](https://db-ip.com))
         * @summary Get user locale
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserLocaleData(options?: AxiosRequestConfig): AxiosPromise<Locale> {
            return localVarFp.getUserLocaleData(options).then((request) => request(axios, basePath));
        },
        /**
         * List of all locale codes in [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes).
         * @summary List Locale Codes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCodes(options?: AxiosRequestConfig): AxiosPromise<LocaleCodeList> {
            return localVarFp.listCodes(options).then((request) => request(axios, basePath));
        },
        /**
         * List of all continents. You can use the locale header to get the data in a supported language.
         * @summary List continents
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContinents(options?: AxiosRequestConfig): AxiosPromise<ContinentList> {
            return localVarFp.listContinents(options).then((request) => request(axios, basePath));
        },
        /**
         * List of all countries. You can use the locale header to get the data in a supported language.
         * @summary List countries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCountries(options?: AxiosRequestConfig): AxiosPromise<CountryList> {
            return localVarFp.listCountries(options).then((request) => request(axios, basePath));
        },
        /**
         * List of all currencies, including currency symbol, name, plural, and decimal digits for all major and minor currencies. You can use the locale header to get the data in a supported language.
         * @summary List currencies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCurrenciesData(options?: AxiosRequestConfig): AxiosPromise<CurrencyList> {
            return localVarFp.listCurrenciesData(options).then((request) => request(axios, basePath));
        },
        /**
         * List of all countries that are currently members of the EU. You can use the locale header to get the data in a supported language.
         * @summary List EU countries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEuCountries(options?: AxiosRequestConfig): AxiosPromise<CountryList> {
            return localVarFp.listEuCountries(options).then((request) => request(axios, basePath));
        },
        /**
         * List of all countries phone codes. You can use the locale header to get the data in a supported language.
         * @summary List countries phone codes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPhoneCodes(options?: AxiosRequestConfig): AxiosPromise<PhoneList> {
            return localVarFp.listPhoneCodes(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LocaleApiGenerated - object-oriented interface
 * @export
 * @class LocaleApiGenerated
 * @extends {BaseAPI}
 */
export class LocaleApiGenerated extends BaseAPI {
    /**
     * List of all languages classified by ISO 639-1 including 2-letter code, name in English, and name in the respective language.
     * @summary List languages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocaleApiGenerated
     */
    public getLanguageList(options?: AxiosRequestConfig) {
        return LocaleApiFp(this.configuration).getLanguageList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the current user location based on IP. Returns an object with user country code, country name, continent name, continent code, ip address and suggested currency. You can use the locale header to get the data in a supported language.  ([IP Geolocation by DB-IP](https://db-ip.com))
     * @summary Get user locale
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocaleApiGenerated
     */
    public getUserLocaleData(options?: AxiosRequestConfig) {
        return LocaleApiFp(this.configuration).getUserLocaleData(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List of all locale codes in [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes).
     * @summary List Locale Codes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocaleApiGenerated
     */
    public listCodes(options?: AxiosRequestConfig) {
        return LocaleApiFp(this.configuration).listCodes(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List of all continents. You can use the locale header to get the data in a supported language.
     * @summary List continents
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocaleApiGenerated
     */
    public listContinents(options?: AxiosRequestConfig) {
        return LocaleApiFp(this.configuration).listContinents(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List of all countries. You can use the locale header to get the data in a supported language.
     * @summary List countries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocaleApiGenerated
     */
    public listCountries(options?: AxiosRequestConfig) {
        return LocaleApiFp(this.configuration).listCountries(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List of all currencies, including currency symbol, name, plural, and decimal digits for all major and minor currencies. You can use the locale header to get the data in a supported language.
     * @summary List currencies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocaleApiGenerated
     */
    public listCurrenciesData(options?: AxiosRequestConfig) {
        return LocaleApiFp(this.configuration).listCurrenciesData(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List of all countries that are currently members of the EU. You can use the locale header to get the data in a supported language.
     * @summary List EU countries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocaleApiGenerated
     */
    public listEuCountries(options?: AxiosRequestConfig) {
        return LocaleApiFp(this.configuration).listEuCountries(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List of all countries phone codes. You can use the locale header to get the data in a supported language.
     * @summary List countries phone codes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocaleApiGenerated
     */
    public listPhoneCodes(options?: AxiosRequestConfig) {
        return LocaleApiFp(this.configuration).listPhoneCodes(options).then((request) => request(this.axios, this.basePath));
    }
}
